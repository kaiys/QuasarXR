"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("_app-pages-browser_PalletEngine_module_ts",{

/***/ "(app-pages-browser)/./PalletEngine/module.ts":
/*!********************************!*\
  !*** ./PalletEngine/module.ts ***!
  \********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Command: function() { return /* binding */ Command; },\n/* harmony export */   PalletEngine: function() { return /* binding */ PalletEngine; },\n/* harmony export */   Renderer: function() { return /* binding */ Renderer; },\n/* harmony export */   Scene: function() { return /* binding */ Scene; },\n/* harmony export */   _module: function() { return /* binding */ _module; }\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ \"(app-pages-browser)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var lil_gui__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! lil-gui */ \"(app-pages-browser)/./node_modules/lil-gui/dist/lil-gui.esm.js\");\n/* harmony import */ var three_examples_jsm_loaders_GLTFLoader__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! three/examples/jsm/loaders/GLTFLoader */ \"(app-pages-browser)/./node_modules/three/examples/jsm/loaders/GLTFLoader.js\");\n/* harmony import */ var three_examples_jsm_controls_OrbitControls__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! three/examples/jsm/controls/OrbitControls */ \"(app-pages-browser)/./node_modules/three/examples/jsm/controls/OrbitControls.js\");\n/* harmony import */ var three_examples_jsm_controls_TransformControls__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! three/examples/jsm/controls/TransformControls */ \"(app-pages-browser)/./node_modules/three/examples/jsm/controls/TransformControls.js\");\n/* harmony import */ var three_mesh_bvh__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! three-mesh-bvh */ \"(app-pages-browser)/./node_modules/three-mesh-bvh/src/utils/ExtensionUtilities.js\");\n/* harmony import */ var three_examples_jsm_interactive_SelectionBox__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! three/examples/jsm/interactive/SelectionBox */ \"(app-pages-browser)/./node_modules/three/examples/jsm/interactive/SelectionBox.js\");\n/* harmony import */ var three_examples_jsm_interactive_SelectionHelper__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! three/examples/jsm/interactive/SelectionHelper */ \"(app-pages-browser)/./node_modules/three/examples/jsm/interactive/SelectionHelper.js\");\n/* harmony import */ var three_src_extras_ImageUtils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! three/src/extras/ImageUtils */ \"(app-pages-browser)/./node_modules/three/src/extras/ImageUtils.js\");\n/* harmony import */ var three_examples_jsm_shaders_HorizontalBlurShader__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! three/examples/jsm/shaders/HorizontalBlurShader */ \"(app-pages-browser)/./node_modules/three/examples/jsm/shaders/HorizontalBlurShader.js\");\n/* harmony import */ var three_examples_jsm_shaders_VerticalBlurShader__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! three/examples/jsm/shaders/VerticalBlurShader */ \"(app-pages-browser)/./node_modules/three/examples/jsm/shaders/VerticalBlurShader.js\");\n\n\n\n\n\n\n\n\n\n// shadow\n\n\nlet _useWebGPU = false;\nlet _pointer = new three__WEBPACK_IMPORTED_MODULE_0__.Vector2();\nlet _defaultCube;\nlet _version = {\n    major: 0,\n    minor: 1,\n    patch: 0,\n    get: ()=>\"Pallet v.\".concat(_version.major, \".\").concat(_version.minor, \".\").concat(_version.patch)\n};\nlet _product = {\n    name: \"Pallet\"\n};\nconsole.log(_version.get());\n// replace extension functions\nthree__WEBPACK_IMPORTED_MODULE_0__.BufferGeometry.prototype.computeBoundsTree = three_mesh_bvh__WEBPACK_IMPORTED_MODULE_1__.computeBoundsTree;\nthree__WEBPACK_IMPORTED_MODULE_0__.BufferGeometry.prototype.disposeBoundsTree = three_mesh_bvh__WEBPACK_IMPORTED_MODULE_1__.disposeBoundsTree;\nthree__WEBPACK_IMPORTED_MODULE_0__.Mesh.prototype.raycast = three_mesh_bvh__WEBPACK_IMPORTED_MODULE_1__.acceleratedRaycast;\nvar PowerPreference;\n(function(PowerPreference) {\n    PowerPreference[\"HighPerformance\"] = \"high-performance\";\n    PowerPreference[\"LowPower\"] = \"low-power\";\n    PowerPreference[\"Default\"] = \"default\";\n})(PowerPreference || (PowerPreference = {}));\nvar MouseEvent;\n(function(MouseEvent) {\n    MouseEvent[MouseEvent[\"Left\"] = 0] = \"Left\";\n    MouseEvent[MouseEvent[\"Wheel\"] = 1] = \"Wheel\";\n    MouseEvent[MouseEvent[\"Right\"] = 2] = \"Right\";\n})(MouseEvent || (MouseEvent = {}));\nfunction findParentByType(object, type) {\n    if (object.parent instanceof type) {\n        return object.parent; // 부모 요소가 해당 타입인 경우 반환\n    } else if (object.parent !== null) {\n        return findParentByType(object.parent, type); // 타입이 아닌 경우 부모 요소로 재귀 호출\n    } else {\n        return null; // 최상위 부모 요소에 도달할 때까지 타입을 찾지 못한 경우\n    }\n}\nclass Command {\n    constructor(){}\n}\nclass InteractionController {\n    drawHelper() {}\n    connectEvent() {}\n    getViewportPos(x, y) {\n        let target = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : undefined;\n        _pointer.x = x / window.innerWidth * 2 - 1;\n        _pointer.y = -(y / window.innerHeight) * 2 + 1;\n        if (target) target.copy(_pointer);\n        return _pointer;\n    }\n    constructor(option){\n        this.raycaster = new three__WEBPACK_IMPORTED_MODULE_0__.Raycaster();\n        this.raycaster.params.Line.threshold = 0;\n    }\n}\n// TODO : THREE.OrbitControls combine in this class or customize it.\n// the box selection has bug from key, mouse event when window focus changed\nclass DesktopIRC extends InteractionController {\n    drawGhost() {}\n    connectEvent() {\n        document.addEventListener(\"mousedown\", (event)=>{\n            this.cursorStart.set(event.clientX, event.clientY);\n            if (this.shiftPressed) {\n                _module.controller.enabled = false;\n                this.selectionHelper.enabled = true;\n                this.selectionHelper.element.classList.remove(\"disabled\");\n                this.selectionBox.startPoint.set(event.clientX / window.innerWidth * 2 - 1, -(event.clientY / window.innerHeight) * 2 + 1, 0.5);\n            } else this.selectionHelper.enabled = false;\n        });\n        // dragging handler\n        document.addEventListener(\"mousemove\", (event)=>{\n            if (this.shiftPressed) {\n                this.selectionBox.endPoint.set(event.clientX / window.innerWidth * 2 - 1, -(event.clientY / window.innerHeight) * 2 + 1, 0.5);\n            }\n        });\n        // button release handler\n        document.addEventListener(\"mouseup\", (event)=>{\n            this.cursorEnd.set(event.clientX, event.clientY);\n            const isCanvasEvent = event.target === Renderer.Canvas();\n            const isDragging = this.cursorStart.distanceTo(this.cursorEnd) > 0.01;\n            const eventStates = {\n                drag: isDragging,\n                canvasEvent: isCanvasEvent\n            };\n            _module.controller.enabled = true;\n            this.selectionHelper.element.classList.add(\"disabled\");\n            this.disableContextGUI();\n            if (this.shiftPressed) {\n                this.selectionBox.endPoint.set(event.clientX / window.innerWidth * 2 - 1, -(event.clientY / window.innerHeight) * 2 + 1, 0.5);\n                this.selectionBox.select();\n                const filteredSelection = this.selectionBox.collection.filter((object)=>{\n                    const isGizmo = findParentByType(object, three_examples_jsm_controls_TransformControls__WEBPACK_IMPORTED_MODULE_2__.TransformControlsGizmo);\n                    const isGizmoPlane = object.isTransformControlsPlane;\n                    const isGround = object.isGround;\n                    const isLine = object.isLine || object.isLineSegment;\n                    if (isGizmo || isGround || isLine || isGizmoPlane) return false;\n                    else return true;\n                });\n                console.log(filteredSelection);\n            } else {\n                switch(event.button){\n                    case 0:\n                        this.onLeftClick(this.cursorEnd, eventStates);\n                        break;\n                    case 2:\n                        this.onRightClick(this.cursorEnd, eventStates);\n                        break;\n                    case 1:\n                        this.onWheelClick(this.cursorEnd, eventStates);\n                        break;\n                }\n            }\n        });\n        document.addEventListener(\"keydown\", (event)=>{\n            switch(event.code){\n                case \"ControlLeft\":\n                    break;\n                case \"AltLeft\":\n                    break;\n                case \"Tab\":\n                    break;\n                case \"ShiftLeft\":\n                    this.shiftPressed = true;\n                    break;\n                case \"KeyQ\":\n                    console.log(this.controls.space);\n                    this.controls.setSpace(this.controls.space === \"local\" ? \"world\" : \"local\");\n                    break;\n                case \"KeyW\":\n                    this.controls.setMode(\"translate\");\n                    break;\n                case \"KeyE\":\n                    this.controls.setMode(\"rotate\");\n                    break;\n                case \"KeyR\":\n                    this.controls.setMode(\"scale\");\n            }\n        });\n        document.addEventListener(\"keyup\", (event)=>{\n            switch(event.code){\n                case \"ControlLeft\":\n                    break;\n                case \"AltLeft\":\n                    break;\n                case \"Tab\":\n                    break;\n                case \"ShiftLeft\":\n                    this.shiftPressed = false;\n                    break;\n            }\n        });\n    }\n    disconnectEvent(option) {}\n    onLeftClick(pointer, state) {\n        if (this.controls.axis || state.drag || !state.canvasEvent) return;\n        this.raycaster.setFromCamera(this.getViewportPos(pointer.x, pointer.y), _module.camera);\n        const hits = this.raycaster.intersectObject(_module.sceneGraph);\n        this.onIntersection(hits);\n    }\n    onRightClick(pointer, state) {\n        this.raycaster.setFromCamera(this.getViewportPos(pointer.x, pointer.y), _module.camera);\n        const hits = this.raycaster.intersectObject(_module.sceneGraph);\n        if (state.drag == false) this.onContext(hits, pointer);\n    }\n    onWheelClick(pointer, state) {}\n    onDragging(pointer) {}\n    onContext(hits, position) {\n        const hitMeshes = hits.filter((h)=>h.object.isMesh && !findParentByType(h.object, three_examples_jsm_controls_TransformControls__WEBPACK_IMPORTED_MODULE_2__.TransformControls));\n        if (hitMeshes.length > 0) {\n            console.log(hitMeshes);\n            //this.controls.enabled = false;\n            const group = findParentByType(hitMeshes[0].object, three__WEBPACK_IMPORTED_MODULE_0__.Group);\n            if (hitMeshes[0].object.isGround) {\n                this.enableContextGUI(position, \"add\");\n            } else {\n                this.enableContextGUI(position, \"property\");\n            }\n            if (group) {\n                this.context = group;\n            } else {\n                this.context = hitMeshes[0].object;\n            }\n            this.hitPoint.copy(hitMeshes[0].point);\n        } else {\n            this.context = null;\n            this.disableContextGUI();\n        }\n    }\n    onIntersection(hits) {\n        this.replaceButtonImage(undefined);\n        const hitMeshes = hits.filter((h)=>h.object.isMesh && !findParentByType(h.object, three_examples_jsm_controls_TransformControls__WEBPACK_IMPORTED_MODULE_2__.TransformControls));\n        console.log(hitMeshes);\n        if (hitMeshes.length > 0 && !hitMeshes[0].object.isGround) {\n            this.controls.enabled = true;\n            const group = findParentByType(hitMeshes[0].object, three__WEBPACK_IMPORTED_MODULE_0__.Group);\n            this.targetMaterial = null;\n            if (group) {\n                this.controls.attach(group);\n                this.context = group;\n            } else {\n                const pickedObject = hitMeshes[0].object;\n                this.controls.attach(pickedObject);\n                this.context = hitMeshes[0].object;\n                this.replaceButtonImage(undefined);\n                if (pickedObject.isMesh && pickedObject.material) {\n                    if (pickedObject.material.map) {\n                        const imageToDataURL = (function(img) {\n                            const imgData = three_src_extras_ImageUtils__WEBPACK_IMPORTED_MODULE_3__.ImageUtils.getDataURL(img);\n                            console.log(this);\n                            this.replaceButtonImage(imgData);\n                        }).bind(this)(pickedObject.material.map.image);\n                    }\n                }\n            }\n        } else {\n            this.controls.detach();\n            this.controls.enabled = false;\n            this.controls.setMode(\"translate\");\n            this.context = null;\n        }\n    }\n    createControls(camera, canvas) {\n        this.controls = new three_examples_jsm_controls_TransformControls__WEBPACK_IMPORTED_MODULE_2__.TransformControls(camera, canvas);\n        return this.controls;\n    }\n    enableContextGUI(position, mode) {\n        this.contextGUI.style.visibility = \"visible\";\n        if (position) {\n            this.contextGUI.style.left = \"\".concat(position.x, \"px\");\n            this.contextGUI.style.top = \"\".concat(position.y, \"px\");\n        }\n        _module.contextGUI.children.forEach((c)=>{\n            if (c[\"_title\"].toLowerCase() == mode) {\n                c.show();\n            } else {\n                c.hide();\n            }\n        });\n    }\n    disableContextGUI() {\n        this.contextGUI.style.visibility = \"hidden\";\n    }\n    replaceButtonImage(source) {\n        //const buttonOrigin = imageButton.domElement.children[0].children[0];\n        //button.style.backgroundColor = '#ff0000';\n        //button.style.backgroundImage = `url(/images/temp/apple.jpeg)`;\n        if (this.textureButton && this.textureButton.domElement) {\n            // TODO : GUI 참조 얻어오는 방식을 하드코딩 하지 않게 바꾸기\n            const target = this.textureButton.domElement.children[0].children.length > 1 ? this.textureButton.domElement.children[0].children[1] : this.textureButton.domElement.children[0].children[0];\n            if (target) {\n                target.style.backgroundImage = 'url(\"'.concat(source, '\")');\n                target.style.backgroundSize = \"cover\"; // 'cover','contain','initial','inherit'\n                target.style.backgroundRepeat = \"no-repeat\";\n                target.style.backgroundPosition = \"center\";\n                target.style.width = \"100px\";\n                target.style.height = \"100px\";\n                target.style.marginLeft = \"auto\";\n                target.textContent = \"\";\n            }\n        }\n    }\n    replaceTexture(texture) {\n        if (this.targetMaterial) {\n            this.targetMaterial.map = texture;\n            this.targetMaterial.needsUpdate = true;\n        } else if (this.context) {\n            this.context.material.map = texture;\n            this.context.material.needsUpdate = true;\n        }\n    }\n    constructor(){\n        super({});\n        this.hitPoint = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n        this.selectionBox = new three_examples_jsm_interactive_SelectionBox__WEBPACK_IMPORTED_MODULE_4__.SelectionBox();\n        this.selectionHelper = new three_examples_jsm_interactive_SelectionHelper__WEBPACK_IMPORTED_MODULE_5__.SelectionHelper(Renderer.Get(), \"selectBox\");\n        this.selectionHelper.element.classList.add(\"disabled\");\n        this.shiftPressed = false;\n        this.materialFolder = undefined;\n        this.textureButton = undefined;\n        this.targetMaterial = null;\n        this.cursorStart = new three__WEBPACK_IMPORTED_MODULE_0__.Vector2();\n        this.cursorEnd = new three__WEBPACK_IMPORTED_MODULE_0__.Vector2();\n    }\n}\nclass VirtualRealityIRC extends InteractionController {\n    constructor(){\n        super({});\n    }\n}\nclass CommandQueue {\n    isEmpty() {\n        return this.array.length > 0;\n    }\n    update() {\n        if (this.isEmpty()) {}\n    }\n    constructor(){\n        this.array = new Array();\n    }\n}\nclass Scene {\n    defaultScene() {}\n    constructor(){\n        this.root = new three__WEBPACK_IMPORTED_MODULE_0__.Scene();\n        this.animationObjects = new three__WEBPACK_IMPORTED_MODULE_0__.Group();\n    }\n}\nclass Renderer {\n    static Get() {\n        if (!Renderer.renderer) {\n            Renderer.Create({});\n        }\n        return Renderer.renderer;\n    }\n    static Canvas() {\n        if (Renderer.renderer) {\n            return Renderer.renderer.domElement;\n        }\n        return null;\n    }\n    static Create(opt) {\n        Renderer.renderer = new three__WEBPACK_IMPORTED_MODULE_0__.WebGLRenderer(opt);\n        return Renderer.renderer;\n    }\n    static AnimationLoop(func) {}\n}\nRenderer.composer = null;\nRenderer.renderer = null;\nRenderer.canvas = null;\nRenderer.option = {\n    alpha: true\n};\nclass PalletElement extends HTMLElement {\n    constructor(){\n        super();\n    }\n}\nclass Utility {\n    static FileSelector() {\n        let multiple = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;\n        const f = document.createElement(\"input\");\n        f.setAttribute(\"type\", \"file\");\n        f.setAttribute(\"multiple\", \"\".concat(multiple));\n        //f.setAttribute( 'accept', accept );\n        //f.addEventListener('change', ( event ) => callback( f ) );\n        f.click();\n        return f;\n    }\n    static FileExtension(path) {}\n    constructor(){}\n}\nclass PalletEngine extends PalletElement {\n    createGUI() {\n        // main menu\n        const system = this.screenGUI.addFolder(\"System\");\n        const systemProp = {\n            Add: function() {},\n            Import: function() {\n                const f = Utility.FileSelector();\n                f.addEventListener(\"change\", ()=>{\n                    // now only use glb loader\n                    const url = URL.createObjectURL(f.files[0]);\n                    _module.gltfLoader.load(url, (gltf)=>{\n                        _module.sceneGraph.add(gltf.scene);\n                    });\n                });\n            }\n        };\n        system.add(systemProp, \"Import\");\n        //transform\n        const transformFolder = this.screenGUI.addFolder(\"Transform\");\n        transformFolder.close();\n        const positionFolder = transformFolder.addFolder(\"Position\");\n        positionFolder.close();\n        const posProp = {\n            X: 0,\n            Y: 0,\n            Z: 0\n        };\n        const updatePosition = (value)=>{\n            if (localIRC.context) {\n                localIRC.context.position.set(posProp.X, posProp.Y, posProp.Z);\n            }\n        };\n        positionFolder.add(posProp, \"X\").listen().onChange(updatePosition);\n        positionFolder.add(posProp, \"Y\").listen().onChange(updatePosition);\n        positionFolder.add(posProp, \"Z\").listen().onChange(updatePosition);\n        const eulerFolder = transformFolder.addFolder(\"Rotation\");\n        eulerFolder.close();\n        const eulerProp = {\n            X: 0,\n            Y: 0,\n            Z: 0\n        };\n        const updateEuler = (value)=>{\n            if (localIRC.context) {\n                localIRC.context.rotation.set(eulerProp.X, eulerProp.Y, eulerProp.Z);\n            }\n        };\n        eulerFolder.add(eulerProp, \"X\").listen().onChange(updateEuler);\n        eulerFolder.add(eulerProp, \"Y\").listen().onChange(updateEuler);\n        eulerFolder.add(eulerProp, \"Z\").listen().onChange(updateEuler);\n        const scaleFolder = transformFolder.addFolder(\"Scale\");\n        scaleFolder.close();\n        const scaleProp = {\n            X: 1,\n            Y: 1,\n            Z: 1\n        };\n        const updateScale = (value)=>{\n            if (localIRC.context) {\n                localIRC.context.scale.set(scaleProp.X, scaleProp.Y, scaleProp.Z);\n            }\n        };\n        scaleFolder.add(scaleProp, \"X\").listen().onChange(updateScale);\n        scaleFolder.add(scaleProp, \"Y\").listen().onChange(updateScale);\n        scaleFolder.add(scaleProp, \"Z\").listen().onChange(updateScale);\n        // material\n        const materialFolder = this.screenGUI.addFolder(\"Material\");\n        const materialProp = {\n            Color: 0xffffff,\n            Map: ()=>{\n                const input = document.createElement(\"input\");\n                input.type = \"file\";\n                input.style.display = \"none\";\n                input.onchange = (event)=>{\n                    event.preventDefault();\n                    event.stopPropagation();\n                    const reader = new FileReader();\n                    reader.onload = (event)=>{\n                        const loader = new three__WEBPACK_IMPORTED_MODULE_0__.TextureLoader();\n                        loader.load(event.target.result, (texture)=>{\n                            console.log(localIRC.context);\n                            localIRC.replaceTexture(texture);\n                        //target.material.map = texture;\n                        });\n                        localIRC.replaceButtonImage(event.target.result);\n                    };\n                    reader.readAsDataURL(input.files[0]);\n                };\n                input.click();\n            },\n            NormalMap: ()=>{},\n            SpecularMap: ()=>{}\n        };\n        const updateColor = (value)=>{\n            if (localIRC.targetMaterial) {\n                localIRC.targetMaterial.color.setHex(value);\n            } else if (localIRC.context && localIRC.context.isMesh && localIRC.context.material.color) {\n                localIRC.context.material.color.setHex(value);\n            }\n        };\n        materialFolder.addColor(materialProp, \"Color\").listen().onChange(updateColor);\n        const textureButton = materialFolder.add(materialProp, \"Map\");\n        const localIRC = this.irc;\n        localIRC.textureButton = textureButton;\n        localIRC.replaceButtonImage(undefined);\n        const target = localIRC.textureButton.domElement.children[0].children[0];\n        const div = document.createElement(\"div\");\n        div.textContent = \"Map\";\n        target.parentElement.insertBefore(div, target);\n        // mesh information\n        const meshFolder = this.screenGUI.addFolder(\"Meshes\");\n        // etc properties\n        const etcFolder = this.screenGUI.addFolder(\"Etc\");\n        const etcProp = {\n            Animation: true,\n            Loop: true,\n            Reset: ()=>{\n                localIRC.context.userData.action.time = 0;\n            },\n            Updator: true\n        };\n        const animPause = etcFolder.add(etcProp, \"Animation\").listen().onChange((value)=>{\n            if (value) localIRC.context.userData.action.paused = false;\n            else localIRC.context.userData.action.paused = true;\n        });\n        const animLoop = etcFolder.add(etcProp, \"Loop\").listen().onChange((value)=>{\n            if (value) {\n                localIRC.context.userData.action.setLoop(three__WEBPACK_IMPORTED_MODULE_0__.LoopRepeat, Infinity);\n                localIRC.context.userData.action.reset();\n            } else localIRC.context.userData.action.setLoop(three__WEBPACK_IMPORTED_MODULE_0__.LoopOnce);\n        });\n        const resetButton = etcFolder.add(etcProp, \"Reset\");\n        const updateController = etcFolder.add(etcProp, \"Updator\").listen().onChange((value)=>{\n            localIRC.context.userData.updator.enabled = value;\n        });\n        let prevUUID = \"\";\n        const clearFolder = (folder)=>{\n            const length = folder.controllers.length;\n            const temp = folder.controllers;\n            folder.children = [];\n            folder.controllers = [];\n            for(let i = 0; i < length; ++i){\n                temp[i].hide();\n                temp[i].destroy();\n            }\n        };\n        // ui update function\n        this.addUpdator((delta)=>{\n            const obj = localIRC.context;\n            if (obj) {\n                posProp.X = obj.position.x;\n                posProp.Y = obj.position.y;\n                posProp.Z = obj.position.z;\n                eulerProp.X = obj.rotation.x;\n                eulerProp.Y = obj.rotation.y;\n                eulerProp.Z = obj.rotation.z;\n                scaleProp.X = obj.scale.x;\n                scaleProp.Y = obj.scale.y;\n                scaleProp.Z = obj.scale.z;\n                if (obj.userData.mixer) {\n                    animPause.enable();\n                    animLoop.enable();\n                    resetButton.enable();\n                    if (obj.userData.action.paused) {\n                        animLoop.setValue(obj.userData.action.paused === three__WEBPACK_IMPORTED_MODULE_0__.LoopRepeat);\n                    }\n                    if (obj.userData.action.loop === three__WEBPACK_IMPORTED_MODULE_0__.LoopRepeat) animLoop.setValue(true);\n                    else animLoop.setValue(false);\n                } else {\n                    animPause.disable();\n                    animLoop.disable();\n                    resetButton.disable();\n                }\n                if (obj.userData.updator) {\n                    updateController.enable();\n                    updateController.setValue(obj.userData.updator.enabled);\n                } else updateController.disable();\n                if (obj.isMesh && obj.material) {\n                    if (obj.material.color) materialProp.Color = obj.material.color.getHex();\n                    else materialProp.Color = 0xffffff;\n                }\n                // update mesh\n                if (obj.uuid === prevUUID) {\n                // do not update \n                } else {\n                    // update local uuid\n                    prevUUID = obj.uuid;\n                    const meshProps = {};\n                    clearFolder(meshFolder);\n                    if (obj.isGroup) {\n                        obj.traverse((child)=>{\n                            if (child.isMesh) {\n                                meshProps[child.name] = ()=>{\n                                    if (child.material.map) {\n                                        const imageToDataURL = (function(img) {\n                                            const imgData = three_src_extras_ImageUtils__WEBPACK_IMPORTED_MODULE_3__.ImageUtils.getDataURL(img);\n                                            localIRC.targetMaterial = child.material;\n                                            materialProp.Color = child.material.color.getHexString();\n                                            localIRC.replaceButtonImage(imgData);\n                                        }).bind(this)(child.material.map.image);\n                                    }\n                                };\n                                meshFolder.add(meshProps, \"\".concat(child.name));\n                            }\n                        });\n                    }\n                }\n            } else {\n                // set default\n                posProp.X = 0;\n                posProp.Y = 0;\n                posProp.Z = 0;\n                eulerProp.X = 0;\n                eulerProp.Y = 0;\n                eulerProp.Z = 0;\n                scaleProp.X = 1;\n                scaleProp.Y = 1;\n                scaleProp.Z = 1;\n                materialProp.Color = 0xffffff;\n                clearFolder(meshFolder);\n                animPause.disable();\n                animLoop.disable();\n                resetButton.disable();\n                updateController.disable();\n                prevUUID = \"\";\n            }\n        });\n        // const shape = this.screenGUI.addFolder( \"Shapes\" );\n        // const shapeProp = {\n        // }\n        // context menu\n        // assign custom style\n        this.contextGUIOuter.style.cssText = \"position: absolute; left: 0px; top: 0px; visibility: hidden;\";\n        const animationProps = {\n            frame: 0\n        };\n        const propertyFolder = this.contextGUI.addFolder(\"Property\");\n        propertyFolder.hide();\n        const creationParam = {\n            Box: ()=>{\n                localIRC.disableContextGUI(); // refactoring\n                const geometry = new three__WEBPACK_IMPORTED_MODULE_0__.BoxGeometry(1, 1, 1);\n                const material = new three__WEBPACK_IMPORTED_MODULE_0__.MeshBasicMaterial();\n                const box = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(geometry, material);\n                box.position.copy(localIRC.hitPoint);\n                this.sceneGraph.add(box);\n            },\n            Sphere: ()=>{\n                localIRC.disableContextGUI(); // refactoring\n                const geometry = new three__WEBPACK_IMPORTED_MODULE_0__.SphereGeometry(0.8, 30, 15);\n                const material = new three__WEBPACK_IMPORTED_MODULE_0__.MeshBasicMaterial();\n                const sphere = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(geometry, material);\n                sphere.position.copy(localIRC.hitPoint);\n                this.sceneGraph.add(sphere);\n            },\n            Plane: ()=>{\n                localIRC.disableContextGUI(); // refactoring\n                const geometry = new three__WEBPACK_IMPORTED_MODULE_0__.PlaneGeometry(1, 1, 1);\n                const material = new three__WEBPACK_IMPORTED_MODULE_0__.MeshBasicMaterial();\n                const plane = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(geometry, material);\n                plane.position.copy(localIRC.hitPoint);\n                this.sceneGraph.add(plane);\n            },\n            GLB: ()=>{\n                localIRC.disableContextGUI(); // refactoring\n            }\n        };\n        const create = this.contextGUI.addFolder(\"Add\");\n        create.add(creationParam, \"Box\");\n        create.add(creationParam, \"Sphere\");\n        create.add(creationParam, \"Plane\");\n        create.add(creationParam, \"GLB\");\n        console.log(this.contextGUI);\n    }\n    createScene() {\n        const gridHelper = new three__WEBPACK_IMPORTED_MODULE_0__.GridHelper(50, 50, 0x7c7c7c, 0x5f5f5f);\n        const gridPlane = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(new three__WEBPACK_IMPORTED_MODULE_0__.PlaneGeometry(50, 50, 10, 10), new three__WEBPACK_IMPORTED_MODULE_0__.MeshBasicMaterial({\n            transparent: true,\n            opacity: 0.1,\n            color: 0x576076\n        }));\n        gridPlane.name = \"GridPlane\";\n        gridPlane.isGround = true;\n        gridPlane.castShadow = true;\n        gridPlane.rotation.set(-1.57, 0, 0);\n        this.camera.position.set(0, 5, 5);\n        this.sceneGraph.add(gridHelper);\n        this.sceneGraph.add(gridPlane);\n        this.sceneGraph.userData.gridPlane = gridPlane;\n        this.sceneGraph.userData.gridHelper = gridHelper;\n        this.directionalLight = new three__WEBPACK_IMPORTED_MODULE_0__.DirectionalLight(0xffffff, 5);\n        this.directionalLight.shadow.camera.right = 25;\n        this.directionalLight.shadow.camera.left = -25;\n        this.directionalLight.shadow.camera.far = 100;\n        this.directionalLight.shadow.camera.near = 0;\n        this.directionalLight.shadow.camera;\n        this.ambientLight = new three__WEBPACK_IMPORTED_MODULE_0__.AmbientLight(0xfff8e8);\n        this.sceneGraph.add(this.directionalLight);\n        this.sceneGraph.add(this.ambientLight);\n        this.directionalLight.castShadow = true;\n        //create temporal object\n        const cube = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(new three__WEBPACK_IMPORTED_MODULE_0__.BoxGeometry(1, 1, 1), new three__WEBPACK_IMPORTED_MODULE_0__.MeshStandardMaterial({\n            color: 0xffdfba\n        }));\n        this.sceneGraph.add(cube);\n        _defaultCube = cube;\n        _defaultCube.receiveShadow = true;\n        _defaultCube.castShadow = true;\n        _defaultCube.userData.updator = this.addUpdator((delta)=>{\n            cube.rotation.x += 0.01;\n            cube.rotation.y += 0.01;\n        });\n        const cube1 = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(new three__WEBPACK_IMPORTED_MODULE_0__.BoxGeometry(1, 1, 1), new three__WEBPACK_IMPORTED_MODULE_0__.MeshStandardMaterial({\n            color: 0xffdfba\n        }));\n        this.sceneGraph.add(cube1);\n        cube1.receiveShadow = true;\n        cube1.castShadow = true;\n        cube1.position.set(1, 1, 0.5);\n        cube1.userData.updator = this.addUpdator((delta)=>{\n            cube1.rotation.x += 0.01;\n            cube1.rotation.z += 0.01;\n        });\n    }\n    clearScene() {}\n    createEnvironment() {}\n    loadGLTF(url, onload) {\n        this.gltfLoader.load(url, (gltf)=>{\n            onload(gltf);\n            this.sceneGraph.add(gltf.scene);\n        });\n    }\n    update(dt) {\n        this.updateFunctions.map((updator)=>{\n            if (updator.enabled) updator.func(dt);\n        });\n        this.commandQueue.update();\n        this.controller.update();\n        // shadow routine begin\n        // remove the background\n        const initialBackground = this.sceneGraph.background;\n        this.sceneGraph.background = null;\n        // force the depthMaterial to everything\n        this.shadowCameraHelper.visible = false;\n        this.sceneGraph.userData.gridPlane.visible = false;\n        this.sceneGraph.userData.gridHelper.visible = false;\n        this.sceneGraph.overrideMaterial = this.depthMaterial;\n        // set renderer clear alpha\n        const initialClearAlpha = Renderer.Get().getClearAlpha();\n        Renderer.Get().setClearAlpha(0);\n        // render to the render target to get the depths\n        Renderer.Get().setRenderTarget(this.renderTarget);\n        Renderer.Get().render(this.sceneGraph, this.shadowCamera);\n        // and reset the override material\n        this.sceneGraph.overrideMaterial = null;\n        this.shadowCameraHelper.visible = true;\n        this.sceneGraph.userData.gridPlane.visible = true;\n        this.sceneGraph.userData.gridHelper.visible = true;\n        const blur = 0.2;\n        this.blurShadow(this.shaderState.shadow.blur);\n        // a second pass to reduce the artifacts\n        // (0.4 is the minimum blur amout so that the artifacts are gone)\n        this.blurShadow(this.shaderState.shadow.blur * 0.4);\n        // shadow routine end\n        // reset and render the normal scene\n        Renderer.Get().setRenderTarget(null);\n        Renderer.Get().setClearAlpha(initialClearAlpha);\n        this.sceneGraph.background = initialBackground;\n        Renderer.Get().render(this.sceneGraph, this.camera);\n    }\n    addUpdator(func) {\n        let enabled = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;\n        let updator = {\n            func: func,\n            enabled: enabled\n        };\n        this.updateFunctions.push(updator);\n        return updator;\n    }\n    appendCommand() {}\n    // renderTarget --> blurPlane (horizontalBlur) --> renderTargetBlur --> blurPlane (verticalBlur) --> renderTarget\n    blurShadow(amount) {\n        this.shadowBlurPlane.visible = true;\n        // blur horizontally and draw in the renderTargetBlur\n        this.shadowBlurPlane.material = this.horizontalBlurMaterial;\n        this.shadowBlurPlane.material.uniforms.tDiffuse.value = this.renderTarget.texture;\n        this.horizontalBlurMaterial.uniforms.h.value = amount * 1 / 256;\n        Renderer.Get().setRenderTarget(this.renderTargetBlur);\n        Renderer.Get().render(this.shadowBlurPlane, this.shadowCamera);\n        // blur vertically and draw in the main renderTarget\n        this.shadowBlurPlane.material = this.verticalBlurMaterial;\n        this.shadowBlurPlane.material.uniforms.tDiffuse.value = this.renderTargetBlur.texture;\n        this.verticalBlurMaterial.uniforms.v.value = amount * 1 / 256;\n        Renderer.Get().setRenderTarget(this.renderTarget);\n        Renderer.Get().render(this.shadowBlurPlane, this.shadowCamera);\n        this.shadowBlurPlane.visible = false;\n    }\n    constructor(canvas){\n        super();\n        this.verticalBlurMaterial = three__WEBPACK_IMPORTED_MODULE_0__.ShaderMaterial;\n        this.sceneGraph = new three__WEBPACK_IMPORTED_MODULE_0__.Scene();\n        this.camera = new three__WEBPACK_IMPORTED_MODULE_0__.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n        this.gltfLoader = new three_examples_jsm_loaders_GLTFLoader__WEBPACK_IMPORTED_MODULE_6__.GLTFLoader();\n        this.clock = new three__WEBPACK_IMPORTED_MODULE_0__.Clock(); // for debugging, optimization\n        this.controller = new three_examples_jsm_controls_OrbitControls__WEBPACK_IMPORTED_MODULE_7__.OrbitControls(this.camera, canvas); // now use default camera controller\n        this.controller.enableDamping = true; // smooth move to camera\n        this.controller.dampingFactor = 0.1;\n        this.updateFunctions = new Array(); // \n        this.commandQueue = new CommandQueue(); // for customize events\n        // create renderer, IRC selectionHelper initialize Issue\n        const renderer = Renderer.Create({\n            antialias: true,\n            canvas: canvas\n        });\n        renderer.setSize(window.innerWidth, window.innerHeight);\n        renderer.setClearColor(0x3c3c3c);\n        //renderer.shadowMap.enabled = true;\n        //renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n        renderer.setAnimationLoop(()=>{\n            const dt = this.clock.getDelta();\n            this.update(dt);\n        });\n        window.addEventListener(\"resize\", (event)=>{\n            this.camera.aspect = window.innerWidth / window.innerHeight;\n            this.camera.updateProjectionMatrix();\n            renderer.setSize(window.innerWidth, window.innerHeight);\n        });\n        // interaction setting\n        this.irc = new DesktopIRC();\n        this.irc.connectEvent();\n        // user interface\n        this.screenGUI = new lil_gui__WEBPACK_IMPORTED_MODULE_8__[\"default\"]({\n            title: \"Properties\"\n        });\n        this.screenGUI.close();\n        this.contextGUIOuter = document.createElement(\"div\");\n        this.contextGUIOuter.addEventListener(\"mouseup\", (event)=>event.stopPropagation()); // prevent pass event to document\n        // below interface refactoring to generic\n        // cast desktop interaction interface\n        const desktopIRC = this.irc;\n        // link user interface to interaction\n        desktopIRC.contextGUI = this.contextGUIOuter;\n        document.body.appendChild(this.contextGUIOuter);\n        // context menu setting\n        this.contextGUI = new lil_gui__WEBPACK_IMPORTED_MODULE_8__[\"default\"]({\n            container: this.contextGUIOuter,\n            title: \"Context\"\n        });\n        // create gizmo instance\n        const transformer = desktopIRC.createControls(this.camera, canvas);\n        this.sceneGraph.add(transformer);\n        // prevent viewport dragging during gizmo interaction\n        transformer.addEventListener(\"dragging-changed\", (event)=>{\n            this.controller.enabled = !event.value;\n        });\n        // selection box setting\n        desktopIRC.selectionBox.camera = this.camera;\n        desktopIRC.selectionBox.scene = this.sceneGraph;\n        window.addEventListener(\"contextmenu\", (event)=>event.preventDefault());\n        // shadow \n        this.shaderState = {\n            shadow: {\n                blur: 0.2,\n                darkness: 5,\n                opacity: 1\n            },\n            plane: {\n                color: \"#ffffff\",\n                opacity: 1\n            },\n            showWireframe: false\n        };\n        this.shadowGroup = new three__WEBPACK_IMPORTED_MODULE_0__.Group();\n        this.sceneGraph.add(this.shadowGroup);\n        this.renderTarget = new three__WEBPACK_IMPORTED_MODULE_0__.WebGLRenderTarget(1024, 1024);\n        this.renderTarget.generateMipmaps = false;\n        this.renderTargetBlur = new three__WEBPACK_IMPORTED_MODULE_0__.WebGLRenderTarget(1024, 1024);\n        this.renderTargetBlur.generateMipmaps = false;\n        const planeGeometry = new three__WEBPACK_IMPORTED_MODULE_0__.PlaneGeometry(50, 50).rotateX(Math.PI / 2);\n        const planeMaterial = new three__WEBPACK_IMPORTED_MODULE_0__.MeshBasicMaterial({\n            map: this.renderTarget.texture,\n            opacity: 1,\n            transparent: true,\n            depthWrite: false\n        });\n        this.shadowPlane = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(planeGeometry, planeMaterial);\n        this.shadowPlane.scale.y = -1;\n        this.shadowPlane.position.set(0, 0.1, 0);\n        this.shadowPlane.renderOrder = 1;\n        this.shadowGroup.add(this.shadowPlane);\n        this.shadowBlurPlane = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(planeGeometry);\n        this.shadowBlurPlane.visible = false;\n        this.shadowGroup.add(this.shadowBlurPlane);\n        this.shadowCamera = new three__WEBPACK_IMPORTED_MODULE_0__.OrthographicCamera(-50 / 2, 50 / 2, 50 / 2, -50 / 2, 0, 10);\n        this.shadowCamera.rotation.x = Math.PI / 2;\n        this.shadowGroup.add(this.shadowCamera);\n        this.shadowCameraHelper = new three__WEBPACK_IMPORTED_MODULE_0__.CameraHelper(this.shadowCamera);\n        this.shadowGroup.add(this.shadowCameraHelper);\n        this.depthMaterial = new three__WEBPACK_IMPORTED_MODULE_0__.MeshDepthMaterial();\n        this.depthMaterial.userData.darkness = {\n            value: this.shaderState.shadow.darkness\n        };\n        this.depthMaterial.onBeforeCompile = (function(shader) {\n            shader.uniforms.darkness = this.depthMaterial.userData.darkness;\n            shader.fragmentShader = /*glsl*/ \"\\n                uniform float darkness;\\n                \".concat(shader.fragmentShader.replace(\"gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\", \"gl_FragColor = vec4( vec3( 0.0 ), ( 1.0 - fragCoordZ ) * darkness );\"), \"\\n            \");\n        }).bind(this);\n        this.depthMaterial.depthTest = false;\n        this.depthMaterial.depthWrite = false;\n        this.horizontalBlurMaterial = new three__WEBPACK_IMPORTED_MODULE_0__.ShaderMaterial(three_examples_jsm_shaders_HorizontalBlurShader__WEBPACK_IMPORTED_MODULE_9__.HorizontalBlurShader);\n        this.horizontalBlurMaterial.depthTest = false;\n        this.verticalBlurMaterial = new three__WEBPACK_IMPORTED_MODULE_0__.ShaderMaterial(three_examples_jsm_shaders_VerticalBlurShader__WEBPACK_IMPORTED_MODULE_10__.VerticalBlurShader);\n        this.verticalBlurMaterial.depthTest = false;\n        this.createScene();\n        this.createGUI();\n    }\n}\ncustomElements.define(\"pallet-element\", PalletElement);\ncustomElements.define(\"pallet-engine\", PalletEngine);\nlet canvasElements = document.getElementsByTagName(\"canvas\");\nlet _module;\nif (canvasElements.length > 0) {\n    _module = new PalletEngine(canvasElements[0]);\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./PalletEngine/module.ts\n"));

/***/ })

});