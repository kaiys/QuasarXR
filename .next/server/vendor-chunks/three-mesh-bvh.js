"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/three-mesh-bvh";
exports.ids = ["vendor-chunks/three-mesh-bvh"];
exports.modules = {

/***/ "(ssr)/./node_modules/three-mesh-bvh/src/core/Constants.js":
/*!***********************************************************!*\
  !*** ./node_modules/three-mesh-bvh/src/core/Constants.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AVERAGE: () => (/* binding */ AVERAGE),\n/* harmony export */   BYTES_PER_NODE: () => (/* binding */ BYTES_PER_NODE),\n/* harmony export */   CENTER: () => (/* binding */ CENTER),\n/* harmony export */   CONTAINED: () => (/* binding */ CONTAINED),\n/* harmony export */   FLOAT32_EPSILON: () => (/* binding */ FLOAT32_EPSILON),\n/* harmony export */   INTERSECTED: () => (/* binding */ INTERSECTED),\n/* harmony export */   IS_LEAFNODE_FLAG: () => (/* binding */ IS_LEAFNODE_FLAG),\n/* harmony export */   NOT_INTERSECTED: () => (/* binding */ NOT_INTERSECTED),\n/* harmony export */   SAH: () => (/* binding */ SAH),\n/* harmony export */   SKIP_GENERATION: () => (/* binding */ SKIP_GENERATION),\n/* harmony export */   TRAVERSAL_COST: () => (/* binding */ TRAVERSAL_COST),\n/* harmony export */   TRIANGLE_INTERSECT_COST: () => (/* binding */ TRIANGLE_INTERSECT_COST)\n/* harmony export */ });\n// Split strategy constants\nconst CENTER = 0;\nconst AVERAGE = 1;\nconst SAH = 2;\n// Traversal constants\nconst NOT_INTERSECTED = 0;\nconst INTERSECTED = 1;\nconst CONTAINED = 2;\n// SAH cost constants\n// TODO: hone these costs more. The relative difference between them should be the\n// difference in measured time to perform a triangle intersection vs traversing\n// bounds.\nconst TRIANGLE_INTERSECT_COST = 1.25;\nconst TRAVERSAL_COST = 1;\n// Build constants\nconst BYTES_PER_NODE = 6 * 4 + 4 + 4;\nconst IS_LEAFNODE_FLAG = 0xFFFF;\n// EPSILON for computing floating point error during build\n// https://en.wikipedia.org/wiki/Machine_epsilon#Values_for_standard_hardware_floating_point_arithmetics\nconst FLOAT32_EPSILON = Math.pow(2, -24);\nconst SKIP_GENERATION = Symbol(\"SKIP_GENERATION\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdGhyZWUtbWVzaC1idmgvc3JjL2NvcmUvQ29uc3RhbnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFBLDJCQUEyQjtBQUNwQixNQUFNQSxTQUFTLEVBQUU7QUFDakIsTUFBTUMsVUFBVSxFQUFFO0FBQ2xCLE1BQU1DLE1BQU0sRUFBRTtBQUVyQixzQkFBc0I7QUFDZixNQUFNQyxrQkFBa0IsRUFBRTtBQUMxQixNQUFNQyxjQUFjLEVBQUU7QUFDdEIsTUFBTUMsWUFBWSxFQUFFO0FBRTNCLHFCQUFxQjtBQUNyQixrRkFBa0Y7QUFDbEYsK0VBQStFO0FBQy9FLFVBQVU7QUFDSCxNQUFNQywwQkFBMEIsS0FBSztBQUNyQyxNQUFNQyxpQkFBaUIsRUFBRTtBQUdoQyxrQkFBa0I7QUFDWCxNQUFNQyxpQkFBaUIsSUFBSSxJQUFJLElBQUksRUFBRTtBQUNyQyxNQUFNQyxtQkFBbUIsT0FBTztBQUV2QywwREFBMEQ7QUFDMUQsd0dBQXdHO0FBQ2pHLE1BQU1DLGtCQUFrQkMsS0FBS0MsR0FBRyxDQUFFLEdBQUcsQ0FBRSxJQUFLO0FBRTVDLE1BQU1DLGtCQUFrQkMsT0FBUSxtQkFBb0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdGhyZWUtbWVzaC1idmgvc3JjL2NvcmUvQ29uc3RhbnRzLmpzPzg2MTIiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gU3BsaXQgc3RyYXRlZ3kgY29uc3RhbnRzXG5leHBvcnQgY29uc3QgQ0VOVEVSID0gMDtcbmV4cG9ydCBjb25zdCBBVkVSQUdFID0gMTtcbmV4cG9ydCBjb25zdCBTQUggPSAyO1xuXG4vLyBUcmF2ZXJzYWwgY29uc3RhbnRzXG5leHBvcnQgY29uc3QgTk9UX0lOVEVSU0VDVEVEID0gMDtcbmV4cG9ydCBjb25zdCBJTlRFUlNFQ1RFRCA9IDE7XG5leHBvcnQgY29uc3QgQ09OVEFJTkVEID0gMjtcblxuLy8gU0FIIGNvc3QgY29uc3RhbnRzXG4vLyBUT0RPOiBob25lIHRoZXNlIGNvc3RzIG1vcmUuIFRoZSByZWxhdGl2ZSBkaWZmZXJlbmNlIGJldHdlZW4gdGhlbSBzaG91bGQgYmUgdGhlXG4vLyBkaWZmZXJlbmNlIGluIG1lYXN1cmVkIHRpbWUgdG8gcGVyZm9ybSBhIHRyaWFuZ2xlIGludGVyc2VjdGlvbiB2cyB0cmF2ZXJzaW5nXG4vLyBib3VuZHMuXG5leHBvcnQgY29uc3QgVFJJQU5HTEVfSU5URVJTRUNUX0NPU1QgPSAxLjI1O1xuZXhwb3J0IGNvbnN0IFRSQVZFUlNBTF9DT1NUID0gMTtcblxuXG4vLyBCdWlsZCBjb25zdGFudHNcbmV4cG9ydCBjb25zdCBCWVRFU19QRVJfTk9ERSA9IDYgKiA0ICsgNCArIDQ7XG5leHBvcnQgY29uc3QgSVNfTEVBRk5PREVfRkxBRyA9IDB4RkZGRjtcblxuLy8gRVBTSUxPTiBmb3IgY29tcHV0aW5nIGZsb2F0aW5nIHBvaW50IGVycm9yIGR1cmluZyBidWlsZFxuLy8gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTWFjaGluZV9lcHNpbG9uI1ZhbHVlc19mb3Jfc3RhbmRhcmRfaGFyZHdhcmVfZmxvYXRpbmdfcG9pbnRfYXJpdGhtZXRpY3NcbmV4cG9ydCBjb25zdCBGTE9BVDMyX0VQU0lMT04gPSBNYXRoLnBvdyggMiwgLSAyNCApO1xuXG5leHBvcnQgY29uc3QgU0tJUF9HRU5FUkFUSU9OID0gU3ltYm9sKCAnU0tJUF9HRU5FUkFUSU9OJyApO1xuIl0sIm5hbWVzIjpbIkNFTlRFUiIsIkFWRVJBR0UiLCJTQUgiLCJOT1RfSU5URVJTRUNURUQiLCJJTlRFUlNFQ1RFRCIsIkNPTlRBSU5FRCIsIlRSSUFOR0xFX0lOVEVSU0VDVF9DT1NUIiwiVFJBVkVSU0FMX0NPU1QiLCJCWVRFU19QRVJfTk9ERSIsIklTX0xFQUZOT0RFX0ZMQUciLCJGTE9BVDMyX0VQU0lMT04iLCJNYXRoIiwicG93IiwiU0tJUF9HRU5FUkFUSU9OIiwiU3ltYm9sIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/three-mesh-bvh/src/core/Constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/three-mesh-bvh/src/core/MeshBVH.js":
/*!*********************************************************!*\
  !*** ./node_modules/three-mesh-bvh/src/core/MeshBVH.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_OPTIONS: () => (/* binding */ DEFAULT_OPTIONS),\n/* harmony export */   MeshBVH: () => (/* binding */ MeshBVH)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var _Constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Constants.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/core/Constants.js\");\n/* harmony import */ var _build_buildTree_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./build/buildTree.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/core/build/buildTree.js\");\n/* harmony import */ var _math_OrientedBox_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math/OrientedBox.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/math/OrientedBox.js\");\n/* harmony import */ var _utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../utils/ArrayBoxUtilities.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/utils/ArrayBoxUtilities.js\");\n/* harmony import */ var _utils_ExtendedTrianglePool_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../utils/ExtendedTrianglePool.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/utils/ExtendedTrianglePool.js\");\n/* harmony import */ var _cast_shapecast_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./cast/shapecast.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/core/cast/shapecast.js\");\n/* harmony import */ var _cast_closestPointToPoint_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./cast/closestPointToPoint.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/core/cast/closestPointToPoint.js\");\n/* harmony import */ var _utils_iterationUtils_generated_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./utils/iterationUtils.generated.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/core/utils/iterationUtils.generated.js\");\n/* harmony import */ var _cast_refit_generated_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./cast/refit.generated.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/core/cast/refit.generated.js\");\n/* harmony import */ var _cast_raycast_generated_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./cast/raycast.generated.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/core/cast/raycast.generated.js\");\n/* harmony import */ var _cast_raycastFirst_generated_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./cast/raycastFirst.generated.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/core/cast/raycastFirst.generated.js\");\n/* harmony import */ var _cast_intersectsGeometry_generated_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./cast/intersectsGeometry.generated.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/core/cast/intersectsGeometry.generated.js\");\n/* harmony import */ var _cast_closestPointToGeometry_generated_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./cast/closestPointToGeometry.generated.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/core/cast/closestPointToGeometry.generated.js\");\n/* harmony import */ var _utils_iterationUtils_indirect_generated_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./utils/iterationUtils_indirect.generated.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/core/utils/iterationUtils_indirect.generated.js\");\n/* harmony import */ var _cast_refit_indirect_generated_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./cast/refit_indirect.generated.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/core/cast/refit_indirect.generated.js\");\n/* harmony import */ var _cast_raycast_indirect_generated_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./cast/raycast_indirect.generated.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/core/cast/raycast_indirect.generated.js\");\n/* harmony import */ var _cast_raycastFirst_indirect_generated_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./cast/raycastFirst_indirect.generated.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/core/cast/raycastFirst_indirect.generated.js\");\n/* harmony import */ var _cast_intersectsGeometry_indirect_generated_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./cast/intersectsGeometry_indirect.generated.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/core/cast/intersectsGeometry_indirect.generated.js\");\n/* harmony import */ var _cast_closestPointToGeometry_indirect_generated_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./cast/closestPointToGeometry_indirect.generated.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/core/cast/closestPointToGeometry_indirect.generated.js\");\n/* harmony import */ var _utils_BufferUtils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/BufferUtils.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/utils/BufferUtils.js\");\n/* harmony import */ var _utils_TriangleUtilities_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../utils/TriangleUtilities.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/utils/TriangleUtilities.js\");\n/* harmony import */ var _cast_bvhcast_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./cast/bvhcast.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/core/cast/bvhcast.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst obb = /* @__PURE__ */ new _math_OrientedBox_js__WEBPACK_IMPORTED_MODULE_0__.OrientedBox();\nconst tempBox = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_1__.Box3();\nconst DEFAULT_OPTIONS = {\n    strategy: _Constants_js__WEBPACK_IMPORTED_MODULE_2__.CENTER,\n    maxDepth: 40,\n    maxLeafTris: 10,\n    useSharedArrayBuffer: false,\n    setBoundingBox: true,\n    onProgress: null,\n    indirect: false,\n    verbose: true\n};\nclass MeshBVH {\n    static serialize(bvh, options = {}) {\n        options = {\n            cloneBuffers: true,\n            ...options\n        };\n        const geometry = bvh.geometry;\n        const rootData = bvh._roots;\n        const indirectBuffer = bvh._indirectBuffer;\n        const indexAttribute = geometry.getIndex();\n        let result;\n        if (options.cloneBuffers) {\n            result = {\n                roots: rootData.map((root)=>root.slice()),\n                index: indexAttribute.array.slice(),\n                indirectBuffer: indirectBuffer ? indirectBuffer.slice() : null\n            };\n        } else {\n            result = {\n                roots: rootData,\n                index: indexAttribute.array,\n                indirectBuffer: indirectBuffer\n            };\n        }\n        return result;\n    }\n    static deserialize(data, geometry, options = {}) {\n        options = {\n            setIndex: true,\n            indirect: Boolean(data.indirectBuffer),\n            ...options\n        };\n        const { index, roots, indirectBuffer } = data;\n        const bvh = new MeshBVH(geometry, {\n            ...options,\n            [_Constants_js__WEBPACK_IMPORTED_MODULE_2__.SKIP_GENERATION]: true\n        });\n        bvh._roots = roots;\n        bvh._indirectBuffer = indirectBuffer || null;\n        if (options.setIndex) {\n            const indexAttribute = geometry.getIndex();\n            if (indexAttribute === null) {\n                const newIndex = new three__WEBPACK_IMPORTED_MODULE_1__.BufferAttribute(data.index, 1, false);\n                geometry.setIndex(newIndex);\n            } else if (indexAttribute.array !== index) {\n                indexAttribute.array.set(index);\n                indexAttribute.needsUpdate = true;\n            }\n        }\n        return bvh;\n    }\n    get indirect() {\n        return !!this._indirectBuffer;\n    }\n    constructor(geometry, options = {}){\n        if (!geometry.isBufferGeometry) {\n            throw new Error(\"MeshBVH: Only BufferGeometries are supported.\");\n        } else if (geometry.index && geometry.index.isInterleavedBufferAttribute) {\n            throw new Error(\"MeshBVH: InterleavedBufferAttribute is not supported for the index attribute.\");\n        }\n        // default options\n        options = Object.assign({\n            ...DEFAULT_OPTIONS,\n            // undocumented options\n            // Whether to skip generating the tree. Used for deserialization.\n            [_Constants_js__WEBPACK_IMPORTED_MODULE_2__.SKIP_GENERATION]: false\n        }, options);\n        if (options.useSharedArrayBuffer && !(0,_utils_BufferUtils_js__WEBPACK_IMPORTED_MODULE_3__.isSharedArrayBufferSupported)()) {\n            throw new Error(\"MeshBVH: SharedArrayBuffer is not available.\");\n        }\n        // retain references to the geometry so we can use them it without having to\n        // take a geometry reference in every function.\n        this.geometry = geometry;\n        this._roots = null;\n        this._indirectBuffer = null;\n        if (!options[_Constants_js__WEBPACK_IMPORTED_MODULE_2__.SKIP_GENERATION]) {\n            (0,_build_buildTree_js__WEBPACK_IMPORTED_MODULE_4__.buildPackedTree)(this, options);\n            if (!geometry.boundingBox && options.setBoundingBox) {\n                geometry.boundingBox = this.getBoundingBox(new three__WEBPACK_IMPORTED_MODULE_1__.Box3());\n            }\n        }\n        const { _indirectBuffer } = this;\n        this.resolveTriangleIndex = options.indirect ? (i)=>_indirectBuffer[i] : (i)=>i;\n    }\n    refit(nodeIndices = null) {\n        const refitFunc = this.indirect ? _cast_refit_indirect_generated_js__WEBPACK_IMPORTED_MODULE_5__.refit_indirect : _cast_refit_generated_js__WEBPACK_IMPORTED_MODULE_6__.refit;\n        return refitFunc(this, nodeIndices);\n    }\n    traverse(callback, rootIndex = 0) {\n        const buffer = this._roots[rootIndex];\n        const uint32Array = new Uint32Array(buffer);\n        const uint16Array = new Uint16Array(buffer);\n        _traverse(0);\n        function _traverse(node32Index, depth = 0) {\n            const node16Index = node32Index * 2;\n            const isLeaf = uint16Array[node16Index + 15] === _Constants_js__WEBPACK_IMPORTED_MODULE_2__.IS_LEAFNODE_FLAG;\n            if (isLeaf) {\n                const offset = uint32Array[node32Index + 6];\n                const count = uint16Array[node16Index + 14];\n                callback(depth, isLeaf, new Float32Array(buffer, node32Index * 4, 6), offset, count);\n            } else {\n                // TODO: use node functions here\n                const left = node32Index + _Constants_js__WEBPACK_IMPORTED_MODULE_2__.BYTES_PER_NODE / 4;\n                const right = uint32Array[node32Index + 6];\n                const splitAxis = uint32Array[node32Index + 7];\n                const stopTraversal = callback(depth, isLeaf, new Float32Array(buffer, node32Index * 4, 6), splitAxis);\n                if (!stopTraversal) {\n                    _traverse(left, depth + 1);\n                    _traverse(right, depth + 1);\n                }\n            }\n        }\n    }\n    /* Core Cast Functions */ raycast(ray, materialOrSide = three__WEBPACK_IMPORTED_MODULE_1__.FrontSide) {\n        const roots = this._roots;\n        const geometry = this.geometry;\n        const intersects = [];\n        const isMaterial = materialOrSide.isMaterial;\n        const isArrayMaterial = Array.isArray(materialOrSide);\n        const groups = geometry.groups;\n        const side = isMaterial ? materialOrSide.side : materialOrSide;\n        const raycastFunc = this.indirect ? _cast_raycast_indirect_generated_js__WEBPACK_IMPORTED_MODULE_7__.raycast_indirect : _cast_raycast_generated_js__WEBPACK_IMPORTED_MODULE_8__.raycast;\n        for(let i = 0, l = roots.length; i < l; i++){\n            const materialSide = isArrayMaterial ? materialOrSide[groups[i].materialIndex].side : side;\n            const startCount = intersects.length;\n            raycastFunc(this, i, materialSide, ray, intersects);\n            if (isArrayMaterial) {\n                const materialIndex = groups[i].materialIndex;\n                for(let j = startCount, jl = intersects.length; j < jl; j++){\n                    intersects[j].face.materialIndex = materialIndex;\n                }\n            }\n        }\n        return intersects;\n    }\n    raycastFirst(ray, materialOrSide = three__WEBPACK_IMPORTED_MODULE_1__.FrontSide) {\n        const roots = this._roots;\n        const geometry = this.geometry;\n        const isMaterial = materialOrSide.isMaterial;\n        const isArrayMaterial = Array.isArray(materialOrSide);\n        let closestResult = null;\n        const groups = geometry.groups;\n        const side = isMaterial ? materialOrSide.side : materialOrSide;\n        const raycastFirstFunc = this.indirect ? _cast_raycastFirst_indirect_generated_js__WEBPACK_IMPORTED_MODULE_9__.raycastFirst_indirect : _cast_raycastFirst_generated_js__WEBPACK_IMPORTED_MODULE_10__.raycastFirst;\n        for(let i = 0, l = roots.length; i < l; i++){\n            const materialSide = isArrayMaterial ? materialOrSide[groups[i].materialIndex].side : side;\n            const result = raycastFirstFunc(this, i, materialSide, ray);\n            if (result != null && (closestResult == null || result.distance < closestResult.distance)) {\n                closestResult = result;\n                if (isArrayMaterial) {\n                    result.face.materialIndex = groups[i].materialIndex;\n                }\n            }\n        }\n        return closestResult;\n    }\n    intersectsGeometry(otherGeometry, geomToMesh) {\n        let result = false;\n        const roots = this._roots;\n        const intersectsGeometryFunc = this.indirect ? _cast_intersectsGeometry_indirect_generated_js__WEBPACK_IMPORTED_MODULE_11__.intersectsGeometry_indirect : _cast_intersectsGeometry_generated_js__WEBPACK_IMPORTED_MODULE_12__.intersectsGeometry;\n        for(let i = 0, l = roots.length; i < l; i++){\n            result = intersectsGeometryFunc(this, i, otherGeometry, geomToMesh);\n            if (result) {\n                break;\n            }\n        }\n        return result;\n    }\n    shapecast(callbacks) {\n        const triangle = _utils_ExtendedTrianglePool_js__WEBPACK_IMPORTED_MODULE_13__.ExtendedTrianglePool.getPrimitive();\n        const iterateFunc = this.indirect ? _utils_iterationUtils_indirect_generated_js__WEBPACK_IMPORTED_MODULE_14__.iterateOverTriangles_indirect : _utils_iterationUtils_generated_js__WEBPACK_IMPORTED_MODULE_15__.iterateOverTriangles;\n        let { boundsTraverseOrder, intersectsBounds, intersectsRange, intersectsTriangle } = callbacks;\n        // wrap the intersectsRange function\n        if (intersectsRange && intersectsTriangle) {\n            const originalIntersectsRange = intersectsRange;\n            intersectsRange = (offset, count, contained, depth, nodeIndex)=>{\n                if (!originalIntersectsRange(offset, count, contained, depth, nodeIndex)) {\n                    return iterateFunc(offset, count, this, intersectsTriangle, contained, depth, triangle);\n                }\n                return true;\n            };\n        } else if (!intersectsRange) {\n            if (intersectsTriangle) {\n                intersectsRange = (offset, count, contained, depth)=>{\n                    return iterateFunc(offset, count, this, intersectsTriangle, contained, depth, triangle);\n                };\n            } else {\n                intersectsRange = (offset, count, contained)=>{\n                    return contained;\n                };\n            }\n        }\n        // run shapecast\n        let result = false;\n        let byteOffset = 0;\n        const roots = this._roots;\n        for(let i = 0, l = roots.length; i < l; i++){\n            const root = roots[i];\n            result = (0,_cast_shapecast_js__WEBPACK_IMPORTED_MODULE_16__.shapecast)(this, i, intersectsBounds, intersectsRange, boundsTraverseOrder, byteOffset);\n            if (result) {\n                break;\n            }\n            byteOffset += root.byteLength;\n        }\n        _utils_ExtendedTrianglePool_js__WEBPACK_IMPORTED_MODULE_13__.ExtendedTrianglePool.releasePrimitive(triangle);\n        return result;\n    }\n    bvhcast(otherBvh, matrixToLocal, callbacks) {\n        let { intersectsRanges, intersectsTriangles } = callbacks;\n        const triangle1 = _utils_ExtendedTrianglePool_js__WEBPACK_IMPORTED_MODULE_13__.ExtendedTrianglePool.getPrimitive();\n        const indexAttr1 = this.geometry.index;\n        const positionAttr1 = this.geometry.attributes.position;\n        const assignTriangle1 = this.indirect ? (i1)=>{\n            const ti = this.resolveTriangleIndex(i1);\n            (0,_utils_TriangleUtilities_js__WEBPACK_IMPORTED_MODULE_17__.setTriangle)(triangle1, ti * 3, indexAttr1, positionAttr1);\n        } : (i1)=>{\n            (0,_utils_TriangleUtilities_js__WEBPACK_IMPORTED_MODULE_17__.setTriangle)(triangle1, i1 * 3, indexAttr1, positionAttr1);\n        };\n        const triangle2 = _utils_ExtendedTrianglePool_js__WEBPACK_IMPORTED_MODULE_13__.ExtendedTrianglePool.getPrimitive();\n        const indexAttr2 = otherBvh.geometry.index;\n        const positionAttr2 = otherBvh.geometry.attributes.position;\n        const assignTriangle2 = otherBvh.indirect ? (i2)=>{\n            const ti2 = otherBvh.resolveTriangleIndex(i2);\n            (0,_utils_TriangleUtilities_js__WEBPACK_IMPORTED_MODULE_17__.setTriangle)(triangle2, ti2 * 3, indexAttr2, positionAttr2);\n        } : (i2)=>{\n            (0,_utils_TriangleUtilities_js__WEBPACK_IMPORTED_MODULE_17__.setTriangle)(triangle2, i2 * 3, indexAttr2, positionAttr2);\n        };\n        // generate triangle callback if needed\n        if (intersectsTriangles) {\n            const iterateOverDoubleTriangles = (offset1, count1, offset2, count2, depth1, index1, depth2, index2)=>{\n                for(let i2 = offset2, l2 = offset2 + count2; i2 < l2; i2++){\n                    assignTriangle2(i2);\n                    triangle2.a.applyMatrix4(matrixToLocal);\n                    triangle2.b.applyMatrix4(matrixToLocal);\n                    triangle2.c.applyMatrix4(matrixToLocal);\n                    triangle2.needsUpdate = true;\n                    for(let i1 = offset1, l1 = offset1 + count1; i1 < l1; i1++){\n                        assignTriangle1(i1);\n                        triangle1.needsUpdate = true;\n                        if (intersectsTriangles(triangle1, triangle2, i1, i2, depth1, index1, depth2, index2)) {\n                            return true;\n                        }\n                    }\n                }\n                return false;\n            };\n            if (intersectsRanges) {\n                const originalIntersectsRanges = intersectsRanges;\n                intersectsRanges = function(offset1, count1, offset2, count2, depth1, index1, depth2, index2) {\n                    if (!originalIntersectsRanges(offset1, count1, offset2, count2, depth1, index1, depth2, index2)) {\n                        return iterateOverDoubleTriangles(offset1, count1, offset2, count2, depth1, index1, depth2, index2);\n                    }\n                    return true;\n                };\n            } else {\n                intersectsRanges = iterateOverDoubleTriangles;\n            }\n        }\n        return (0,_cast_bvhcast_js__WEBPACK_IMPORTED_MODULE_18__.bvhcast)(this, otherBvh, matrixToLocal, intersectsRanges);\n    }\n    /* Derived Cast Functions */ intersectsBox(box, boxToMesh) {\n        obb.set(box.min, box.max, boxToMesh);\n        obb.needsUpdate = true;\n        return this.shapecast({\n            intersectsBounds: (box)=>obb.intersectsBox(box),\n            intersectsTriangle: (tri)=>obb.intersectsTriangle(tri)\n        });\n    }\n    intersectsSphere(sphere) {\n        return this.shapecast({\n            intersectsBounds: (box)=>sphere.intersectsBox(box),\n            intersectsTriangle: (tri)=>tri.intersectsSphere(sphere)\n        });\n    }\n    closestPointToGeometry(otherGeometry, geometryToBvh, target1 = {}, target2 = {}, minThreshold = 0, maxThreshold = Infinity) {\n        const closestPointToGeometryFunc = this.indirect ? _cast_closestPointToGeometry_indirect_generated_js__WEBPACK_IMPORTED_MODULE_19__.closestPointToGeometry_indirect : _cast_closestPointToGeometry_generated_js__WEBPACK_IMPORTED_MODULE_20__.closestPointToGeometry;\n        return closestPointToGeometryFunc(this, otherGeometry, geometryToBvh, target1, target2, minThreshold, maxThreshold);\n    }\n    closestPointToPoint(point, target = {}, minThreshold = 0, maxThreshold = Infinity) {\n        return (0,_cast_closestPointToPoint_js__WEBPACK_IMPORTED_MODULE_21__.closestPointToPoint)(this, point, target, minThreshold, maxThreshold);\n    }\n    getBoundingBox(target) {\n        target.makeEmpty();\n        const roots = this._roots;\n        roots.forEach((buffer)=>{\n            (0,_utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_22__.arrayToBox)(0, new Float32Array(buffer), tempBox);\n            target.union(tempBox);\n        });\n        return target;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/three-mesh-bvh/src/core/MeshBVH.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/three-mesh-bvh/src/core/MeshBVHNode.js":
/*!*************************************************************!*\
  !*** ./node_modules/three-mesh-bvh/src/core/MeshBVHNode.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MeshBVHNode: () => (/* binding */ MeshBVHNode)\n/* harmony export */ });\nclass MeshBVHNode {\n    constructor(){\n        // internal nodes have boundingData, left, right, and splitAxis\n        // leaf nodes have offset and count (referring to primitives in the mesh geometry)\n        this.boundingData = new Float32Array(6);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdGhyZWUtbWVzaC1idmgvc3JjL2NvcmUvTWVzaEJWSE5vZGUuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLE1BQU1BO0lBRVpDLGFBQWM7UUFFYiwrREFBK0Q7UUFDL0Qsa0ZBQWtGO1FBRWxGLElBQUksQ0FBQ0MsWUFBWSxHQUFHLElBQUlDLGFBQWM7SUFFdkM7QUFFRCIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90aHJlZS1tZXNoLWJ2aC9zcmMvY29yZS9NZXNoQlZITm9kZS5qcz83M2U2Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBNZXNoQlZITm9kZSB7XG5cblx0Y29uc3RydWN0b3IoKSB7XG5cblx0XHQvLyBpbnRlcm5hbCBub2RlcyBoYXZlIGJvdW5kaW5nRGF0YSwgbGVmdCwgcmlnaHQsIGFuZCBzcGxpdEF4aXNcblx0XHQvLyBsZWFmIG5vZGVzIGhhdmUgb2Zmc2V0IGFuZCBjb3VudCAocmVmZXJyaW5nIHRvIHByaW1pdGl2ZXMgaW4gdGhlIG1lc2ggZ2VvbWV0cnkpXG5cblx0XHR0aGlzLmJvdW5kaW5nRGF0YSA9IG5ldyBGbG9hdDMyQXJyYXkoIDYgKTtcblxuXHR9XG5cbn1cbiJdLCJuYW1lcyI6WyJNZXNoQlZITm9kZSIsImNvbnN0cnVjdG9yIiwiYm91bmRpbmdEYXRhIiwiRmxvYXQzMkFycmF5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/three-mesh-bvh/src/core/MeshBVHNode.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/three-mesh-bvh/src/core/build/buildTree.js":
/*!*****************************************************************!*\
  !*** ./node_modules/three-mesh-bvh/src/core/build/buildTree.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   buildPackedTree: () => (/* binding */ buildPackedTree),\n/* harmony export */   buildTree: () => (/* binding */ buildTree),\n/* harmony export */   generateIndirectBuffer: () => (/* binding */ generateIndirectBuffer)\n/* harmony export */ });\n/* harmony import */ var _geometryUtils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./geometryUtils.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/core/build/geometryUtils.js\");\n/* harmony import */ var _computeBoundsUtils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./computeBoundsUtils.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/core/build/computeBoundsUtils.js\");\n/* harmony import */ var _splitUtils_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./splitUtils.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/core/build/splitUtils.js\");\n/* harmony import */ var _MeshBVHNode_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../MeshBVHNode.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/core/MeshBVHNode.js\");\n/* harmony import */ var _Constants_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../Constants.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/core/Constants.js\");\n/* harmony import */ var _sortUtils_generated_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sortUtils.generated.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/core/build/sortUtils.generated.js\");\n/* harmony import */ var _sortUtils_indirect_generated_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sortUtils_indirect.generated.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/core/build/sortUtils_indirect.generated.js\");\n/* harmony import */ var _buildUtils_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./buildUtils.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/core/build/buildUtils.js\");\n\n\n\n\n\n\n\n\nfunction generateIndirectBuffer(geometry, useSharedArrayBuffer) {\n    const triCount = (geometry.index ? geometry.index.count : geometry.attributes.position.count) / 3;\n    const useUint32 = triCount > 2 ** 16;\n    const byteCount = useUint32 ? 4 : 2;\n    const buffer = useSharedArrayBuffer ? new SharedArrayBuffer(triCount * byteCount) : new ArrayBuffer(triCount * byteCount);\n    const indirectBuffer = useUint32 ? new Uint32Array(buffer) : new Uint16Array(buffer);\n    for(let i = 0, l = indirectBuffer.length; i < l; i++){\n        indirectBuffer[i] = i;\n    }\n    return indirectBuffer;\n}\nfunction buildTree(bvh, triangleBounds, offset, count, options) {\n    // epxand variables\n    const { maxDepth, verbose, maxLeafTris, strategy, onProgress, indirect } = options;\n    const indirectBuffer = bvh._indirectBuffer;\n    const geometry = bvh.geometry;\n    const indexArray = geometry.index ? geometry.index.array : null;\n    const partionFunc = indirect ? _sortUtils_indirect_generated_js__WEBPACK_IMPORTED_MODULE_0__.partition_indirect : _sortUtils_generated_js__WEBPACK_IMPORTED_MODULE_1__.partition;\n    // generate intermediate variables\n    const totalTriangles = (0,_geometryUtils_js__WEBPACK_IMPORTED_MODULE_2__.getTriCount)(geometry);\n    const cacheCentroidBoundingData = new Float32Array(6);\n    let reachedMaxDepth = false;\n    const root = new _MeshBVHNode_js__WEBPACK_IMPORTED_MODULE_3__.MeshBVHNode();\n    (0,_computeBoundsUtils_js__WEBPACK_IMPORTED_MODULE_4__.getBounds)(triangleBounds, offset, count, root.boundingData, cacheCentroidBoundingData);\n    splitNode(root, offset, count, cacheCentroidBoundingData);\n    return root;\n    function triggerProgress(trianglesProcessed) {\n        if (onProgress) {\n            onProgress(trianglesProcessed / totalTriangles);\n        }\n    }\n    // either recursively splits the given node, creating left and right subtrees for it, or makes it a leaf node,\n    // recording the offset and count of its triangles and writing them into the reordered geometry index.\n    function splitNode(node, offset, count, centroidBoundingData = null, depth = 0) {\n        if (!reachedMaxDepth && depth >= maxDepth) {\n            reachedMaxDepth = true;\n            if (verbose) {\n                console.warn(`MeshBVH: Max depth of ${maxDepth} reached when generating BVH. Consider increasing maxDepth.`);\n                console.warn(geometry);\n            }\n        }\n        // early out if we've met our capacity\n        if (count <= maxLeafTris || depth >= maxDepth) {\n            triggerProgress(offset + count);\n            node.offset = offset;\n            node.count = count;\n            return node;\n        }\n        // Find where to split the volume\n        const split = (0,_splitUtils_js__WEBPACK_IMPORTED_MODULE_5__.getOptimalSplit)(node.boundingData, centroidBoundingData, triangleBounds, offset, count, strategy);\n        if (split.axis === -1) {\n            triggerProgress(offset + count);\n            node.offset = offset;\n            node.count = count;\n            return node;\n        }\n        const splitOffset = partionFunc(indirectBuffer, indexArray, triangleBounds, offset, count, split);\n        // create the two new child nodes\n        if (splitOffset === offset || splitOffset === offset + count) {\n            triggerProgress(offset + count);\n            node.offset = offset;\n            node.count = count;\n        } else {\n            node.splitAxis = split.axis;\n            // create the left child and compute its bounding box\n            const left = new _MeshBVHNode_js__WEBPACK_IMPORTED_MODULE_3__.MeshBVHNode();\n            const lstart = offset;\n            const lcount = splitOffset - offset;\n            node.left = left;\n            (0,_computeBoundsUtils_js__WEBPACK_IMPORTED_MODULE_4__.getBounds)(triangleBounds, lstart, lcount, left.boundingData, cacheCentroidBoundingData);\n            splitNode(left, lstart, lcount, cacheCentroidBoundingData, depth + 1);\n            // repeat for right\n            const right = new _MeshBVHNode_js__WEBPACK_IMPORTED_MODULE_3__.MeshBVHNode();\n            const rstart = splitOffset;\n            const rcount = count - lcount;\n            node.right = right;\n            (0,_computeBoundsUtils_js__WEBPACK_IMPORTED_MODULE_4__.getBounds)(triangleBounds, rstart, rcount, right.boundingData, cacheCentroidBoundingData);\n            splitNode(right, rstart, rcount, cacheCentroidBoundingData, depth + 1);\n        }\n        return node;\n    }\n}\nfunction buildPackedTree(bvh, options) {\n    const geometry = bvh.geometry;\n    if (options.indirect) {\n        bvh._indirectBuffer = generateIndirectBuffer(geometry, options.useSharedArrayBuffer);\n        if ((0,_geometryUtils_js__WEBPACK_IMPORTED_MODULE_2__.hasGroupGaps)(geometry) && !options.verbose) {\n            console.warn('MeshBVH: Provided geometry contains groups that do not fully span the vertex contents while using the \"indirect\" option. ' + \"BVH may incorrectly report intersections on unrendered portions of the geometry.\");\n        }\n    }\n    if (!bvh._indirectBuffer) {\n        (0,_geometryUtils_js__WEBPACK_IMPORTED_MODULE_2__.ensureIndex)(geometry, options);\n    }\n    const BufferConstructor = options.useSharedArrayBuffer ? SharedArrayBuffer : ArrayBuffer;\n    const triangleBounds = (0,_computeBoundsUtils_js__WEBPACK_IMPORTED_MODULE_4__.computeTriangleBounds)(geometry);\n    const geometryRanges = options.indirect ? (0,_geometryUtils_js__WEBPACK_IMPORTED_MODULE_2__.getFullGeometryRange)(geometry) : (0,_geometryUtils_js__WEBPACK_IMPORTED_MODULE_2__.getRootIndexRanges)(geometry);\n    bvh._roots = geometryRanges.map((range)=>{\n        const root = buildTree(bvh, triangleBounds, range.offset, range.count, options);\n        const nodeCount = (0,_buildUtils_js__WEBPACK_IMPORTED_MODULE_6__.countNodes)(root);\n        const buffer = new BufferConstructor(_Constants_js__WEBPACK_IMPORTED_MODULE_7__.BYTES_PER_NODE * nodeCount);\n        (0,_buildUtils_js__WEBPACK_IMPORTED_MODULE_6__.populateBuffer)(0, root, buffer);\n        return buffer;\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/three-mesh-bvh/src/core/build/buildTree.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/three-mesh-bvh/src/core/build/buildUtils.js":
/*!******************************************************************!*\
  !*** ./node_modules/three-mesh-bvh/src/core/build/buildUtils.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   countNodes: () => (/* binding */ countNodes),\n/* harmony export */   populateBuffer: () => (/* binding */ populateBuffer)\n/* harmony export */ });\n/* harmony import */ var _Constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Constants.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/core/Constants.js\");\n/* harmony import */ var _utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/nodeBufferUtils.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/core/utils/nodeBufferUtils.js\");\n\n\nlet float32Array, uint32Array, uint16Array, uint8Array;\nconst MAX_POINTER = Math.pow(2, 32);\nfunction countNodes(node) {\n    if (\"count\" in node) {\n        return 1;\n    } else {\n        return 1 + countNodes(node.left) + countNodes(node.right);\n    }\n}\nfunction populateBuffer(byteOffset, node, buffer) {\n    float32Array = new Float32Array(buffer);\n    uint32Array = new Uint32Array(buffer);\n    uint16Array = new Uint16Array(buffer);\n    uint8Array = new Uint8Array(buffer);\n    return _populateBuffer(byteOffset, node);\n}\n// pack structure\n// boundingData  \t\t\t\t: 6 float32\n// right / offset \t\t\t\t: 1 uint32\n// splitAxis / isLeaf + count \t: 1 uint32 / 2 uint16\nfunction _populateBuffer(byteOffset, node) {\n    const stride4Offset = byteOffset / 4;\n    const stride2Offset = byteOffset / 2;\n    const isLeaf = \"count\" in node;\n    const boundingData = node.boundingData;\n    for(let i = 0; i < 6; i++){\n        float32Array[stride4Offset + i] = boundingData[i];\n    }\n    if (isLeaf) {\n        if (node.buffer) {\n            const buffer = node.buffer;\n            uint8Array.set(new Uint8Array(buffer), byteOffset);\n            for(let offset = byteOffset, l = byteOffset + buffer.byteLength; offset < l; offset += _Constants_js__WEBPACK_IMPORTED_MODULE_0__.BYTES_PER_NODE){\n                const offset2 = offset / 2;\n                if (!(0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_1__.IS_LEAF)(offset2, uint16Array)) {\n                    uint32Array[offset / 4 + 6] += stride4Offset;\n                }\n            }\n            return byteOffset + buffer.byteLength;\n        } else {\n            const offset = node.offset;\n            const count = node.count;\n            uint32Array[stride4Offset + 6] = offset;\n            uint16Array[stride2Offset + 14] = count;\n            uint16Array[stride2Offset + 15] = _Constants_js__WEBPACK_IMPORTED_MODULE_0__.IS_LEAFNODE_FLAG;\n            return byteOffset + _Constants_js__WEBPACK_IMPORTED_MODULE_0__.BYTES_PER_NODE;\n        }\n    } else {\n        const left = node.left;\n        const right = node.right;\n        const splitAxis = node.splitAxis;\n        let nextUnusedPointer;\n        nextUnusedPointer = _populateBuffer(byteOffset + _Constants_js__WEBPACK_IMPORTED_MODULE_0__.BYTES_PER_NODE, left);\n        if (nextUnusedPointer / 4 > MAX_POINTER) {\n            throw new Error(\"MeshBVH: Cannot store child pointer greater than 32 bits.\");\n        }\n        uint32Array[stride4Offset + 6] = nextUnusedPointer / 4;\n        nextUnusedPointer = _populateBuffer(nextUnusedPointer, right);\n        uint32Array[stride4Offset + 7] = splitAxis;\n        return nextUnusedPointer;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdGhyZWUtbWVzaC1idmgvc3JjL2NvcmUvYnVpbGQvYnVpbGRVdGlscy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQW1FO0FBQ2I7QUFFdEQsSUFBSUcsY0FBY0MsYUFBYUMsYUFBYUM7QUFDNUMsTUFBTUMsY0FBY0MsS0FBS0MsR0FBRyxDQUFFLEdBQUc7QUFFMUIsU0FBU0MsV0FBWUMsSUFBSTtJQUUvQixJQUFLLFdBQVdBLE1BQU87UUFFdEIsT0FBTztJQUVSLE9BQU87UUFFTixPQUFPLElBQUlELFdBQVlDLEtBQUtDLElBQUksSUFBS0YsV0FBWUMsS0FBS0UsS0FBSztJQUU1RDtBQUVEO0FBRU8sU0FBU0MsZUFBZ0JDLFVBQVUsRUFBRUosSUFBSSxFQUFFSyxNQUFNO0lBRXZEYixlQUFlLElBQUljLGFBQWNEO0lBQ2pDWixjQUFjLElBQUljLFlBQWFGO0lBQy9CWCxjQUFjLElBQUljLFlBQWFIO0lBQy9CVixhQUFhLElBQUljLFdBQVlKO0lBRTdCLE9BQU9LLGdCQUFpQk4sWUFBWUo7QUFFckM7QUFFQSxpQkFBaUI7QUFDakIsZ0NBQWdDO0FBQ2hDLGdDQUFnQztBQUNoQyxvREFBb0Q7QUFDcEQsU0FBU1UsZ0JBQWlCTixVQUFVLEVBQUVKLElBQUk7SUFFekMsTUFBTVcsZ0JBQWdCUCxhQUFhO0lBQ25DLE1BQU1RLGdCQUFnQlIsYUFBYTtJQUNuQyxNQUFNUyxTQUFTLFdBQVdiO0lBQzFCLE1BQU1jLGVBQWVkLEtBQUtjLFlBQVk7SUFDdEMsSUFBTSxJQUFJQyxJQUFJLEdBQUdBLElBQUksR0FBR0EsSUFBTztRQUU5QnZCLFlBQVksQ0FBRW1CLGdCQUFnQkksRUFBRyxHQUFHRCxZQUFZLENBQUVDLEVBQUc7SUFFdEQ7SUFFQSxJQUFLRixRQUFTO1FBRWIsSUFBS2IsS0FBS0ssTUFBTSxFQUFHO1lBRWxCLE1BQU1BLFNBQVNMLEtBQUtLLE1BQU07WUFDMUJWLFdBQVdxQixHQUFHLENBQUUsSUFBSVAsV0FBWUosU0FBVUQ7WUFFMUMsSUFBTSxJQUFJYSxTQUFTYixZQUFZYyxJQUFJZCxhQUFhQyxPQUFPYyxVQUFVLEVBQUVGLFNBQVNDLEdBQUdELFVBQVU1Qix5REFBY0EsQ0FBRztnQkFFekcsTUFBTStCLFVBQVVILFNBQVM7Z0JBQ3pCLElBQUssQ0FBRTFCLGtFQUFPQSxDQUFFNkIsU0FBUzFCLGNBQWdCO29CQUV4Q0QsV0FBVyxDQUFFLFNBQVcsSUFBTSxFQUFHLElBQUlrQjtnQkFHdEM7WUFFRDtZQUVBLE9BQU9QLGFBQWFDLE9BQU9jLFVBQVU7UUFFdEMsT0FBTztZQUVOLE1BQU1GLFNBQVNqQixLQUFLaUIsTUFBTTtZQUMxQixNQUFNSSxRQUFRckIsS0FBS3FCLEtBQUs7WUFDeEI1QixXQUFXLENBQUVrQixnQkFBZ0IsRUFBRyxHQUFHTTtZQUNuQ3ZCLFdBQVcsQ0FBRWtCLGdCQUFnQixHQUFJLEdBQUdTO1lBQ3BDM0IsV0FBVyxDQUFFa0IsZ0JBQWdCLEdBQUksR0FBR3RCLDJEQUFnQkE7WUFDcEQsT0FBT2MsYUFBYWYseURBQWNBO1FBRW5DO0lBRUQsT0FBTztRQUVOLE1BQU1ZLE9BQU9ELEtBQUtDLElBQUk7UUFDdEIsTUFBTUMsUUFBUUYsS0FBS0UsS0FBSztRQUN4QixNQUFNb0IsWUFBWXRCLEtBQUtzQixTQUFTO1FBRWhDLElBQUlDO1FBQ0pBLG9CQUFvQmIsZ0JBQWlCTixhQUFhZix5REFBY0EsRUFBRVk7UUFFbEUsSUFBSyxvQkFBc0IsSUFBTUwsYUFBYztZQUU5QyxNQUFNLElBQUk0QixNQUFPO1FBRWxCO1FBRUEvQixXQUFXLENBQUVrQixnQkFBZ0IsRUFBRyxHQUFHWSxvQkFBb0I7UUFDdkRBLG9CQUFvQmIsZ0JBQWlCYSxtQkFBbUJyQjtRQUV4RFQsV0FBVyxDQUFFa0IsZ0JBQWdCLEVBQUcsR0FBR1c7UUFDbkMsT0FBT0M7SUFFUjtBQUVEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3RocmVlLW1lc2gtYnZoL3NyYy9jb3JlL2J1aWxkL2J1aWxkVXRpbHMuanM/NTRlMCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCWVRFU19QRVJfTk9ERSwgSVNfTEVBRk5PREVfRkxBRyB9IGZyb20gJy4uL0NvbnN0YW50cy5qcyc7XG5pbXBvcnQgeyBJU19MRUFGIH0gZnJvbSAnLi4vdXRpbHMvbm9kZUJ1ZmZlclV0aWxzLmpzJztcblxubGV0IGZsb2F0MzJBcnJheSwgdWludDMyQXJyYXksIHVpbnQxNkFycmF5LCB1aW50OEFycmF5O1xuY29uc3QgTUFYX1BPSU5URVIgPSBNYXRoLnBvdyggMiwgMzIgKTtcblxuZXhwb3J0IGZ1bmN0aW9uIGNvdW50Tm9kZXMoIG5vZGUgKSB7XG5cblx0aWYgKCAnY291bnQnIGluIG5vZGUgKSB7XG5cblx0XHRyZXR1cm4gMTtcblxuXHR9IGVsc2Uge1xuXG5cdFx0cmV0dXJuIDEgKyBjb3VudE5vZGVzKCBub2RlLmxlZnQgKSArIGNvdW50Tm9kZXMoIG5vZGUucmlnaHQgKTtcblxuXHR9XG5cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBvcHVsYXRlQnVmZmVyKCBieXRlT2Zmc2V0LCBub2RlLCBidWZmZXIgKSB7XG5cblx0ZmxvYXQzMkFycmF5ID0gbmV3IEZsb2F0MzJBcnJheSggYnVmZmVyICk7XG5cdHVpbnQzMkFycmF5ID0gbmV3IFVpbnQzMkFycmF5KCBidWZmZXIgKTtcblx0dWludDE2QXJyYXkgPSBuZXcgVWludDE2QXJyYXkoIGJ1ZmZlciApO1xuXHR1aW50OEFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoIGJ1ZmZlciApO1xuXG5cdHJldHVybiBfcG9wdWxhdGVCdWZmZXIoIGJ5dGVPZmZzZXQsIG5vZGUgKTtcblxufVxuXG4vLyBwYWNrIHN0cnVjdHVyZVxuLy8gYm91bmRpbmdEYXRhICBcdFx0XHRcdDogNiBmbG9hdDMyXG4vLyByaWdodCAvIG9mZnNldCBcdFx0XHRcdDogMSB1aW50MzJcbi8vIHNwbGl0QXhpcyAvIGlzTGVhZiArIGNvdW50IFx0OiAxIHVpbnQzMiAvIDIgdWludDE2XG5mdW5jdGlvbiBfcG9wdWxhdGVCdWZmZXIoIGJ5dGVPZmZzZXQsIG5vZGUgKSB7XG5cblx0Y29uc3Qgc3RyaWRlNE9mZnNldCA9IGJ5dGVPZmZzZXQgLyA0O1xuXHRjb25zdCBzdHJpZGUyT2Zmc2V0ID0gYnl0ZU9mZnNldCAvIDI7XG5cdGNvbnN0IGlzTGVhZiA9ICdjb3VudCcgaW4gbm9kZTtcblx0Y29uc3QgYm91bmRpbmdEYXRhID0gbm9kZS5ib3VuZGluZ0RhdGE7XG5cdGZvciAoIGxldCBpID0gMDsgaSA8IDY7IGkgKysgKSB7XG5cblx0XHRmbG9hdDMyQXJyYXlbIHN0cmlkZTRPZmZzZXQgKyBpIF0gPSBib3VuZGluZ0RhdGFbIGkgXTtcblxuXHR9XG5cblx0aWYgKCBpc0xlYWYgKSB7XG5cblx0XHRpZiAoIG5vZGUuYnVmZmVyICkge1xuXG5cdFx0XHRjb25zdCBidWZmZXIgPSBub2RlLmJ1ZmZlcjtcblx0XHRcdHVpbnQ4QXJyYXkuc2V0KCBuZXcgVWludDhBcnJheSggYnVmZmVyICksIGJ5dGVPZmZzZXQgKTtcblxuXHRcdFx0Zm9yICggbGV0IG9mZnNldCA9IGJ5dGVPZmZzZXQsIGwgPSBieXRlT2Zmc2V0ICsgYnVmZmVyLmJ5dGVMZW5ndGg7IG9mZnNldCA8IGw7IG9mZnNldCArPSBCWVRFU19QRVJfTk9ERSApIHtcblxuXHRcdFx0XHRjb25zdCBvZmZzZXQyID0gb2Zmc2V0IC8gMjtcblx0XHRcdFx0aWYgKCAhIElTX0xFQUYoIG9mZnNldDIsIHVpbnQxNkFycmF5ICkgKSB7XG5cblx0XHRcdFx0XHR1aW50MzJBcnJheVsgKCBvZmZzZXQgLyA0ICkgKyA2IF0gKz0gc3RyaWRlNE9mZnNldDtcblxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gYnl0ZU9mZnNldCArIGJ1ZmZlci5ieXRlTGVuZ3RoO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Y29uc3Qgb2Zmc2V0ID0gbm9kZS5vZmZzZXQ7XG5cdFx0XHRjb25zdCBjb3VudCA9IG5vZGUuY291bnQ7XG5cdFx0XHR1aW50MzJBcnJheVsgc3RyaWRlNE9mZnNldCArIDYgXSA9IG9mZnNldDtcblx0XHRcdHVpbnQxNkFycmF5WyBzdHJpZGUyT2Zmc2V0ICsgMTQgXSA9IGNvdW50O1xuXHRcdFx0dWludDE2QXJyYXlbIHN0cmlkZTJPZmZzZXQgKyAxNSBdID0gSVNfTEVBRk5PREVfRkxBRztcblx0XHRcdHJldHVybiBieXRlT2Zmc2V0ICsgQllURVNfUEVSX05PREU7XG5cblx0XHR9XG5cblx0fSBlbHNlIHtcblxuXHRcdGNvbnN0IGxlZnQgPSBub2RlLmxlZnQ7XG5cdFx0Y29uc3QgcmlnaHQgPSBub2RlLnJpZ2h0O1xuXHRcdGNvbnN0IHNwbGl0QXhpcyA9IG5vZGUuc3BsaXRBeGlzO1xuXG5cdFx0bGV0IG5leHRVbnVzZWRQb2ludGVyO1xuXHRcdG5leHRVbnVzZWRQb2ludGVyID0gX3BvcHVsYXRlQnVmZmVyKCBieXRlT2Zmc2V0ICsgQllURVNfUEVSX05PREUsIGxlZnQgKTtcblxuXHRcdGlmICggKCBuZXh0VW51c2VkUG9pbnRlciAvIDQgKSA+IE1BWF9QT0lOVEVSICkge1xuXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoICdNZXNoQlZIOiBDYW5ub3Qgc3RvcmUgY2hpbGQgcG9pbnRlciBncmVhdGVyIHRoYW4gMzIgYml0cy4nICk7XG5cblx0XHR9XG5cblx0XHR1aW50MzJBcnJheVsgc3RyaWRlNE9mZnNldCArIDYgXSA9IG5leHRVbnVzZWRQb2ludGVyIC8gNDtcblx0XHRuZXh0VW51c2VkUG9pbnRlciA9IF9wb3B1bGF0ZUJ1ZmZlciggbmV4dFVudXNlZFBvaW50ZXIsIHJpZ2h0ICk7XG5cblx0XHR1aW50MzJBcnJheVsgc3RyaWRlNE9mZnNldCArIDcgXSA9IHNwbGl0QXhpcztcblx0XHRyZXR1cm4gbmV4dFVudXNlZFBvaW50ZXI7XG5cblx0fVxuXG59XG4iXSwibmFtZXMiOlsiQllURVNfUEVSX05PREUiLCJJU19MRUFGTk9ERV9GTEFHIiwiSVNfTEVBRiIsImZsb2F0MzJBcnJheSIsInVpbnQzMkFycmF5IiwidWludDE2QXJyYXkiLCJ1aW50OEFycmF5IiwiTUFYX1BPSU5URVIiLCJNYXRoIiwicG93IiwiY291bnROb2RlcyIsIm5vZGUiLCJsZWZ0IiwicmlnaHQiLCJwb3B1bGF0ZUJ1ZmZlciIsImJ5dGVPZmZzZXQiLCJidWZmZXIiLCJGbG9hdDMyQXJyYXkiLCJVaW50MzJBcnJheSIsIlVpbnQxNkFycmF5IiwiVWludDhBcnJheSIsIl9wb3B1bGF0ZUJ1ZmZlciIsInN0cmlkZTRPZmZzZXQiLCJzdHJpZGUyT2Zmc2V0IiwiaXNMZWFmIiwiYm91bmRpbmdEYXRhIiwiaSIsInNldCIsIm9mZnNldCIsImwiLCJieXRlTGVuZ3RoIiwib2Zmc2V0MiIsImNvdW50Iiwic3BsaXRBeGlzIiwibmV4dFVudXNlZFBvaW50ZXIiLCJFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/three-mesh-bvh/src/core/build/buildUtils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/three-mesh-bvh/src/core/build/computeBoundsUtils.js":
/*!**************************************************************************!*\
  !*** ./node_modules/three-mesh-bvh/src/core/build/computeBoundsUtils.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   computeTriangleBounds: () => (/* binding */ computeTriangleBounds),\n/* harmony export */   getBounds: () => (/* binding */ getBounds)\n/* harmony export */ });\n/* harmony import */ var _Constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Constants.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/core/Constants.js\");\n/* harmony import */ var _geometryUtils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./geometryUtils.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/core/build/geometryUtils.js\");\n\n\n// computes the union of the bounds of all of the given triangles and puts the resulting box in \"target\".\n// A bounding box is computed for the centroids of the triangles, as well, and placed in \"centroidTarget\".\n// These are computed together to avoid redundant accesses to bounds array.\nfunction getBounds(triangleBounds, offset, count, target, centroidTarget) {\n    let minx = Infinity;\n    let miny = Infinity;\n    let minz = Infinity;\n    let maxx = -Infinity;\n    let maxy = -Infinity;\n    let maxz = -Infinity;\n    let cminx = Infinity;\n    let cminy = Infinity;\n    let cminz = Infinity;\n    let cmaxx = -Infinity;\n    let cmaxy = -Infinity;\n    let cmaxz = -Infinity;\n    for(let i = offset * 6, end = (offset + count) * 6; i < end; i += 6){\n        const cx = triangleBounds[i + 0];\n        const hx = triangleBounds[i + 1];\n        const lx = cx - hx;\n        const rx = cx + hx;\n        if (lx < minx) minx = lx;\n        if (rx > maxx) maxx = rx;\n        if (cx < cminx) cminx = cx;\n        if (cx > cmaxx) cmaxx = cx;\n        const cy = triangleBounds[i + 2];\n        const hy = triangleBounds[i + 3];\n        const ly = cy - hy;\n        const ry = cy + hy;\n        if (ly < miny) miny = ly;\n        if (ry > maxy) maxy = ry;\n        if (cy < cminy) cminy = cy;\n        if (cy > cmaxy) cmaxy = cy;\n        const cz = triangleBounds[i + 4];\n        const hz = triangleBounds[i + 5];\n        const lz = cz - hz;\n        const rz = cz + hz;\n        if (lz < minz) minz = lz;\n        if (rz > maxz) maxz = rz;\n        if (cz < cminz) cminz = cz;\n        if (cz > cmaxz) cmaxz = cz;\n    }\n    target[0] = minx;\n    target[1] = miny;\n    target[2] = minz;\n    target[3] = maxx;\n    target[4] = maxy;\n    target[5] = maxz;\n    centroidTarget[0] = cminx;\n    centroidTarget[1] = cminy;\n    centroidTarget[2] = cminz;\n    centroidTarget[3] = cmaxx;\n    centroidTarget[4] = cmaxy;\n    centroidTarget[5] = cmaxz;\n}\n// precomputes the bounding box for each triangle; required for quickly calculating tree splits.\n// result is an array of size tris.length * 6 where triangle i maps to a\n// [x_center, x_delta, y_center, y_delta, z_center, z_delta] tuple starting at index i * 6,\n// representing the center and half-extent in each dimension of triangle i\nfunction computeTriangleBounds(geo, target = null, offset = null, count = null) {\n    const posAttr = geo.attributes.position;\n    const index = geo.index ? geo.index.array : null;\n    const triCount = (0,_geometryUtils_js__WEBPACK_IMPORTED_MODULE_0__.getTriCount)(geo);\n    const normalized = posAttr.normalized;\n    let triangleBounds;\n    if (target === null) {\n        triangleBounds = new Float32Array(triCount * 6 * 4);\n        offset = 0;\n        count = triCount;\n    } else {\n        triangleBounds = target;\n        offset = offset || 0;\n        count = count || triCount;\n    }\n    // used for non-normalized positions\n    const posArr = posAttr.array;\n    // support for an interleaved position buffer\n    const bufferOffset = posAttr.offset || 0;\n    let stride = 3;\n    if (posAttr.isInterleavedBufferAttribute) {\n        stride = posAttr.data.stride;\n    }\n    // used for normalized positions\n    const getters = [\n        \"getX\",\n        \"getY\",\n        \"getZ\"\n    ];\n    for(let tri = offset; tri < offset + count; tri++){\n        const tri3 = tri * 3;\n        const tri6 = tri * 6;\n        let ai = tri3 + 0;\n        let bi = tri3 + 1;\n        let ci = tri3 + 2;\n        if (index) {\n            ai = index[ai];\n            bi = index[bi];\n            ci = index[ci];\n        }\n        // we add the stride and offset here since we access the array directly\n        // below for the sake of performance\n        if (!normalized) {\n            ai = ai * stride + bufferOffset;\n            bi = bi * stride + bufferOffset;\n            ci = ci * stride + bufferOffset;\n        }\n        for(let el = 0; el < 3; el++){\n            let a, b, c;\n            if (normalized) {\n                a = posAttr[getters[el]](ai);\n                b = posAttr[getters[el]](bi);\n                c = posAttr[getters[el]](ci);\n            } else {\n                a = posArr[ai + el];\n                b = posArr[bi + el];\n                c = posArr[ci + el];\n            }\n            let min = a;\n            if (b < min) min = b;\n            if (c < min) min = c;\n            let max = a;\n            if (b > max) max = b;\n            if (c > max) max = c;\n            // Increase the bounds size by float32 epsilon to avoid precision errors when\n            // converting to 32 bit float. Scale the epsilon by the size of the numbers being\n            // worked with.\n            const halfExtents = (max - min) / 2;\n            const el2 = el * 2;\n            triangleBounds[tri6 + el2 + 0] = min + halfExtents;\n            triangleBounds[tri6 + el2 + 1] = halfExtents + (Math.abs(min) + halfExtents) * _Constants_js__WEBPACK_IMPORTED_MODULE_1__.FLOAT32_EPSILON;\n        }\n    }\n    return triangleBounds;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/three-mesh-bvh/src/core/build/computeBoundsUtils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/three-mesh-bvh/src/core/build/geometryUtils.js":
/*!*********************************************************************!*\
  !*** ./node_modules/three-mesh-bvh/src/core/build/geometryUtils.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ensureIndex: () => (/* binding */ ensureIndex),\n/* harmony export */   getFullGeometryRange: () => (/* binding */ getFullGeometryRange),\n/* harmony export */   getIndexArray: () => (/* binding */ getIndexArray),\n/* harmony export */   getRootIndexRanges: () => (/* binding */ getRootIndexRanges),\n/* harmony export */   getTriCount: () => (/* binding */ getTriCount),\n/* harmony export */   getVertexCount: () => (/* binding */ getVertexCount),\n/* harmony export */   hasGroupGaps: () => (/* binding */ hasGroupGaps)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n\nfunction getVertexCount(geo) {\n    return geo.index ? geo.index.count : geo.attributes.position.count;\n}\nfunction getTriCount(geo) {\n    return getVertexCount(geo) / 3;\n}\nfunction getIndexArray(vertexCount, BufferConstructor = ArrayBuffer) {\n    if (vertexCount > 65535) {\n        return new Uint32Array(new BufferConstructor(4 * vertexCount));\n    } else {\n        return new Uint16Array(new BufferConstructor(2 * vertexCount));\n    }\n}\n// ensures that an index is present on the geometry\nfunction ensureIndex(geo, options) {\n    if (!geo.index) {\n        const vertexCount = geo.attributes.position.count;\n        const BufferConstructor = options.useSharedArrayBuffer ? SharedArrayBuffer : ArrayBuffer;\n        const index = getIndexArray(vertexCount, BufferConstructor);\n        geo.setIndex(new three__WEBPACK_IMPORTED_MODULE_0__.BufferAttribute(index, 1));\n        for(let i = 0; i < vertexCount; i++){\n            index[i] = i;\n        }\n    }\n}\n// Computes the set of { offset, count } ranges which need independent BVH roots. Each\n// region in the geometry index that belongs to a different set of material groups requires\n// a separate BVH root, so that triangles indices belonging to one group never get swapped\n// with triangle indices belongs to another group. For example, if the groups were like this:\n//\n// [-------------------------------------------------------------]\n// |__________________|\n//   g0 = [0, 20]  |______________________||_____________________|\n//                      g1 = [16, 40]           g2 = [41, 60]\n//\n// we would need four BVH roots: [0, 15], [16, 20], [21, 40], [41, 60].\nfunction getFullGeometryRange(geo) {\n    const triCount = getTriCount(geo);\n    const drawRange = geo.drawRange;\n    const start = drawRange.start / 3;\n    const end = (drawRange.start + drawRange.count) / 3;\n    const offset = Math.max(0, start);\n    const count = Math.min(triCount, end) - offset;\n    return [\n        {\n            offset: Math.floor(offset),\n            count: Math.floor(count)\n        }\n    ];\n}\nfunction getRootIndexRanges(geo) {\n    if (!geo.groups || !geo.groups.length) {\n        return getFullGeometryRange(geo);\n    }\n    const ranges = [];\n    const rangeBoundaries = new Set();\n    const drawRange = geo.drawRange;\n    const drawRangeStart = drawRange.start / 3;\n    const drawRangeEnd = (drawRange.start + drawRange.count) / 3;\n    for (const group of geo.groups){\n        const groupStart = group.start / 3;\n        const groupEnd = (group.start + group.count) / 3;\n        rangeBoundaries.add(Math.max(drawRangeStart, groupStart));\n        rangeBoundaries.add(Math.min(drawRangeEnd, groupEnd));\n    }\n    // note that if you don't pass in a comparator, it sorts them lexicographically as strings :-(\n    const sortedBoundaries = Array.from(rangeBoundaries.values()).sort((a, b)=>a - b);\n    for(let i = 0; i < sortedBoundaries.length - 1; i++){\n        const start = sortedBoundaries[i];\n        const end = sortedBoundaries[i + 1];\n        ranges.push({\n            offset: Math.floor(start),\n            count: Math.floor(end - start)\n        });\n    }\n    return ranges;\n}\nfunction hasGroupGaps(geometry) {\n    if (geometry.groups.length === 0) {\n        return false;\n    }\n    const vertexCount = getTriCount(geometry);\n    const groups = getRootIndexRanges(geometry).sort((a, b)=>a.offset - b.offset);\n    const finalGroup = groups[groups.length - 1];\n    finalGroup.count = Math.min(vertexCount - finalGroup.offset, finalGroup.count);\n    let total = 0;\n    groups.forEach(({ count })=>total += count);\n    return vertexCount !== total;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/three-mesh-bvh/src/core/build/geometryUtils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/three-mesh-bvh/src/core/build/sortUtils.generated.js":
/*!***************************************************************************!*\
  !*** ./node_modules/three-mesh-bvh/src/core/build/sortUtils.generated.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   partition: () => (/* binding */ partition)\n/* harmony export */ });\n/********************************************************/ /* This file is generated from \"sortUtils.template.js\". */ /********************************************************/ // reorders `tris` such that for `count` elements after `offset`, elements on the left side of the split\n// will be on the left and elements on the right side of the split will be on the right. returns the index\n// of the first element on the right side, or offset + count if there are no elements on the right side.\nfunction partition(indirectBuffer, index, triangleBounds, offset, count, split) {\n    let left = offset;\n    let right = offset + count - 1;\n    const pos = split.pos;\n    const axisOffset = split.axis * 2;\n    // hoare partitioning, see e.g. https://en.wikipedia.org/wiki/Quicksort#Hoare_partition_scheme\n    while(true){\n        while(left <= right && triangleBounds[left * 6 + axisOffset] < pos){\n            left++;\n        }\n        // if a triangle center lies on the partition plane it is considered to be on the right side\n        while(left <= right && triangleBounds[right * 6 + axisOffset] >= pos){\n            right--;\n        }\n        if (left < right) {\n            // we need to swap all of the information associated with the triangles at index\n            // left and right; that's the verts in the geometry index, the bounds,\n            // and perhaps the SAH planes\n            for(let i = 0; i < 3; i++){\n                let t0 = index[left * 3 + i];\n                index[left * 3 + i] = index[right * 3 + i];\n                index[right * 3 + i] = t0;\n            }\n            // swap bounds\n            for(let i = 0; i < 6; i++){\n                let tb = triangleBounds[left * 6 + i];\n                triangleBounds[left * 6 + i] = triangleBounds[right * 6 + i];\n                triangleBounds[right * 6 + i] = tb;\n            }\n            left++;\n            right--;\n        } else {\n            return left;\n        }\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdGhyZWUtbWVzaC1idmgvc3JjL2NvcmUvYnVpbGQvc29ydFV0aWxzLmdlbmVyYXRlZC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsd0RBQXdELEdBQ3hELHdEQUF3RCxHQUN4RCx3REFBd0QsR0FDeEQsd0dBQXdHO0FBQ3hHLDBHQUEwRztBQUMxRyx3R0FBd0c7QUFDeEcsU0FBU0EsVUFBV0MsY0FBYyxFQUFFQyxLQUFLLEVBQUVDLGNBQWMsRUFBRUMsTUFBTSxFQUFFQyxLQUFLLEVBQUVDLEtBQUs7SUFFOUUsSUFBSUMsT0FBT0g7SUFDWCxJQUFJSSxRQUFRSixTQUFTQyxRQUFRO0lBQzdCLE1BQU1JLE1BQU1ILE1BQU1HLEdBQUc7SUFDckIsTUFBTUMsYUFBYUosTUFBTUssSUFBSSxHQUFHO0lBRWhDLDhGQUE4RjtJQUM5RixNQUFRLEtBQU87UUFFZCxNQUFRSixRQUFRQyxTQUFTTCxjQUFjLENBQUVJLE9BQU8sSUFBSUcsV0FBWSxHQUFHRCxJQUFNO1lBRXhFRjtRQUVEO1FBRUEsNEZBQTRGO1FBQzVGLE1BQVFBLFFBQVFDLFNBQVNMLGNBQWMsQ0FBRUssUUFBUSxJQUFJRSxXQUFZLElBQUlELElBQU07WUFFMUVEO1FBRUQ7UUFFQSxJQUFLRCxPQUFPQyxPQUFRO1lBRW5CLGdGQUFnRjtZQUNoRixzRUFBc0U7WUFDdEUsNkJBQTZCO1lBRTdCLElBQU0sSUFBSUksSUFBSSxHQUFHQSxJQUFJLEdBQUdBLElBQU87Z0JBRTlCLElBQUlDLEtBQUtYLEtBQUssQ0FBRUssT0FBTyxJQUFJSyxFQUFHO2dCQUM5QlYsS0FBSyxDQUFFSyxPQUFPLElBQUlLLEVBQUcsR0FBR1YsS0FBSyxDQUFFTSxRQUFRLElBQUlJLEVBQUc7Z0JBQzlDVixLQUFLLENBQUVNLFFBQVEsSUFBSUksRUFBRyxHQUFHQztZQUUxQjtZQUdBLGNBQWM7WUFDZCxJQUFNLElBQUlELElBQUksR0FBR0EsSUFBSSxHQUFHQSxJQUFPO2dCQUU5QixJQUFJRSxLQUFLWCxjQUFjLENBQUVJLE9BQU8sSUFBSUssRUFBRztnQkFDdkNULGNBQWMsQ0FBRUksT0FBTyxJQUFJSyxFQUFHLEdBQUdULGNBQWMsQ0FBRUssUUFBUSxJQUFJSSxFQUFHO2dCQUNoRVQsY0FBYyxDQUFFSyxRQUFRLElBQUlJLEVBQUcsR0FBR0U7WUFFbkM7WUFFQVA7WUFDQUM7UUFFRCxPQUFPO1lBRU4sT0FBT0Q7UUFFUjtJQUVEO0FBRUQ7QUFFcUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdGhyZWUtbWVzaC1idmgvc3JjL2NvcmUvYnVpbGQvc29ydFV0aWxzLmdlbmVyYXRlZC5qcz83ZGI1Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qIFRoaXMgZmlsZSBpcyBnZW5lcmF0ZWQgZnJvbSBcInNvcnRVdGlscy50ZW1wbGF0ZS5qc1wiLiAqL1xuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLy8gcmVvcmRlcnMgYHRyaXNgIHN1Y2ggdGhhdCBmb3IgYGNvdW50YCBlbGVtZW50cyBhZnRlciBgb2Zmc2V0YCwgZWxlbWVudHMgb24gdGhlIGxlZnQgc2lkZSBvZiB0aGUgc3BsaXRcbi8vIHdpbGwgYmUgb24gdGhlIGxlZnQgYW5kIGVsZW1lbnRzIG9uIHRoZSByaWdodCBzaWRlIG9mIHRoZSBzcGxpdCB3aWxsIGJlIG9uIHRoZSByaWdodC4gcmV0dXJucyB0aGUgaW5kZXhcbi8vIG9mIHRoZSBmaXJzdCBlbGVtZW50IG9uIHRoZSByaWdodCBzaWRlLCBvciBvZmZzZXQgKyBjb3VudCBpZiB0aGVyZSBhcmUgbm8gZWxlbWVudHMgb24gdGhlIHJpZ2h0IHNpZGUuXG5mdW5jdGlvbiBwYXJ0aXRpb24oIGluZGlyZWN0QnVmZmVyLCBpbmRleCwgdHJpYW5nbGVCb3VuZHMsIG9mZnNldCwgY291bnQsIHNwbGl0ICkge1xuXG5cdGxldCBsZWZ0ID0gb2Zmc2V0O1xuXHRsZXQgcmlnaHQgPSBvZmZzZXQgKyBjb3VudCAtIDE7XG5cdGNvbnN0IHBvcyA9IHNwbGl0LnBvcztcblx0Y29uc3QgYXhpc09mZnNldCA9IHNwbGl0LmF4aXMgKiAyO1xuXG5cdC8vIGhvYXJlIHBhcnRpdGlvbmluZywgc2VlIGUuZy4gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvUXVpY2tzb3J0I0hvYXJlX3BhcnRpdGlvbl9zY2hlbWVcblx0d2hpbGUgKCB0cnVlICkge1xuXG5cdFx0d2hpbGUgKCBsZWZ0IDw9IHJpZ2h0ICYmIHRyaWFuZ2xlQm91bmRzWyBsZWZ0ICogNiArIGF4aXNPZmZzZXQgXSA8IHBvcyApIHtcblxuXHRcdFx0bGVmdCArKztcblxuXHRcdH1cblxuXHRcdC8vIGlmIGEgdHJpYW5nbGUgY2VudGVyIGxpZXMgb24gdGhlIHBhcnRpdGlvbiBwbGFuZSBpdCBpcyBjb25zaWRlcmVkIHRvIGJlIG9uIHRoZSByaWdodCBzaWRlXG5cdFx0d2hpbGUgKCBsZWZ0IDw9IHJpZ2h0ICYmIHRyaWFuZ2xlQm91bmRzWyByaWdodCAqIDYgKyBheGlzT2Zmc2V0IF0gPj0gcG9zICkge1xuXG5cdFx0XHRyaWdodCAtLTtcblxuXHRcdH1cblxuXHRcdGlmICggbGVmdCA8IHJpZ2h0ICkge1xuXG5cdFx0XHQvLyB3ZSBuZWVkIHRvIHN3YXAgYWxsIG9mIHRoZSBpbmZvcm1hdGlvbiBhc3NvY2lhdGVkIHdpdGggdGhlIHRyaWFuZ2xlcyBhdCBpbmRleFxuXHRcdFx0Ly8gbGVmdCBhbmQgcmlnaHQ7IHRoYXQncyB0aGUgdmVydHMgaW4gdGhlIGdlb21ldHJ5IGluZGV4LCB0aGUgYm91bmRzLFxuXHRcdFx0Ly8gYW5kIHBlcmhhcHMgdGhlIFNBSCBwbGFuZXNcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgMzsgaSArKyApIHtcblxuXHRcdFx0XHRsZXQgdDAgPSBpbmRleFsgbGVmdCAqIDMgKyBpIF07XG5cdFx0XHRcdGluZGV4WyBsZWZ0ICogMyArIGkgXSA9IGluZGV4WyByaWdodCAqIDMgKyBpIF07XG5cdFx0XHRcdGluZGV4WyByaWdodCAqIDMgKyBpIF0gPSB0MDtcblxuXHRcdFx0fVxuXG5cblx0XHRcdC8vIHN3YXAgYm91bmRzXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCA2OyBpICsrICkge1xuXG5cdFx0XHRcdGxldCB0YiA9IHRyaWFuZ2xlQm91bmRzWyBsZWZ0ICogNiArIGkgXTtcblx0XHRcdFx0dHJpYW5nbGVCb3VuZHNbIGxlZnQgKiA2ICsgaSBdID0gdHJpYW5nbGVCb3VuZHNbIHJpZ2h0ICogNiArIGkgXTtcblx0XHRcdFx0dHJpYW5nbGVCb3VuZHNbIHJpZ2h0ICogNiArIGkgXSA9IHRiO1xuXG5cdFx0XHR9XG5cblx0XHRcdGxlZnQgKys7XG5cdFx0XHRyaWdodCAtLTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHJldHVybiBsZWZ0O1xuXG5cdFx0fVxuXG5cdH1cblxufVxuXG5leHBvcnQgeyBwYXJ0aXRpb24gfTtcbiJdLCJuYW1lcyI6WyJwYXJ0aXRpb24iLCJpbmRpcmVjdEJ1ZmZlciIsImluZGV4IiwidHJpYW5nbGVCb3VuZHMiLCJvZmZzZXQiLCJjb3VudCIsInNwbGl0IiwibGVmdCIsInJpZ2h0IiwicG9zIiwiYXhpc09mZnNldCIsImF4aXMiLCJpIiwidDAiLCJ0YiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/three-mesh-bvh/src/core/build/sortUtils.generated.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/three-mesh-bvh/src/core/build/sortUtils_indirect.generated.js":
/*!************************************************************************************!*\
  !*** ./node_modules/three-mesh-bvh/src/core/build/sortUtils_indirect.generated.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   partition_indirect: () => (/* binding */ partition_indirect)\n/* harmony export */ });\n/********************************************************/ /* This file is generated from \"sortUtils.template.js\". */ /********************************************************/ // reorders `tris` such that for `count` elements after `offset`, elements on the left side of the split\n// will be on the left and elements on the right side of the split will be on the right. returns the index\n// of the first element on the right side, or offset + count if there are no elements on the right side.\nfunction partition_indirect(indirectBuffer, index, triangleBounds, offset, count, split) {\n    let left = offset;\n    let right = offset + count - 1;\n    const pos = split.pos;\n    const axisOffset = split.axis * 2;\n    // hoare partitioning, see e.g. https://en.wikipedia.org/wiki/Quicksort#Hoare_partition_scheme\n    while(true){\n        while(left <= right && triangleBounds[left * 6 + axisOffset] < pos){\n            left++;\n        }\n        // if a triangle center lies on the partition plane it is considered to be on the right side\n        while(left <= right && triangleBounds[right * 6 + axisOffset] >= pos){\n            right--;\n        }\n        if (left < right) {\n            // we need to swap all of the information associated with the triangles at index\n            // left and right; that's the verts in the geometry index, the bounds,\n            // and perhaps the SAH planes\n            let t = indirectBuffer[left];\n            indirectBuffer[left] = indirectBuffer[right];\n            indirectBuffer[right] = t;\n            // swap bounds\n            for(let i = 0; i < 6; i++){\n                let tb = triangleBounds[left * 6 + i];\n                triangleBounds[left * 6 + i] = triangleBounds[right * 6 + i];\n                triangleBounds[right * 6 + i] = tb;\n            }\n            left++;\n            right--;\n        } else {\n            return left;\n        }\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdGhyZWUtbWVzaC1idmgvc3JjL2NvcmUvYnVpbGQvc29ydFV0aWxzX2luZGlyZWN0LmdlbmVyYXRlZC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsd0RBQXdELEdBQ3hELHdEQUF3RCxHQUN4RCx3REFBd0QsR0FDeEQsd0dBQXdHO0FBQ3hHLDBHQUEwRztBQUMxRyx3R0FBd0c7QUFDeEcsU0FBU0EsbUJBQW9CQyxjQUFjLEVBQUVDLEtBQUssRUFBRUMsY0FBYyxFQUFFQyxNQUFNLEVBQUVDLEtBQUssRUFBRUMsS0FBSztJQUV2RixJQUFJQyxPQUFPSDtJQUNYLElBQUlJLFFBQVFKLFNBQVNDLFFBQVE7SUFDN0IsTUFBTUksTUFBTUgsTUFBTUcsR0FBRztJQUNyQixNQUFNQyxhQUFhSixNQUFNSyxJQUFJLEdBQUc7SUFFaEMsOEZBQThGO0lBQzlGLE1BQVEsS0FBTztRQUVkLE1BQVFKLFFBQVFDLFNBQVNMLGNBQWMsQ0FBRUksT0FBTyxJQUFJRyxXQUFZLEdBQUdELElBQU07WUFFeEVGO1FBRUQ7UUFFQSw0RkFBNEY7UUFDNUYsTUFBUUEsUUFBUUMsU0FBU0wsY0FBYyxDQUFFSyxRQUFRLElBQUlFLFdBQVksSUFBSUQsSUFBTTtZQUUxRUQ7UUFFRDtRQUVBLElBQUtELE9BQU9DLE9BQVE7WUFFbkIsZ0ZBQWdGO1lBQ2hGLHNFQUFzRTtZQUN0RSw2QkFBNkI7WUFDN0IsSUFBSUksSUFBSVgsY0FBYyxDQUFFTSxLQUFNO1lBQzlCTixjQUFjLENBQUVNLEtBQU0sR0FBR04sY0FBYyxDQUFFTyxNQUFPO1lBQ2hEUCxjQUFjLENBQUVPLE1BQU8sR0FBR0k7WUFHMUIsY0FBYztZQUNkLElBQU0sSUFBSUMsSUFBSSxHQUFHQSxJQUFJLEdBQUdBLElBQU87Z0JBRTlCLElBQUlDLEtBQUtYLGNBQWMsQ0FBRUksT0FBTyxJQUFJTSxFQUFHO2dCQUN2Q1YsY0FBYyxDQUFFSSxPQUFPLElBQUlNLEVBQUcsR0FBR1YsY0FBYyxDQUFFSyxRQUFRLElBQUlLLEVBQUc7Z0JBQ2hFVixjQUFjLENBQUVLLFFBQVEsSUFBSUssRUFBRyxHQUFHQztZQUVuQztZQUVBUDtZQUNBQztRQUVELE9BQU87WUFFTixPQUFPRDtRQUVSO0lBRUQ7QUFFRDtBQUU4QiIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90aHJlZS1tZXNoLWJ2aC9zcmMvY29yZS9idWlsZC9zb3J0VXRpbHNfaW5kaXJlY3QuZ2VuZXJhdGVkLmpzPzk3YjgiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyogVGhpcyBmaWxlIGlzIGdlbmVyYXRlZCBmcm9tIFwic29ydFV0aWxzLnRlbXBsYXRlLmpzXCIuICovXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vLyByZW9yZGVycyBgdHJpc2Agc3VjaCB0aGF0IGZvciBgY291bnRgIGVsZW1lbnRzIGFmdGVyIGBvZmZzZXRgLCBlbGVtZW50cyBvbiB0aGUgbGVmdCBzaWRlIG9mIHRoZSBzcGxpdFxuLy8gd2lsbCBiZSBvbiB0aGUgbGVmdCBhbmQgZWxlbWVudHMgb24gdGhlIHJpZ2h0IHNpZGUgb2YgdGhlIHNwbGl0IHdpbGwgYmUgb24gdGhlIHJpZ2h0LiByZXR1cm5zIHRoZSBpbmRleFxuLy8gb2YgdGhlIGZpcnN0IGVsZW1lbnQgb24gdGhlIHJpZ2h0IHNpZGUsIG9yIG9mZnNldCArIGNvdW50IGlmIHRoZXJlIGFyZSBubyBlbGVtZW50cyBvbiB0aGUgcmlnaHQgc2lkZS5cbmZ1bmN0aW9uIHBhcnRpdGlvbl9pbmRpcmVjdCggaW5kaXJlY3RCdWZmZXIsIGluZGV4LCB0cmlhbmdsZUJvdW5kcywgb2Zmc2V0LCBjb3VudCwgc3BsaXQgKSB7XG5cblx0bGV0IGxlZnQgPSBvZmZzZXQ7XG5cdGxldCByaWdodCA9IG9mZnNldCArIGNvdW50IC0gMTtcblx0Y29uc3QgcG9zID0gc3BsaXQucG9zO1xuXHRjb25zdCBheGlzT2Zmc2V0ID0gc3BsaXQuYXhpcyAqIDI7XG5cblx0Ly8gaG9hcmUgcGFydGl0aW9uaW5nLCBzZWUgZS5nLiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9RdWlja3NvcnQjSG9hcmVfcGFydGl0aW9uX3NjaGVtZVxuXHR3aGlsZSAoIHRydWUgKSB7XG5cblx0XHR3aGlsZSAoIGxlZnQgPD0gcmlnaHQgJiYgdHJpYW5nbGVCb3VuZHNbIGxlZnQgKiA2ICsgYXhpc09mZnNldCBdIDwgcG9zICkge1xuXG5cdFx0XHRsZWZ0ICsrO1xuXG5cdFx0fVxuXG5cdFx0Ly8gaWYgYSB0cmlhbmdsZSBjZW50ZXIgbGllcyBvbiB0aGUgcGFydGl0aW9uIHBsYW5lIGl0IGlzIGNvbnNpZGVyZWQgdG8gYmUgb24gdGhlIHJpZ2h0IHNpZGVcblx0XHR3aGlsZSAoIGxlZnQgPD0gcmlnaHQgJiYgdHJpYW5nbGVCb3VuZHNbIHJpZ2h0ICogNiArIGF4aXNPZmZzZXQgXSA+PSBwb3MgKSB7XG5cblx0XHRcdHJpZ2h0IC0tO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBsZWZ0IDwgcmlnaHQgKSB7XG5cblx0XHRcdC8vIHdlIG5lZWQgdG8gc3dhcCBhbGwgb2YgdGhlIGluZm9ybWF0aW9uIGFzc29jaWF0ZWQgd2l0aCB0aGUgdHJpYW5nbGVzIGF0IGluZGV4XG5cdFx0XHQvLyBsZWZ0IGFuZCByaWdodDsgdGhhdCdzIHRoZSB2ZXJ0cyBpbiB0aGUgZ2VvbWV0cnkgaW5kZXgsIHRoZSBib3VuZHMsXG5cdFx0XHQvLyBhbmQgcGVyaGFwcyB0aGUgU0FIIHBsYW5lc1xuXHRcdFx0bGV0IHQgPSBpbmRpcmVjdEJ1ZmZlclsgbGVmdCBdO1xuXHRcdFx0aW5kaXJlY3RCdWZmZXJbIGxlZnQgXSA9IGluZGlyZWN0QnVmZmVyWyByaWdodCBdO1xuXHRcdFx0aW5kaXJlY3RCdWZmZXJbIHJpZ2h0IF0gPSB0O1xuXG5cblx0XHRcdC8vIHN3YXAgYm91bmRzXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCA2OyBpICsrICkge1xuXG5cdFx0XHRcdGxldCB0YiA9IHRyaWFuZ2xlQm91bmRzWyBsZWZ0ICogNiArIGkgXTtcblx0XHRcdFx0dHJpYW5nbGVCb3VuZHNbIGxlZnQgKiA2ICsgaSBdID0gdHJpYW5nbGVCb3VuZHNbIHJpZ2h0ICogNiArIGkgXTtcblx0XHRcdFx0dHJpYW5nbGVCb3VuZHNbIHJpZ2h0ICogNiArIGkgXSA9IHRiO1xuXG5cdFx0XHR9XG5cblx0XHRcdGxlZnQgKys7XG5cdFx0XHRyaWdodCAtLTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHJldHVybiBsZWZ0O1xuXG5cdFx0fVxuXG5cdH1cblxufVxuXG5leHBvcnQgeyBwYXJ0aXRpb25faW5kaXJlY3QgfTtcbiJdLCJuYW1lcyI6WyJwYXJ0aXRpb25faW5kaXJlY3QiLCJpbmRpcmVjdEJ1ZmZlciIsImluZGV4IiwidHJpYW5nbGVCb3VuZHMiLCJvZmZzZXQiLCJjb3VudCIsInNwbGl0IiwibGVmdCIsInJpZ2h0IiwicG9zIiwiYXhpc09mZnNldCIsImF4aXMiLCJ0IiwiaSIsInRiIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/three-mesh-bvh/src/core/build/sortUtils_indirect.generated.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/three-mesh-bvh/src/core/build/splitUtils.js":
/*!******************************************************************!*\
  !*** ./node_modules/three-mesh-bvh/src/core/build/splitUtils.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getOptimalSplit: () => (/* binding */ getOptimalSplit)\n/* harmony export */ });\n/* harmony import */ var _utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/ArrayBoxUtilities.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/utils/ArrayBoxUtilities.js\");\n/* harmony import */ var _Constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Constants.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/core/Constants.js\");\n\n\nconst BIN_COUNT = 32;\nconst binsSort = (a, b)=>a.candidate - b.candidate;\nconst sahBins = new Array(BIN_COUNT).fill().map(()=>{\n    return {\n        count: 0,\n        bounds: new Float32Array(6),\n        rightCacheBounds: new Float32Array(6),\n        leftCacheBounds: new Float32Array(6),\n        candidate: 0\n    };\n});\nconst leftBounds = new Float32Array(6);\nfunction getOptimalSplit(nodeBoundingData, centroidBoundingData, triangleBounds, offset, count, strategy) {\n    let axis = -1;\n    let pos = 0;\n    // Center\n    if (strategy === _Constants_js__WEBPACK_IMPORTED_MODULE_0__.CENTER) {\n        axis = (0,_utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_1__.getLongestEdgeIndex)(centroidBoundingData);\n        if (axis !== -1) {\n            pos = (centroidBoundingData[axis] + centroidBoundingData[axis + 3]) / 2;\n        }\n    } else if (strategy === _Constants_js__WEBPACK_IMPORTED_MODULE_0__.AVERAGE) {\n        axis = (0,_utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_1__.getLongestEdgeIndex)(nodeBoundingData);\n        if (axis !== -1) {\n            pos = getAverage(triangleBounds, offset, count, axis);\n        }\n    } else if (strategy === _Constants_js__WEBPACK_IMPORTED_MODULE_0__.SAH) {\n        const rootSurfaceArea = (0,_utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_1__.computeSurfaceArea)(nodeBoundingData);\n        let bestCost = _Constants_js__WEBPACK_IMPORTED_MODULE_0__.TRIANGLE_INTERSECT_COST * count;\n        // iterate over all axes\n        const cStart = offset * 6;\n        const cEnd = (offset + count) * 6;\n        for(let a = 0; a < 3; a++){\n            const axisLeft = centroidBoundingData[a];\n            const axisRight = centroidBoundingData[a + 3];\n            const axisLength = axisRight - axisLeft;\n            const binWidth = axisLength / BIN_COUNT;\n            // If we have fewer triangles than we're planning to split then just check all\n            // the triangle positions because it will be faster.\n            if (count < BIN_COUNT / 4) {\n                // initialize the bin candidates\n                const truncatedBins = [\n                    ...sahBins\n                ];\n                truncatedBins.length = count;\n                // set the candidates\n                let b = 0;\n                for(let c = cStart; c < cEnd; c += 6, b++){\n                    const bin = truncatedBins[b];\n                    bin.candidate = triangleBounds[c + 2 * a];\n                    bin.count = 0;\n                    const { bounds, leftCacheBounds, rightCacheBounds } = bin;\n                    for(let d = 0; d < 3; d++){\n                        rightCacheBounds[d] = Infinity;\n                        rightCacheBounds[d + 3] = -Infinity;\n                        leftCacheBounds[d] = Infinity;\n                        leftCacheBounds[d + 3] = -Infinity;\n                        bounds[d] = Infinity;\n                        bounds[d + 3] = -Infinity;\n                    }\n                    (0,_utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_1__.expandByTriangleBounds)(c, triangleBounds, bounds);\n                }\n                truncatedBins.sort(binsSort);\n                // remove redundant splits\n                let splitCount = count;\n                for(let bi = 0; bi < splitCount; bi++){\n                    const bin = truncatedBins[bi];\n                    while(bi + 1 < splitCount && truncatedBins[bi + 1].candidate === bin.candidate){\n                        truncatedBins.splice(bi + 1, 1);\n                        splitCount--;\n                    }\n                }\n                // find the appropriate bin for each triangle and expand the bounds.\n                for(let c = cStart; c < cEnd; c += 6){\n                    const center = triangleBounds[c + 2 * a];\n                    for(let bi = 0; bi < splitCount; bi++){\n                        const bin = truncatedBins[bi];\n                        if (center >= bin.candidate) {\n                            (0,_utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_1__.expandByTriangleBounds)(c, triangleBounds, bin.rightCacheBounds);\n                        } else {\n                            (0,_utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_1__.expandByTriangleBounds)(c, triangleBounds, bin.leftCacheBounds);\n                            bin.count++;\n                        }\n                    }\n                }\n                // expand all the bounds\n                for(let bi = 0; bi < splitCount; bi++){\n                    const bin = truncatedBins[bi];\n                    const leftCount = bin.count;\n                    const rightCount = count - bin.count;\n                    // check the cost of this split\n                    const leftBounds = bin.leftCacheBounds;\n                    const rightBounds = bin.rightCacheBounds;\n                    let leftProb = 0;\n                    if (leftCount !== 0) {\n                        leftProb = (0,_utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_1__.computeSurfaceArea)(leftBounds) / rootSurfaceArea;\n                    }\n                    let rightProb = 0;\n                    if (rightCount !== 0) {\n                        rightProb = (0,_utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_1__.computeSurfaceArea)(rightBounds) / rootSurfaceArea;\n                    }\n                    const cost = _Constants_js__WEBPACK_IMPORTED_MODULE_0__.TRAVERSAL_COST + _Constants_js__WEBPACK_IMPORTED_MODULE_0__.TRIANGLE_INTERSECT_COST * (leftProb * leftCount + rightProb * rightCount);\n                    if (cost < bestCost) {\n                        axis = a;\n                        bestCost = cost;\n                        pos = bin.candidate;\n                    }\n                }\n            } else {\n                // reset the bins\n                for(let i = 0; i < BIN_COUNT; i++){\n                    const bin = sahBins[i];\n                    bin.count = 0;\n                    bin.candidate = axisLeft + binWidth + i * binWidth;\n                    const bounds = bin.bounds;\n                    for(let d = 0; d < 3; d++){\n                        bounds[d] = Infinity;\n                        bounds[d + 3] = -Infinity;\n                    }\n                }\n                // iterate over all center positions\n                for(let c = cStart; c < cEnd; c += 6){\n                    const triCenter = triangleBounds[c + 2 * a];\n                    const relativeCenter = triCenter - axisLeft;\n                    // in the partition function if the centroid lies on the split plane then it is\n                    // considered to be on the right side of the split\n                    let binIndex = ~~(relativeCenter / binWidth);\n                    if (binIndex >= BIN_COUNT) binIndex = BIN_COUNT - 1;\n                    const bin = sahBins[binIndex];\n                    bin.count++;\n                    (0,_utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_1__.expandByTriangleBounds)(c, triangleBounds, bin.bounds);\n                }\n                // cache the unioned bounds from right to left so we don't have to regenerate them each time\n                const lastBin = sahBins[BIN_COUNT - 1];\n                (0,_utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_1__.copyBounds)(lastBin.bounds, lastBin.rightCacheBounds);\n                for(let i = BIN_COUNT - 2; i >= 0; i--){\n                    const bin = sahBins[i];\n                    const nextBin = sahBins[i + 1];\n                    (0,_utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_1__.unionBounds)(bin.bounds, nextBin.rightCacheBounds, bin.rightCacheBounds);\n                }\n                let leftCount = 0;\n                for(let i = 0; i < BIN_COUNT - 1; i++){\n                    const bin = sahBins[i];\n                    const binCount = bin.count;\n                    const bounds = bin.bounds;\n                    const nextBin = sahBins[i + 1];\n                    const rightBounds = nextBin.rightCacheBounds;\n                    // don't do anything with the bounds if the new bounds have no triangles\n                    if (binCount !== 0) {\n                        if (leftCount === 0) {\n                            (0,_utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_1__.copyBounds)(bounds, leftBounds);\n                        } else {\n                            (0,_utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_1__.unionBounds)(bounds, leftBounds, leftBounds);\n                        }\n                    }\n                    leftCount += binCount;\n                    // check the cost of this split\n                    let leftProb = 0;\n                    let rightProb = 0;\n                    if (leftCount !== 0) {\n                        leftProb = (0,_utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_1__.computeSurfaceArea)(leftBounds) / rootSurfaceArea;\n                    }\n                    const rightCount = count - leftCount;\n                    if (rightCount !== 0) {\n                        rightProb = (0,_utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_1__.computeSurfaceArea)(rightBounds) / rootSurfaceArea;\n                    }\n                    const cost = _Constants_js__WEBPACK_IMPORTED_MODULE_0__.TRAVERSAL_COST + _Constants_js__WEBPACK_IMPORTED_MODULE_0__.TRIANGLE_INTERSECT_COST * (leftProb * leftCount + rightProb * rightCount);\n                    if (cost < bestCost) {\n                        axis = a;\n                        bestCost = cost;\n                        pos = bin.candidate;\n                    }\n                }\n            }\n        }\n    } else {\n        console.warn(`MeshBVH: Invalid build strategy value ${strategy} used.`);\n    }\n    return {\n        axis,\n        pos\n    };\n}\n// returns the average coordinate on the specified axis of the all the provided triangles\nfunction getAverage(triangleBounds, offset, count, axis) {\n    let avg = 0;\n    for(let i = offset, end = offset + count; i < end; i++){\n        avg += triangleBounds[i * 6 + axis * 2];\n    }\n    return avg / count;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/three-mesh-bvh/src/core/build/splitUtils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/three-mesh-bvh/src/core/cast/bvhcast.js":
/*!**************************************************************!*\
  !*** ./node_modules/three-mesh-bvh/src/core/cast/bvhcast.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bvhcast: () => (/* binding */ bvhcast)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var _utils_BufferStack_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/BufferStack.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/core/utils/BufferStack.js\");\n/* harmony import */ var _utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/nodeBufferUtils.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/core/utils/nodeBufferUtils.js\");\n/* harmony import */ var _utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/ArrayBoxUtilities.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/utils/ArrayBoxUtilities.js\");\n/* harmony import */ var _utils_PrimitivePool_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/PrimitivePool.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/utils/PrimitivePool.js\");\n\n\n\n\n\nconst _bufferStack1 = new _utils_BufferStack_js__WEBPACK_IMPORTED_MODULE_0__.BufferStack.constructor();\nconst _bufferStack2 = new _utils_BufferStack_js__WEBPACK_IMPORTED_MODULE_0__.BufferStack.constructor();\nconst _boxPool = new _utils_PrimitivePool_js__WEBPACK_IMPORTED_MODULE_1__.PrimitivePool(()=>new three__WEBPACK_IMPORTED_MODULE_2__.Box3());\nconst _leftBox1 = new three__WEBPACK_IMPORTED_MODULE_2__.Box3();\nconst _rightBox1 = new three__WEBPACK_IMPORTED_MODULE_2__.Box3();\nconst _leftBox2 = new three__WEBPACK_IMPORTED_MODULE_2__.Box3();\nconst _rightBox2 = new three__WEBPACK_IMPORTED_MODULE_2__.Box3();\nlet _active = false;\nfunction bvhcast(bvh, otherBvh, matrixToLocal, intersectsRanges) {\n    if (_active) {\n        throw new Error(\"MeshBVH: Recursive calls to bvhcast not supported.\");\n    }\n    _active = true;\n    const roots = bvh._roots;\n    const otherRoots = otherBvh._roots;\n    let result;\n    let offset1 = 0;\n    let offset2 = 0;\n    const invMat = new three__WEBPACK_IMPORTED_MODULE_2__.Matrix4().copy(matrixToLocal).invert();\n    // iterate over the first set of roots\n    for(let i = 0, il = roots.length; i < il; i++){\n        _bufferStack1.setBuffer(roots[i]);\n        offset2 = 0;\n        // prep the initial root box\n        const localBox = _boxPool.getPrimitive();\n        (0,_utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_3__.arrayToBox)((0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_4__.BOUNDING_DATA_INDEX)(0), _bufferStack1.float32Array, localBox);\n        localBox.applyMatrix4(invMat);\n        // iterate over the second set of roots\n        for(let j = 0, jl = otherRoots.length; j < jl; j++){\n            _bufferStack2.setBuffer(otherRoots[i]);\n            result = _traverse(0, 0, matrixToLocal, invMat, intersectsRanges, offset1, offset2, 0, 0, localBox);\n            _bufferStack2.clearBuffer();\n            offset2 += otherRoots[j].length;\n            if (result) {\n                break;\n            }\n        }\n        // release stack info\n        _boxPool.releasePrimitive(localBox);\n        _bufferStack1.clearBuffer();\n        offset1 += roots[i].length;\n        if (result) {\n            break;\n        }\n    }\n    _active = false;\n    return result;\n}\nfunction _traverse(node1Index32, node2Index32, matrix2to1, matrix1to2, intersectsRangesFunc, // offsets for ids\nnode1IndexByteOffset = 0, node2IndexByteOffset = 0, // tree depth\ndepth1 = 0, depth2 = 0, currBox = null, reversed = false) {\n    // get the buffer stacks associated with the current indices\n    let bufferStack1, bufferStack2;\n    if (reversed) {\n        bufferStack1 = _bufferStack2;\n        bufferStack2 = _bufferStack1;\n    } else {\n        bufferStack1 = _bufferStack1;\n        bufferStack2 = _bufferStack2;\n    }\n    // get the local instances of the typed buffers\n    const float32Array1 = bufferStack1.float32Array, uint32Array1 = bufferStack1.uint32Array, uint16Array1 = bufferStack1.uint16Array, float32Array2 = bufferStack2.float32Array, uint32Array2 = bufferStack2.uint32Array, uint16Array2 = bufferStack2.uint16Array;\n    const node1Index16 = node1Index32 * 2;\n    const node2Index16 = node2Index32 * 2;\n    const isLeaf1 = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_4__.IS_LEAF)(node1Index16, uint16Array1);\n    const isLeaf2 = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_4__.IS_LEAF)(node2Index16, uint16Array2);\n    let result = false;\n    if (isLeaf2 && isLeaf1) {\n        // if both bounds are leaf nodes then fire the callback if the boxes intersect\n        if (reversed) {\n            result = intersectsRangesFunc((0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_4__.OFFSET)(node2Index32, uint32Array2), (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_4__.COUNT)(node2Index32 * 2, uint16Array2), (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_4__.OFFSET)(node1Index32, uint32Array1), (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_4__.COUNT)(node1Index32 * 2, uint16Array1), depth2, node2IndexByteOffset + node2Index32, depth1, node1IndexByteOffset + node1Index32);\n        } else {\n            result = intersectsRangesFunc((0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_4__.OFFSET)(node1Index32, uint32Array1), (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_4__.COUNT)(node1Index32 * 2, uint16Array1), (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_4__.OFFSET)(node2Index32, uint32Array2), (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_4__.COUNT)(node2Index32 * 2, uint16Array2), depth1, node1IndexByteOffset + node1Index32, depth2, node2IndexByteOffset + node2Index32);\n        }\n    } else if (isLeaf2) {\n        // SWAP\n        // If we've traversed to the leaf node on the other bvh then we need to swap over\n        // to traverse down the first one\n        // get the new box to use\n        const newBox = _boxPool.getPrimitive();\n        (0,_utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_3__.arrayToBox)((0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_4__.BOUNDING_DATA_INDEX)(node2Index32), float32Array2, newBox);\n        newBox.applyMatrix4(matrix2to1);\n        // get the child bounds to check before traversal\n        const cl1 = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_4__.LEFT_NODE)(node1Index32);\n        const cr1 = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_4__.RIGHT_NODE)(node1Index32, uint32Array1);\n        (0,_utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_3__.arrayToBox)((0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_4__.BOUNDING_DATA_INDEX)(cl1), float32Array1, _leftBox1);\n        (0,_utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_3__.arrayToBox)((0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_4__.BOUNDING_DATA_INDEX)(cr1), float32Array1, _rightBox1);\n        // precompute the intersections otherwise the global boxes will be modified during traversal\n        const intersectCl1 = newBox.intersectsBox(_leftBox1);\n        const intersectCr1 = newBox.intersectsBox(_rightBox1);\n        result = intersectCl1 && _traverse(node2Index32, cl1, matrix1to2, matrix2to1, intersectsRangesFunc, node2IndexByteOffset, node1IndexByteOffset, depth2, depth1 + 1, newBox, !reversed) || intersectCr1 && _traverse(node2Index32, cr1, matrix1to2, matrix2to1, intersectsRangesFunc, node2IndexByteOffset, node1IndexByteOffset, depth2, depth1 + 1, newBox, !reversed);\n        _boxPool.releasePrimitive(newBox);\n    } else {\n        // if neither are leaves then we should swap if one of the children does not\n        // intersect with the current bounds\n        // get the child bounds to check\n        const cl2 = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_4__.LEFT_NODE)(node2Index32);\n        const cr2 = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_4__.RIGHT_NODE)(node2Index32, uint32Array2);\n        (0,_utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_3__.arrayToBox)((0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_4__.BOUNDING_DATA_INDEX)(cl2), float32Array2, _leftBox2);\n        (0,_utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_3__.arrayToBox)((0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_4__.BOUNDING_DATA_INDEX)(cr2), float32Array2, _rightBox2);\n        const leftIntersects = currBox.intersectsBox(_leftBox2);\n        const rightIntersects = currBox.intersectsBox(_rightBox2);\n        if (leftIntersects && rightIntersects) {\n            // continue to traverse both children if they both intersect\n            result = _traverse(node1Index32, cl2, matrix2to1, matrix1to2, intersectsRangesFunc, node1IndexByteOffset, node2IndexByteOffset, depth1, depth2 + 1, currBox, reversed) || _traverse(node1Index32, cr2, matrix2to1, matrix1to2, intersectsRangesFunc, node1IndexByteOffset, node2IndexByteOffset, depth1, depth2 + 1, currBox, reversed);\n        } else if (leftIntersects) {\n            if (isLeaf1) {\n                // if the current box is a leaf then just continue\n                result = _traverse(node1Index32, cl2, matrix2to1, matrix1to2, intersectsRangesFunc, node1IndexByteOffset, node2IndexByteOffset, depth1, depth2 + 1, currBox, reversed);\n            } else {\n                // SWAP\n                // if only one box intersects then we have to swap to the other bvh to continue\n                const newBox = _boxPool.getPrimitive();\n                newBox.copy(_leftBox2).applyMatrix4(matrix2to1);\n                const cl1 = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_4__.LEFT_NODE)(node1Index32);\n                const cr1 = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_4__.RIGHT_NODE)(node1Index32, uint32Array1);\n                (0,_utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_3__.arrayToBox)((0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_4__.BOUNDING_DATA_INDEX)(cl1), float32Array1, _leftBox1);\n                (0,_utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_3__.arrayToBox)((0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_4__.BOUNDING_DATA_INDEX)(cr1), float32Array1, _rightBox1);\n                // precompute the intersections otherwise the global boxes will be modified during traversal\n                const intersectCl1 = newBox.intersectsBox(_leftBox1);\n                const intersectCr1 = newBox.intersectsBox(_rightBox1);\n                result = intersectCl1 && _traverse(cl2, cl1, matrix1to2, matrix2to1, intersectsRangesFunc, node2IndexByteOffset, node1IndexByteOffset, depth2, depth1 + 1, newBox, !reversed) || intersectCr1 && _traverse(cl2, cr1, matrix1to2, matrix2to1, intersectsRangesFunc, node2IndexByteOffset, node1IndexByteOffset, depth2, depth1 + 1, newBox, !reversed);\n                _boxPool.releasePrimitive(newBox);\n            }\n        } else if (rightIntersects) {\n            if (isLeaf1) {\n                // if the current box is a leaf then just continue\n                result = _traverse(node1Index32, cr2, matrix2to1, matrix1to2, intersectsRangesFunc, node1IndexByteOffset, node2IndexByteOffset, depth1, depth2 + 1, currBox, reversed);\n            } else {\n                // SWAP\n                // if only one box intersects then we have to swap to the other bvh to continue\n                const newBox = _boxPool.getPrimitive();\n                newBox.copy(_rightBox2).applyMatrix4(matrix2to1);\n                const cl1 = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_4__.LEFT_NODE)(node1Index32);\n                const cr1 = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_4__.RIGHT_NODE)(node1Index32, uint32Array1);\n                (0,_utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_3__.arrayToBox)((0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_4__.BOUNDING_DATA_INDEX)(cl1), float32Array1, _leftBox1);\n                (0,_utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_3__.arrayToBox)((0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_4__.BOUNDING_DATA_INDEX)(cr1), float32Array1, _rightBox1);\n                // precompute the intersections otherwise the global boxes will be modified during traversal\n                const intersectCl1 = newBox.intersectsBox(_leftBox1);\n                const intersectCr1 = newBox.intersectsBox(_rightBox1);\n                result = intersectCl1 && _traverse(cr2, cl1, matrix1to2, matrix2to1, intersectsRangesFunc, node2IndexByteOffset, node1IndexByteOffset, depth2, depth1 + 1, newBox, !reversed) || intersectCr1 && _traverse(cr2, cr1, matrix1to2, matrix2to1, intersectsRangesFunc, node2IndexByteOffset, node1IndexByteOffset, depth2, depth1 + 1, newBox, !reversed);\n                _boxPool.releasePrimitive(newBox);\n            }\n        }\n    }\n    return result;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/three-mesh-bvh/src/core/cast/bvhcast.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/three-mesh-bvh/src/core/cast/closestPointToGeometry.generated.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/three-mesh-bvh/src/core/cast/closestPointToGeometry.generated.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   closestPointToGeometry: () => (/* binding */ closestPointToGeometry)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var _math_OrientedBox_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../math/OrientedBox.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/math/OrientedBox.js\");\n/* harmony import */ var _utils_TriangleUtilities_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/TriangleUtilities.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/utils/TriangleUtilities.js\");\n/* harmony import */ var _build_geometryUtils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../build/geometryUtils.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/core/build/geometryUtils.js\");\n/* harmony import */ var _utils_ExtendedTrianglePool_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/ExtendedTrianglePool.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/utils/ExtendedTrianglePool.js\");\n\n\n\n\n\n/*********************************************************************/ /* This file is generated from \"closestPointToGeometry.template.js\". */ /*********************************************************************/ const tempMatrix = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Matrix4();\nconst obb = /* @__PURE__ */ new _math_OrientedBox_js__WEBPACK_IMPORTED_MODULE_1__.OrientedBox();\nconst obb2 = /* @__PURE__ */ new _math_OrientedBox_js__WEBPACK_IMPORTED_MODULE_1__.OrientedBox();\nconst temp1 = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\nconst temp2 = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\nconst temp3 = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\nconst temp4 = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\nfunction closestPointToGeometry(bvh, otherGeometry, geometryToBvh, target1 = {}, target2 = {}, minThreshold = 0, maxThreshold = Infinity) {\n    if (!otherGeometry.boundingBox) {\n        otherGeometry.computeBoundingBox();\n    }\n    obb.set(otherGeometry.boundingBox.min, otherGeometry.boundingBox.max, geometryToBvh);\n    obb.needsUpdate = true;\n    const geometry = bvh.geometry;\n    const pos = geometry.attributes.position;\n    const index = geometry.index;\n    const otherPos = otherGeometry.attributes.position;\n    const otherIndex = otherGeometry.index;\n    const triangle = _utils_ExtendedTrianglePool_js__WEBPACK_IMPORTED_MODULE_2__.ExtendedTrianglePool.getPrimitive();\n    const triangle2 = _utils_ExtendedTrianglePool_js__WEBPACK_IMPORTED_MODULE_2__.ExtendedTrianglePool.getPrimitive();\n    let tempTarget1 = temp1;\n    let tempTargetDest1 = temp2;\n    let tempTarget2 = null;\n    let tempTargetDest2 = null;\n    if (target2) {\n        tempTarget2 = temp3;\n        tempTargetDest2 = temp4;\n    }\n    let closestDistance = Infinity;\n    let closestDistanceTriIndex = null;\n    let closestDistanceOtherTriIndex = null;\n    tempMatrix.copy(geometryToBvh).invert();\n    obb2.matrix.copy(tempMatrix);\n    bvh.shapecast({\n        boundsTraverseOrder: (box)=>{\n            return obb.distanceToBox(box);\n        },\n        intersectsBounds: (box, isLeaf, score)=>{\n            if (score < closestDistance && score < maxThreshold) {\n                // if we know the triangles of this bounds will be intersected next then\n                // save the bounds to use during triangle checks.\n                if (isLeaf) {\n                    obb2.min.copy(box.min);\n                    obb2.max.copy(box.max);\n                    obb2.needsUpdate = true;\n                }\n                return true;\n            }\n            return false;\n        },\n        intersectsRange: (offset, count)=>{\n            if (otherGeometry.boundsTree) {\n                // if the other geometry has a bvh then use the accelerated path where we use shapecast to find\n                // the closest bounds in the other geometry to check.\n                const otherBvh = otherGeometry.boundsTree;\n                return otherBvh.shapecast({\n                    boundsTraverseOrder: (box)=>{\n                        return obb2.distanceToBox(box);\n                    },\n                    intersectsBounds: (box, isLeaf, score)=>{\n                        return score < closestDistance && score < maxThreshold;\n                    },\n                    intersectsRange: (otherOffset, otherCount)=>{\n                        for(let i2 = otherOffset, l2 = otherOffset + otherCount; i2 < l2; i2++){\n                            (0,_utils_TriangleUtilities_js__WEBPACK_IMPORTED_MODULE_3__.setTriangle)(triangle2, 3 * i2, otherIndex, otherPos);\n                            triangle2.a.applyMatrix4(geometryToBvh);\n                            triangle2.b.applyMatrix4(geometryToBvh);\n                            triangle2.c.applyMatrix4(geometryToBvh);\n                            triangle2.needsUpdate = true;\n                            for(let i = offset, l = offset + count; i < l; i++){\n                                (0,_utils_TriangleUtilities_js__WEBPACK_IMPORTED_MODULE_3__.setTriangle)(triangle, 3 * i, index, pos);\n                                triangle.needsUpdate = true;\n                                const dist = triangle.distanceToTriangle(triangle2, tempTarget1, tempTarget2);\n                                if (dist < closestDistance) {\n                                    tempTargetDest1.copy(tempTarget1);\n                                    if (tempTargetDest2) {\n                                        tempTargetDest2.copy(tempTarget2);\n                                    }\n                                    closestDistance = dist;\n                                    closestDistanceTriIndex = i;\n                                    closestDistanceOtherTriIndex = i2;\n                                }\n                                // stop traversal if we find a point that's under the given threshold\n                                if (dist < minThreshold) {\n                                    return true;\n                                }\n                            }\n                        }\n                    }\n                });\n            } else {\n                // If no bounds tree then we'll just check every triangle.\n                const triCount = (0,_build_geometryUtils_js__WEBPACK_IMPORTED_MODULE_4__.getTriCount)(otherGeometry);\n                for(let i2 = 0, l2 = triCount; i2 < l2; i2++){\n                    (0,_utils_TriangleUtilities_js__WEBPACK_IMPORTED_MODULE_3__.setTriangle)(triangle2, 3 * i2, otherIndex, otherPos);\n                    triangle2.a.applyMatrix4(geometryToBvh);\n                    triangle2.b.applyMatrix4(geometryToBvh);\n                    triangle2.c.applyMatrix4(geometryToBvh);\n                    triangle2.needsUpdate = true;\n                    for(let i = offset, l = offset + count; i < l; i++){\n                        (0,_utils_TriangleUtilities_js__WEBPACK_IMPORTED_MODULE_3__.setTriangle)(triangle, 3 * i, index, pos);\n                        triangle.needsUpdate = true;\n                        const dist = triangle.distanceToTriangle(triangle2, tempTarget1, tempTarget2);\n                        if (dist < closestDistance) {\n                            tempTargetDest1.copy(tempTarget1);\n                            if (tempTargetDest2) {\n                                tempTargetDest2.copy(tempTarget2);\n                            }\n                            closestDistance = dist;\n                            closestDistanceTriIndex = i;\n                            closestDistanceOtherTriIndex = i2;\n                        }\n                        // stop traversal if we find a point that's under the given threshold\n                        if (dist < minThreshold) {\n                            return true;\n                        }\n                    }\n                }\n            }\n        }\n    });\n    _utils_ExtendedTrianglePool_js__WEBPACK_IMPORTED_MODULE_2__.ExtendedTrianglePool.releasePrimitive(triangle);\n    _utils_ExtendedTrianglePool_js__WEBPACK_IMPORTED_MODULE_2__.ExtendedTrianglePool.releasePrimitive(triangle2);\n    if (closestDistance === Infinity) {\n        return null;\n    }\n    if (!target1.point) {\n        target1.point = tempTargetDest1.clone();\n    } else {\n        target1.point.copy(tempTargetDest1);\n    }\n    target1.distance = closestDistance, target1.faceIndex = closestDistanceTriIndex;\n    if (target2) {\n        if (!target2.point) target2.point = tempTargetDest2.clone();\n        else target2.point.copy(tempTargetDest2);\n        target2.point.applyMatrix4(tempMatrix);\n        tempTargetDest1.applyMatrix4(tempMatrix);\n        target2.distance = tempTargetDest1.sub(target2.point).length();\n        target2.faceIndex = closestDistanceOtherTriIndex;\n    }\n    return target1;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/three-mesh-bvh/src/core/cast/closestPointToGeometry.generated.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/three-mesh-bvh/src/core/cast/closestPointToGeometry_indirect.generated.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/three-mesh-bvh/src/core/cast/closestPointToGeometry_indirect.generated.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   closestPointToGeometry_indirect: () => (/* binding */ closestPointToGeometry_indirect)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var _math_OrientedBox_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../math/OrientedBox.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/math/OrientedBox.js\");\n/* harmony import */ var _utils_TriangleUtilities_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/TriangleUtilities.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/utils/TriangleUtilities.js\");\n/* harmony import */ var _build_geometryUtils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../build/geometryUtils.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/core/build/geometryUtils.js\");\n/* harmony import */ var _utils_ExtendedTrianglePool_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/ExtendedTrianglePool.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/utils/ExtendedTrianglePool.js\");\n\n\n\n\n\n/*********************************************************************/ /* This file is generated from \"closestPointToGeometry.template.js\". */ /*********************************************************************/ const tempMatrix = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Matrix4();\nconst obb = /* @__PURE__ */ new _math_OrientedBox_js__WEBPACK_IMPORTED_MODULE_1__.OrientedBox();\nconst obb2 = /* @__PURE__ */ new _math_OrientedBox_js__WEBPACK_IMPORTED_MODULE_1__.OrientedBox();\nconst temp1 = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\nconst temp2 = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\nconst temp3 = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\nconst temp4 = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\nfunction closestPointToGeometry_indirect(bvh, otherGeometry, geometryToBvh, target1 = {}, target2 = {}, minThreshold = 0, maxThreshold = Infinity) {\n    if (!otherGeometry.boundingBox) {\n        otherGeometry.computeBoundingBox();\n    }\n    obb.set(otherGeometry.boundingBox.min, otherGeometry.boundingBox.max, geometryToBvh);\n    obb.needsUpdate = true;\n    const geometry = bvh.geometry;\n    const pos = geometry.attributes.position;\n    const index = geometry.index;\n    const otherPos = otherGeometry.attributes.position;\n    const otherIndex = otherGeometry.index;\n    const triangle = _utils_ExtendedTrianglePool_js__WEBPACK_IMPORTED_MODULE_2__.ExtendedTrianglePool.getPrimitive();\n    const triangle2 = _utils_ExtendedTrianglePool_js__WEBPACK_IMPORTED_MODULE_2__.ExtendedTrianglePool.getPrimitive();\n    let tempTarget1 = temp1;\n    let tempTargetDest1 = temp2;\n    let tempTarget2 = null;\n    let tempTargetDest2 = null;\n    if (target2) {\n        tempTarget2 = temp3;\n        tempTargetDest2 = temp4;\n    }\n    let closestDistance = Infinity;\n    let closestDistanceTriIndex = null;\n    let closestDistanceOtherTriIndex = null;\n    tempMatrix.copy(geometryToBvh).invert();\n    obb2.matrix.copy(tempMatrix);\n    bvh.shapecast({\n        boundsTraverseOrder: (box)=>{\n            return obb.distanceToBox(box);\n        },\n        intersectsBounds: (box, isLeaf, score)=>{\n            if (score < closestDistance && score < maxThreshold) {\n                // if we know the triangles of this bounds will be intersected next then\n                // save the bounds to use during triangle checks.\n                if (isLeaf) {\n                    obb2.min.copy(box.min);\n                    obb2.max.copy(box.max);\n                    obb2.needsUpdate = true;\n                }\n                return true;\n            }\n            return false;\n        },\n        intersectsRange: (offset, count)=>{\n            if (otherGeometry.boundsTree) {\n                // if the other geometry has a bvh then use the accelerated path where we use shapecast to find\n                // the closest bounds in the other geometry to check.\n                const otherBvh = otherGeometry.boundsTree;\n                return otherBvh.shapecast({\n                    boundsTraverseOrder: (box)=>{\n                        return obb2.distanceToBox(box);\n                    },\n                    intersectsBounds: (box, isLeaf, score)=>{\n                        return score < closestDistance && score < maxThreshold;\n                    },\n                    intersectsRange: (otherOffset, otherCount)=>{\n                        for(let i2 = otherOffset, l2 = otherOffset + otherCount; i2 < l2; i2++){\n                            const ti2 = otherBvh.resolveTriangleIndex(i2);\n                            (0,_utils_TriangleUtilities_js__WEBPACK_IMPORTED_MODULE_3__.setTriangle)(triangle2, 3 * ti2, otherIndex, otherPos);\n                            triangle2.a.applyMatrix4(geometryToBvh);\n                            triangle2.b.applyMatrix4(geometryToBvh);\n                            triangle2.c.applyMatrix4(geometryToBvh);\n                            triangle2.needsUpdate = true;\n                            for(let i = offset, l = offset + count; i < l; i++){\n                                const ti = bvh.resolveTriangleIndex(i);\n                                (0,_utils_TriangleUtilities_js__WEBPACK_IMPORTED_MODULE_3__.setTriangle)(triangle, 3 * ti, index, pos);\n                                triangle.needsUpdate = true;\n                                const dist = triangle.distanceToTriangle(triangle2, tempTarget1, tempTarget2);\n                                if (dist < closestDistance) {\n                                    tempTargetDest1.copy(tempTarget1);\n                                    if (tempTargetDest2) {\n                                        tempTargetDest2.copy(tempTarget2);\n                                    }\n                                    closestDistance = dist;\n                                    closestDistanceTriIndex = i;\n                                    closestDistanceOtherTriIndex = i2;\n                                }\n                                // stop traversal if we find a point that's under the given threshold\n                                if (dist < minThreshold) {\n                                    return true;\n                                }\n                            }\n                        }\n                    }\n                });\n            } else {\n                // If no bounds tree then we'll just check every triangle.\n                const triCount = (0,_build_geometryUtils_js__WEBPACK_IMPORTED_MODULE_4__.getTriCount)(otherGeometry);\n                for(let i2 = 0, l2 = triCount; i2 < l2; i2++){\n                    (0,_utils_TriangleUtilities_js__WEBPACK_IMPORTED_MODULE_3__.setTriangle)(triangle2, 3 * i2, otherIndex, otherPos);\n                    triangle2.a.applyMatrix4(geometryToBvh);\n                    triangle2.b.applyMatrix4(geometryToBvh);\n                    triangle2.c.applyMatrix4(geometryToBvh);\n                    triangle2.needsUpdate = true;\n                    for(let i = offset, l = offset + count; i < l; i++){\n                        const ti = bvh.resolveTriangleIndex(i);\n                        (0,_utils_TriangleUtilities_js__WEBPACK_IMPORTED_MODULE_3__.setTriangle)(triangle, 3 * ti, index, pos);\n                        triangle.needsUpdate = true;\n                        const dist = triangle.distanceToTriangle(triangle2, tempTarget1, tempTarget2);\n                        if (dist < closestDistance) {\n                            tempTargetDest1.copy(tempTarget1);\n                            if (tempTargetDest2) {\n                                tempTargetDest2.copy(tempTarget2);\n                            }\n                            closestDistance = dist;\n                            closestDistanceTriIndex = i;\n                            closestDistanceOtherTriIndex = i2;\n                        }\n                        // stop traversal if we find a point that's under the given threshold\n                        if (dist < minThreshold) {\n                            return true;\n                        }\n                    }\n                }\n            }\n        }\n    });\n    _utils_ExtendedTrianglePool_js__WEBPACK_IMPORTED_MODULE_2__.ExtendedTrianglePool.releasePrimitive(triangle);\n    _utils_ExtendedTrianglePool_js__WEBPACK_IMPORTED_MODULE_2__.ExtendedTrianglePool.releasePrimitive(triangle2);\n    if (closestDistance === Infinity) {\n        return null;\n    }\n    if (!target1.point) {\n        target1.point = tempTargetDest1.clone();\n    } else {\n        target1.point.copy(tempTargetDest1);\n    }\n    target1.distance = closestDistance, target1.faceIndex = closestDistanceTriIndex;\n    if (target2) {\n        if (!target2.point) target2.point = tempTargetDest2.clone();\n        else target2.point.copy(tempTargetDest2);\n        target2.point.applyMatrix4(tempMatrix);\n        tempTargetDest1.applyMatrix4(tempMatrix);\n        target2.distance = tempTargetDest1.sub(target2.point).length();\n        target2.faceIndex = closestDistanceOtherTriIndex;\n    }\n    return target1;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/three-mesh-bvh/src/core/cast/closestPointToGeometry_indirect.generated.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/three-mesh-bvh/src/core/cast/closestPointToPoint.js":
/*!**************************************************************************!*\
  !*** ./node_modules/three-mesh-bvh/src/core/cast/closestPointToPoint.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   closestPointToPoint: () => (/* binding */ closestPointToPoint)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n\nconst temp = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\nconst temp1 = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\nfunction closestPointToPoint(bvh, point, target = {}, minThreshold = 0, maxThreshold = Infinity) {\n    // early out if under minThreshold\n    // skip checking if over maxThreshold\n    // set minThreshold = maxThreshold to quickly check if a point is within a threshold\n    // returns Infinity if no value found\n    const minThresholdSq = minThreshold * minThreshold;\n    const maxThresholdSq = maxThreshold * maxThreshold;\n    let closestDistanceSq = Infinity;\n    let closestDistanceTriIndex = null;\n    bvh.shapecast({\n        boundsTraverseOrder: (box)=>{\n            temp.copy(point).clamp(box.min, box.max);\n            return temp.distanceToSquared(point);\n        },\n        intersectsBounds: (box, isLeaf, score)=>{\n            return score < closestDistanceSq && score < maxThresholdSq;\n        },\n        intersectsTriangle: (tri, triIndex)=>{\n            tri.closestPointToPoint(point, temp);\n            const distSq = point.distanceToSquared(temp);\n            if (distSq < closestDistanceSq) {\n                temp1.copy(temp);\n                closestDistanceSq = distSq;\n                closestDistanceTriIndex = triIndex;\n            }\n            if (distSq < minThresholdSq) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n    });\n    if (closestDistanceSq === Infinity) return null;\n    const closestDistance = Math.sqrt(closestDistanceSq);\n    if (!target.point) target.point = temp1.clone();\n    else target.point.copy(temp1);\n    target.distance = closestDistance, target.faceIndex = closestDistanceTriIndex;\n    return target;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdGhyZWUtbWVzaC1idmgvc3JjL2NvcmUvY2FzdC9jbG9zZXN0UG9pbnRUb1BvaW50LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQWdDO0FBRWhDLE1BQU1DLE9BQU8sYUFBYSxHQUFHLElBQUlELDBDQUFPQTtBQUN4QyxNQUFNRSxRQUFRLGFBQWEsR0FBRyxJQUFJRiwwQ0FBT0E7QUFFbEMsU0FBU0csb0JBQ2ZDLEdBQUcsRUFDSEMsS0FBSyxFQUNMQyxTQUFTLENBQUUsQ0FBQyxFQUNaQyxlQUFlLENBQUMsRUFDaEJDLGVBQWVDLFFBQVE7SUFHdkIsa0NBQWtDO0lBQ2xDLHFDQUFxQztJQUNyQyxvRkFBb0Y7SUFDcEYscUNBQXFDO0lBQ3JDLE1BQU1DLGlCQUFpQkgsZUFBZUE7SUFDdEMsTUFBTUksaUJBQWlCSCxlQUFlQTtJQUN0QyxJQUFJSSxvQkFBb0JIO0lBQ3hCLElBQUlJLDBCQUEwQjtJQUM5QlQsSUFBSVUsU0FBUyxDQUVaO1FBRUNDLHFCQUFxQkMsQ0FBQUE7WUFFcEJmLEtBQUtnQixJQUFJLENBQUVaLE9BQVFhLEtBQUssQ0FBRUYsSUFBSUcsR0FBRyxFQUFFSCxJQUFJSSxHQUFHO1lBQzFDLE9BQU9uQixLQUFLb0IsaUJBQWlCLENBQUVoQjtRQUVoQztRQUVBaUIsa0JBQWtCLENBQUVOLEtBQUtPLFFBQVFDO1lBRWhDLE9BQU9BLFFBQVFaLHFCQUFxQlksUUFBUWI7UUFFN0M7UUFFQWMsb0JBQW9CLENBQUVDLEtBQUtDO1lBRTFCRCxJQUFJdkIsbUJBQW1CLENBQUVFLE9BQU9KO1lBQ2hDLE1BQU0yQixTQUFTdkIsTUFBTWdCLGlCQUFpQixDQUFFcEI7WUFDeEMsSUFBSzJCLFNBQVNoQixtQkFBb0I7Z0JBRWpDVixNQUFNZSxJQUFJLENBQUVoQjtnQkFDWlcsb0JBQW9CZ0I7Z0JBQ3BCZiwwQkFBMEJjO1lBRTNCO1lBRUEsSUFBS0MsU0FBU2xCLGdCQUFpQjtnQkFFOUIsT0FBTztZQUVSLE9BQU87Z0JBRU4sT0FBTztZQUVSO1FBRUQ7SUFFRDtJQUlELElBQUtFLHNCQUFzQkgsVUFBVyxPQUFPO0lBRTdDLE1BQU1vQixrQkFBa0JDLEtBQUtDLElBQUksQ0FBRW5CO0lBRW5DLElBQUssQ0FBRU4sT0FBT0QsS0FBSyxFQUFHQyxPQUFPRCxLQUFLLEdBQUdILE1BQU04QixLQUFLO1NBQzNDMUIsT0FBT0QsS0FBSyxDQUFDWSxJQUFJLENBQUVmO0lBQ3hCSSxPQUFPMkIsUUFBUSxHQUFHSixpQkFDbEJ2QixPQUFPNEIsU0FBUyxHQUFHckI7SUFFbkIsT0FBT1A7QUFFUiIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90aHJlZS1tZXNoLWJ2aC9zcmMvY29yZS9jYXN0L2Nsb3Nlc3RQb2ludFRvUG9pbnQuanM/ZWE4ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBWZWN0b3IzIH0gZnJvbSAndGhyZWUnO1xuXG5jb25zdCB0ZW1wID0gLyogQF9fUFVSRV9fICovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCB0ZW1wMSA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgVmVjdG9yMygpO1xuXG5leHBvcnQgZnVuY3Rpb24gY2xvc2VzdFBvaW50VG9Qb2ludChcblx0YnZoLFxuXHRwb2ludCxcblx0dGFyZ2V0ID0geyB9LFxuXHRtaW5UaHJlc2hvbGQgPSAwLFxuXHRtYXhUaHJlc2hvbGQgPSBJbmZpbml0eSxcbikge1xuXG5cdC8vIGVhcmx5IG91dCBpZiB1bmRlciBtaW5UaHJlc2hvbGRcblx0Ly8gc2tpcCBjaGVja2luZyBpZiBvdmVyIG1heFRocmVzaG9sZFxuXHQvLyBzZXQgbWluVGhyZXNob2xkID0gbWF4VGhyZXNob2xkIHRvIHF1aWNrbHkgY2hlY2sgaWYgYSBwb2ludCBpcyB3aXRoaW4gYSB0aHJlc2hvbGRcblx0Ly8gcmV0dXJucyBJbmZpbml0eSBpZiBubyB2YWx1ZSBmb3VuZFxuXHRjb25zdCBtaW5UaHJlc2hvbGRTcSA9IG1pblRocmVzaG9sZCAqIG1pblRocmVzaG9sZDtcblx0Y29uc3QgbWF4VGhyZXNob2xkU3EgPSBtYXhUaHJlc2hvbGQgKiBtYXhUaHJlc2hvbGQ7XG5cdGxldCBjbG9zZXN0RGlzdGFuY2VTcSA9IEluZmluaXR5O1xuXHRsZXQgY2xvc2VzdERpc3RhbmNlVHJpSW5kZXggPSBudWxsO1xuXHRidmguc2hhcGVjYXN0KFxuXG5cdFx0e1xuXG5cdFx0XHRib3VuZHNUcmF2ZXJzZU9yZGVyOiBib3ggPT4ge1xuXG5cdFx0XHRcdHRlbXAuY29weSggcG9pbnQgKS5jbGFtcCggYm94Lm1pbiwgYm94Lm1heCApO1xuXHRcdFx0XHRyZXR1cm4gdGVtcC5kaXN0YW5jZVRvU3F1YXJlZCggcG9pbnQgKTtcblxuXHRcdFx0fSxcblxuXHRcdFx0aW50ZXJzZWN0c0JvdW5kczogKCBib3gsIGlzTGVhZiwgc2NvcmUgKSA9PiB7XG5cblx0XHRcdFx0cmV0dXJuIHNjb3JlIDwgY2xvc2VzdERpc3RhbmNlU3EgJiYgc2NvcmUgPCBtYXhUaHJlc2hvbGRTcTtcblxuXHRcdFx0fSxcblxuXHRcdFx0aW50ZXJzZWN0c1RyaWFuZ2xlOiAoIHRyaSwgdHJpSW5kZXggKSA9PiB7XG5cblx0XHRcdFx0dHJpLmNsb3Nlc3RQb2ludFRvUG9pbnQoIHBvaW50LCB0ZW1wICk7XG5cdFx0XHRcdGNvbnN0IGRpc3RTcSA9IHBvaW50LmRpc3RhbmNlVG9TcXVhcmVkKCB0ZW1wICk7XG5cdFx0XHRcdGlmICggZGlzdFNxIDwgY2xvc2VzdERpc3RhbmNlU3EgKSB7XG5cblx0XHRcdFx0XHR0ZW1wMS5jb3B5KCB0ZW1wICk7XG5cdFx0XHRcdFx0Y2xvc2VzdERpc3RhbmNlU3EgPSBkaXN0U3E7XG5cdFx0XHRcdFx0Y2xvc2VzdERpc3RhbmNlVHJpSW5kZXggPSB0cmlJbmRleDtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBkaXN0U3EgPCBtaW5UaHJlc2hvbGRTcSApIHtcblxuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9LFxuXG5cdFx0fVxuXG5cdCk7XG5cblx0aWYgKCBjbG9zZXN0RGlzdGFuY2VTcSA9PT0gSW5maW5pdHkgKSByZXR1cm4gbnVsbDtcblxuXHRjb25zdCBjbG9zZXN0RGlzdGFuY2UgPSBNYXRoLnNxcnQoIGNsb3Nlc3REaXN0YW5jZVNxICk7XG5cblx0aWYgKCAhIHRhcmdldC5wb2ludCApIHRhcmdldC5wb2ludCA9IHRlbXAxLmNsb25lKCk7XG5cdGVsc2UgdGFyZ2V0LnBvaW50LmNvcHkoIHRlbXAxICk7XG5cdHRhcmdldC5kaXN0YW5jZSA9IGNsb3Nlc3REaXN0YW5jZSxcblx0dGFyZ2V0LmZhY2VJbmRleCA9IGNsb3Nlc3REaXN0YW5jZVRyaUluZGV4O1xuXG5cdHJldHVybiB0YXJnZXQ7XG5cbn1cbiJdLCJuYW1lcyI6WyJWZWN0b3IzIiwidGVtcCIsInRlbXAxIiwiY2xvc2VzdFBvaW50VG9Qb2ludCIsImJ2aCIsInBvaW50IiwidGFyZ2V0IiwibWluVGhyZXNob2xkIiwibWF4VGhyZXNob2xkIiwiSW5maW5pdHkiLCJtaW5UaHJlc2hvbGRTcSIsIm1heFRocmVzaG9sZFNxIiwiY2xvc2VzdERpc3RhbmNlU3EiLCJjbG9zZXN0RGlzdGFuY2VUcmlJbmRleCIsInNoYXBlY2FzdCIsImJvdW5kc1RyYXZlcnNlT3JkZXIiLCJib3giLCJjb3B5IiwiY2xhbXAiLCJtaW4iLCJtYXgiLCJkaXN0YW5jZVRvU3F1YXJlZCIsImludGVyc2VjdHNCb3VuZHMiLCJpc0xlYWYiLCJzY29yZSIsImludGVyc2VjdHNUcmlhbmdsZSIsInRyaSIsInRyaUluZGV4IiwiZGlzdFNxIiwiY2xvc2VzdERpc3RhbmNlIiwiTWF0aCIsInNxcnQiLCJjbG9uZSIsImRpc3RhbmNlIiwiZmFjZUluZGV4Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/three-mesh-bvh/src/core/cast/closestPointToPoint.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/three-mesh-bvh/src/core/cast/intersectsGeometry.generated.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/three-mesh-bvh/src/core/cast/intersectsGeometry.generated.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   intersectsGeometry: () => (/* binding */ intersectsGeometry)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var _math_OrientedBox_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../math/OrientedBox.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/math/OrientedBox.js\");\n/* harmony import */ var _math_ExtendedTriangle_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../math/ExtendedTriangle.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/math/ExtendedTriangle.js\");\n/* harmony import */ var _utils_TriangleUtilities_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../utils/TriangleUtilities.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/utils/TriangleUtilities.js\");\n/* harmony import */ var _utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utils/ArrayBoxUtilities.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/utils/ArrayBoxUtilities.js\");\n/* harmony import */ var _utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/nodeBufferUtils.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/core/utils/nodeBufferUtils.js\");\n/* harmony import */ var _utils_BufferStack_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/BufferStack.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/core/utils/BufferStack.js\");\n\n\n\n\n\n\n\n/*****************************************************************/ /* This file is generated from \"intersectsGeometry.template.js\". */ /*****************************************************************/ /* eslint-disable indent */ const boundingBox = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Box3();\nconst triangle = /* @__PURE__ */ new _math_ExtendedTriangle_js__WEBPACK_IMPORTED_MODULE_1__.ExtendedTriangle();\nconst triangle2 = /* @__PURE__ */ new _math_ExtendedTriangle_js__WEBPACK_IMPORTED_MODULE_1__.ExtendedTriangle();\nconst invertedMat = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Matrix4();\nconst obb = /* @__PURE__ */ new _math_OrientedBox_js__WEBPACK_IMPORTED_MODULE_2__.OrientedBox();\nconst obb2 = /* @__PURE__ */ new _math_OrientedBox_js__WEBPACK_IMPORTED_MODULE_2__.OrientedBox();\nfunction intersectsGeometry(bvh, root, otherGeometry, geometryToBvh) {\n    _utils_BufferStack_js__WEBPACK_IMPORTED_MODULE_3__.BufferStack.setBuffer(bvh._roots[root]);\n    const result = _intersectsGeometry(0, bvh, otherGeometry, geometryToBvh);\n    _utils_BufferStack_js__WEBPACK_IMPORTED_MODULE_3__.BufferStack.clearBuffer();\n    return result;\n}\nfunction _intersectsGeometry(nodeIndex32, bvh, otherGeometry, geometryToBvh, cachedObb = null) {\n    const { float32Array, uint16Array, uint32Array } = _utils_BufferStack_js__WEBPACK_IMPORTED_MODULE_3__.BufferStack;\n    let nodeIndex16 = nodeIndex32 * 2;\n    if (cachedObb === null) {\n        if (!otherGeometry.boundingBox) {\n            otherGeometry.computeBoundingBox();\n        }\n        obb.set(otherGeometry.boundingBox.min, otherGeometry.boundingBox.max, geometryToBvh);\n        cachedObb = obb;\n    }\n    const isLeaf = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_4__.IS_LEAF)(nodeIndex16, uint16Array);\n    if (isLeaf) {\n        const thisGeometry = bvh.geometry;\n        const thisIndex = thisGeometry.index;\n        const thisPos = thisGeometry.attributes.position;\n        const index = otherGeometry.index;\n        const pos = otherGeometry.attributes.position;\n        const offset = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_4__.OFFSET)(nodeIndex32, uint32Array);\n        const count = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_4__.COUNT)(nodeIndex16, uint16Array);\n        // get the inverse of the geometry matrix so we can transform our triangles into the\n        // geometry space we're trying to test. We assume there are fewer triangles being checked\n        // here.\n        invertedMat.copy(geometryToBvh).invert();\n        if (otherGeometry.boundsTree) {\n            // if there's a bounds tree\n            (0,_utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_5__.arrayToBox)((0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_4__.BOUNDING_DATA_INDEX)(nodeIndex32), float32Array, obb2);\n            obb2.matrix.copy(invertedMat);\n            obb2.needsUpdate = true;\n            // TODO: use a triangle iteration function here\n            const res = otherGeometry.boundsTree.shapecast({\n                intersectsBounds: (box)=>obb2.intersectsBox(box),\n                intersectsTriangle: (tri)=>{\n                    tri.a.applyMatrix4(geometryToBvh);\n                    tri.b.applyMatrix4(geometryToBvh);\n                    tri.c.applyMatrix4(geometryToBvh);\n                    tri.needsUpdate = true;\n                    for(let i = offset * 3, l = (count + offset) * 3; i < l; i += 3){\n                        // this triangle needs to be transformed into the current BVH coordinate frame\n                        (0,_utils_TriangleUtilities_js__WEBPACK_IMPORTED_MODULE_6__.setTriangle)(triangle2, i, thisIndex, thisPos);\n                        triangle2.needsUpdate = true;\n                        if (tri.intersectsTriangle(triangle2)) {\n                            return true;\n                        }\n                    }\n                    return false;\n                }\n            });\n            return res;\n        } else {\n            // if we're just dealing with raw geometry\n            for(let i = offset * 3, l = (count + offset) * 3; i < l; i += 3){\n                // this triangle needs to be transformed into the current BVH coordinate frame\n                (0,_utils_TriangleUtilities_js__WEBPACK_IMPORTED_MODULE_6__.setTriangle)(triangle, i, thisIndex, thisPos);\n                triangle.a.applyMatrix4(invertedMat);\n                triangle.b.applyMatrix4(invertedMat);\n                triangle.c.applyMatrix4(invertedMat);\n                triangle.needsUpdate = true;\n                for(let i2 = 0, l2 = index.count; i2 < l2; i2 += 3){\n                    (0,_utils_TriangleUtilities_js__WEBPACK_IMPORTED_MODULE_6__.setTriangle)(triangle2, i2, index, pos);\n                    triangle2.needsUpdate = true;\n                    if (triangle.intersectsTriangle(triangle2)) {\n                        return true;\n                    }\n                }\n            }\n        }\n    } else {\n        const left = nodeIndex32 + 8;\n        const right = uint32Array[nodeIndex32 + 6];\n        (0,_utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_5__.arrayToBox)((0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_4__.BOUNDING_DATA_INDEX)(left), float32Array, boundingBox);\n        const leftIntersection = cachedObb.intersectsBox(boundingBox) && _intersectsGeometry(left, bvh, otherGeometry, geometryToBvh, cachedObb);\n        if (leftIntersection) return true;\n        (0,_utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_5__.arrayToBox)((0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_4__.BOUNDING_DATA_INDEX)(right), float32Array, boundingBox);\n        const rightIntersection = cachedObb.intersectsBox(boundingBox) && _intersectsGeometry(right, bvh, otherGeometry, geometryToBvh, cachedObb);\n        if (rightIntersection) return true;\n        return false;\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/three-mesh-bvh/src/core/cast/intersectsGeometry.generated.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/three-mesh-bvh/src/core/cast/intersectsGeometry_indirect.generated.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/three-mesh-bvh/src/core/cast/intersectsGeometry_indirect.generated.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   intersectsGeometry_indirect: () => (/* binding */ intersectsGeometry_indirect)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var _math_OrientedBox_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../math/OrientedBox.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/math/OrientedBox.js\");\n/* harmony import */ var _math_ExtendedTriangle_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../math/ExtendedTriangle.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/math/ExtendedTriangle.js\");\n/* harmony import */ var _utils_TriangleUtilities_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../utils/TriangleUtilities.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/utils/TriangleUtilities.js\");\n/* harmony import */ var _utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utils/ArrayBoxUtilities.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/utils/ArrayBoxUtilities.js\");\n/* harmony import */ var _utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/nodeBufferUtils.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/core/utils/nodeBufferUtils.js\");\n/* harmony import */ var _utils_BufferStack_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/BufferStack.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/core/utils/BufferStack.js\");\n\n\n\n\n\n\n\n/*****************************************************************/ /* This file is generated from \"intersectsGeometry.template.js\". */ /*****************************************************************/ /* eslint-disable indent */ const boundingBox = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Box3();\nconst triangle = /* @__PURE__ */ new _math_ExtendedTriangle_js__WEBPACK_IMPORTED_MODULE_1__.ExtendedTriangle();\nconst triangle2 = /* @__PURE__ */ new _math_ExtendedTriangle_js__WEBPACK_IMPORTED_MODULE_1__.ExtendedTriangle();\nconst invertedMat = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Matrix4();\nconst obb = /* @__PURE__ */ new _math_OrientedBox_js__WEBPACK_IMPORTED_MODULE_2__.OrientedBox();\nconst obb2 = /* @__PURE__ */ new _math_OrientedBox_js__WEBPACK_IMPORTED_MODULE_2__.OrientedBox();\nfunction intersectsGeometry_indirect(bvh, root, otherGeometry, geometryToBvh) {\n    _utils_BufferStack_js__WEBPACK_IMPORTED_MODULE_3__.BufferStack.setBuffer(bvh._roots[root]);\n    const result = _intersectsGeometry(0, bvh, otherGeometry, geometryToBvh);\n    _utils_BufferStack_js__WEBPACK_IMPORTED_MODULE_3__.BufferStack.clearBuffer();\n    return result;\n}\nfunction _intersectsGeometry(nodeIndex32, bvh, otherGeometry, geometryToBvh, cachedObb = null) {\n    const { float32Array, uint16Array, uint32Array } = _utils_BufferStack_js__WEBPACK_IMPORTED_MODULE_3__.BufferStack;\n    let nodeIndex16 = nodeIndex32 * 2;\n    if (cachedObb === null) {\n        if (!otherGeometry.boundingBox) {\n            otherGeometry.computeBoundingBox();\n        }\n        obb.set(otherGeometry.boundingBox.min, otherGeometry.boundingBox.max, geometryToBvh);\n        cachedObb = obb;\n    }\n    const isLeaf = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_4__.IS_LEAF)(nodeIndex16, uint16Array);\n    if (isLeaf) {\n        const thisGeometry = bvh.geometry;\n        const thisIndex = thisGeometry.index;\n        const thisPos = thisGeometry.attributes.position;\n        const index = otherGeometry.index;\n        const pos = otherGeometry.attributes.position;\n        const offset = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_4__.OFFSET)(nodeIndex32, uint32Array);\n        const count = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_4__.COUNT)(nodeIndex16, uint16Array);\n        // get the inverse of the geometry matrix so we can transform our triangles into the\n        // geometry space we're trying to test. We assume there are fewer triangles being checked\n        // here.\n        invertedMat.copy(geometryToBvh).invert();\n        if (otherGeometry.boundsTree) {\n            // if there's a bounds tree\n            (0,_utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_5__.arrayToBox)((0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_4__.BOUNDING_DATA_INDEX)(nodeIndex32), float32Array, obb2);\n            obb2.matrix.copy(invertedMat);\n            obb2.needsUpdate = true;\n            // TODO: use a triangle iteration function here\n            const res = otherGeometry.boundsTree.shapecast({\n                intersectsBounds: (box)=>obb2.intersectsBox(box),\n                intersectsTriangle: (tri)=>{\n                    tri.a.applyMatrix4(geometryToBvh);\n                    tri.b.applyMatrix4(geometryToBvh);\n                    tri.c.applyMatrix4(geometryToBvh);\n                    tri.needsUpdate = true;\n                    for(let i = offset, l = count + offset; i < l; i++){\n                        // this triangle needs to be transformed into the current BVH coordinate frame\n                        (0,_utils_TriangleUtilities_js__WEBPACK_IMPORTED_MODULE_6__.setTriangle)(triangle2, 3 * bvh.resolveTriangleIndex(i), thisIndex, thisPos);\n                        triangle2.needsUpdate = true;\n                        if (tri.intersectsTriangle(triangle2)) {\n                            return true;\n                        }\n                    }\n                    return false;\n                }\n            });\n            return res;\n        } else {\n            // if we're just dealing with raw geometry\n            for(let i = offset, l = count + offset; i < l; i++){\n                // this triangle needs to be transformed into the current BVH coordinate frame\n                const ti = bvh.resolveTriangleIndex(i);\n                (0,_utils_TriangleUtilities_js__WEBPACK_IMPORTED_MODULE_6__.setTriangle)(triangle, 3 * ti, thisIndex, thisPos);\n                triangle.a.applyMatrix4(invertedMat);\n                triangle.b.applyMatrix4(invertedMat);\n                triangle.c.applyMatrix4(invertedMat);\n                triangle.needsUpdate = true;\n                for(let i2 = 0, l2 = index.count; i2 < l2; i2 += 3){\n                    (0,_utils_TriangleUtilities_js__WEBPACK_IMPORTED_MODULE_6__.setTriangle)(triangle2, i2, index, pos);\n                    triangle2.needsUpdate = true;\n                    if (triangle.intersectsTriangle(triangle2)) {\n                        return true;\n                    }\n                }\n            }\n        }\n    } else {\n        const left = nodeIndex32 + 8;\n        const right = uint32Array[nodeIndex32 + 6];\n        (0,_utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_5__.arrayToBox)((0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_4__.BOUNDING_DATA_INDEX)(left), float32Array, boundingBox);\n        const leftIntersection = cachedObb.intersectsBox(boundingBox) && _intersectsGeometry(left, bvh, otherGeometry, geometryToBvh, cachedObb);\n        if (leftIntersection) return true;\n        (0,_utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_5__.arrayToBox)((0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_4__.BOUNDING_DATA_INDEX)(right), float32Array, boundingBox);\n        const rightIntersection = cachedObb.intersectsBox(boundingBox) && _intersectsGeometry(right, bvh, otherGeometry, geometryToBvh, cachedObb);\n        if (rightIntersection) return true;\n        return false;\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/three-mesh-bvh/src/core/cast/intersectsGeometry_indirect.generated.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/three-mesh-bvh/src/core/cast/raycast.generated.js":
/*!************************************************************************!*\
  !*** ./node_modules/three-mesh-bvh/src/core/cast/raycast.generated.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   raycast: () => (/* binding */ raycast)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var _utils_intersectUtils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/intersectUtils.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/core/utils/intersectUtils.js\");\n/* harmony import */ var _utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/nodeBufferUtils.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/core/utils/nodeBufferUtils.js\");\n/* harmony import */ var _utils_BufferStack_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/BufferStack.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/core/utils/BufferStack.js\");\n/* harmony import */ var _utils_iterationUtils_generated_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/iterationUtils.generated.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/core/utils/iterationUtils.generated.js\");\n\n\n\n\n\n\n/******************************************************/ /* This file is generated from \"raycast.template.js\". */ /******************************************************/ const _boxIntersection = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\nfunction raycast(bvh, root, side, ray, intersects) {\n    _utils_BufferStack_js__WEBPACK_IMPORTED_MODULE_1__.BufferStack.setBuffer(bvh._roots[root]);\n    _raycast(0, bvh, side, ray, intersects);\n    _utils_BufferStack_js__WEBPACK_IMPORTED_MODULE_1__.BufferStack.clearBuffer();\n}\nfunction _raycast(nodeIndex32, bvh, side, ray, intersects) {\n    const { float32Array, uint16Array, uint32Array } = _utils_BufferStack_js__WEBPACK_IMPORTED_MODULE_1__.BufferStack;\n    const nodeIndex16 = nodeIndex32 * 2;\n    const isLeaf = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_2__.IS_LEAF)(nodeIndex16, uint16Array);\n    if (isLeaf) {\n        const offset = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_2__.OFFSET)(nodeIndex32, uint32Array);\n        const count = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_2__.COUNT)(nodeIndex16, uint16Array);\n        (0,_utils_iterationUtils_generated_js__WEBPACK_IMPORTED_MODULE_3__.intersectTris)(bvh, side, ray, offset, count, intersects);\n    } else {\n        const leftIndex = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_2__.LEFT_NODE)(nodeIndex32);\n        if ((0,_utils_intersectUtils_js__WEBPACK_IMPORTED_MODULE_4__.intersectRay)(leftIndex, float32Array, ray, _boxIntersection)) {\n            _raycast(leftIndex, bvh, side, ray, intersects);\n        }\n        const rightIndex = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_2__.RIGHT_NODE)(nodeIndex32, uint32Array);\n        if ((0,_utils_intersectUtils_js__WEBPACK_IMPORTED_MODULE_4__.intersectRay)(rightIndex, float32Array, ray, _boxIntersection)) {\n            _raycast(rightIndex, bvh, side, ray, intersects);\n        }\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdGhyZWUtbWVzaC1idmgvc3JjL2NvcmUvY2FzdC9yYXljYXN0LmdlbmVyYXRlZC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBZ0M7QUFDMEI7QUFDa0M7QUFDdEM7QUFDZTtBQUNkO0FBRXZELHNEQUFzRCxHQUN0RCxzREFBc0QsR0FDdEQsc0RBQXNELEdBRXRELE1BQU1TLG1CQUFtQixhQUFhLEdBQUcsSUFBSVQsMENBQU9BO0FBQ3BELFNBQVNVLFFBQVNDLEdBQUcsRUFBRUMsSUFBSSxFQUFFQyxJQUFJLEVBQUVDLEdBQUcsRUFBRUMsVUFBVTtJQUVqRFIsOERBQVdBLENBQUNTLFNBQVMsQ0FBRUwsSUFBSU0sTUFBTSxDQUFFTCxLQUFNO0lBQ3pDTSxTQUFVLEdBQUdQLEtBQUtFLE1BQU1DLEtBQUtDO0lBQzdCUiw4REFBV0EsQ0FBQ1ksV0FBVztBQUV4QjtBQUVBLFNBQVNELFNBQVVFLFdBQVcsRUFBRVQsR0FBRyxFQUFFRSxJQUFJLEVBQUVDLEdBQUcsRUFBRUMsVUFBVTtJQUV6RCxNQUFNLEVBQUVNLFlBQVksRUFBRUMsV0FBVyxFQUFFQyxXQUFXLEVBQUUsR0FBR2hCLDhEQUFXQTtJQUM5RCxNQUFNaUIsY0FBY0osY0FBYztJQUNsQyxNQUFNSyxTQUFTdkIsa0VBQU9BLENBQUVzQixhQUFhRjtJQUNyQyxJQUFLRyxRQUFTO1FBRWIsTUFBTUMsU0FBU3ZCLGlFQUFNQSxDQUFFaUIsYUFBYUc7UUFDcEMsTUFBTUksUUFBUXZCLGdFQUFLQSxDQUFFb0IsYUFBYUY7UUFHbENkLGlGQUFhQSxDQUFFRyxLQUFLRSxNQUFNQyxLQUFLWSxRQUFRQyxPQUFPWjtJQUcvQyxPQUFPO1FBRU4sTUFBTWEsWUFBWXZCLG9FQUFTQSxDQUFFZTtRQUM3QixJQUFLbkIsc0VBQVlBLENBQUUyQixXQUFXUCxjQUFjUCxLQUFLTCxtQkFBcUI7WUFFckVTLFNBQVVVLFdBQVdqQixLQUFLRSxNQUFNQyxLQUFLQztRQUV0QztRQUVBLE1BQU1jLGFBQWF2QixxRUFBVUEsQ0FBRWMsYUFBYUc7UUFDNUMsSUFBS3RCLHNFQUFZQSxDQUFFNEIsWUFBWVIsY0FBY1AsS0FBS0wsbUJBQXFCO1lBRXRFUyxTQUFVVyxZQUFZbEIsS0FBS0UsTUFBTUMsS0FBS0M7UUFFdkM7SUFFRDtBQUVEO0FBRW1CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3RocmVlLW1lc2gtYnZoL3NyYy9jb3JlL2Nhc3QvcmF5Y2FzdC5nZW5lcmF0ZWQuanM/MDhhZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBWZWN0b3IzIH0gZnJvbSAndGhyZWUnO1xuaW1wb3J0IHsgaW50ZXJzZWN0UmF5IH0gZnJvbSAnLi4vdXRpbHMvaW50ZXJzZWN0VXRpbHMuanMnO1xuaW1wb3J0IHsgSVNfTEVBRiwgT0ZGU0VULCBDT1VOVCwgTEVGVF9OT0RFLCBSSUdIVF9OT0RFIH0gZnJvbSAnLi4vdXRpbHMvbm9kZUJ1ZmZlclV0aWxzLmpzJztcbmltcG9ydCB7IEJ1ZmZlclN0YWNrIH0gZnJvbSAnLi4vdXRpbHMvQnVmZmVyU3RhY2suanMnO1xuaW1wb3J0IHsgaW50ZXJzZWN0VHJpcyB9IGZyb20gJy4uL3V0aWxzL2l0ZXJhdGlvblV0aWxzLmdlbmVyYXRlZC5qcyc7XG5pbXBvcnQgJy4uL3V0aWxzL2l0ZXJhdGlvblV0aWxzX2luZGlyZWN0LmdlbmVyYXRlZC5qcyc7XG5cbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiBUaGlzIGZpbGUgaXMgZ2VuZXJhdGVkIGZyb20gXCJyYXljYXN0LnRlbXBsYXRlLmpzXCIuICovXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG5jb25zdCBfYm94SW50ZXJzZWN0aW9uID0gLyogQF9fUFVSRV9fICovIG5ldyBWZWN0b3IzKCk7XG5mdW5jdGlvbiByYXljYXN0KCBidmgsIHJvb3QsIHNpZGUsIHJheSwgaW50ZXJzZWN0cyApIHtcblxuXHRCdWZmZXJTdGFjay5zZXRCdWZmZXIoIGJ2aC5fcm9vdHNbIHJvb3QgXSApO1xuXHRfcmF5Y2FzdCggMCwgYnZoLCBzaWRlLCByYXksIGludGVyc2VjdHMgKTtcblx0QnVmZmVyU3RhY2suY2xlYXJCdWZmZXIoKTtcblxufVxuXG5mdW5jdGlvbiBfcmF5Y2FzdCggbm9kZUluZGV4MzIsIGJ2aCwgc2lkZSwgcmF5LCBpbnRlcnNlY3RzICkge1xuXG5cdGNvbnN0IHsgZmxvYXQzMkFycmF5LCB1aW50MTZBcnJheSwgdWludDMyQXJyYXkgfSA9IEJ1ZmZlclN0YWNrO1xuXHRjb25zdCBub2RlSW5kZXgxNiA9IG5vZGVJbmRleDMyICogMjtcblx0Y29uc3QgaXNMZWFmID0gSVNfTEVBRiggbm9kZUluZGV4MTYsIHVpbnQxNkFycmF5ICk7XG5cdGlmICggaXNMZWFmICkge1xuXG5cdFx0Y29uc3Qgb2Zmc2V0ID0gT0ZGU0VUKCBub2RlSW5kZXgzMiwgdWludDMyQXJyYXkgKTtcblx0XHRjb25zdCBjb3VudCA9IENPVU5UKCBub2RlSW5kZXgxNiwgdWludDE2QXJyYXkgKTtcblxuXG5cdFx0aW50ZXJzZWN0VHJpcyggYnZoLCBzaWRlLCByYXksIG9mZnNldCwgY291bnQsIGludGVyc2VjdHMgKTtcblxuXG5cdH0gZWxzZSB7XG5cblx0XHRjb25zdCBsZWZ0SW5kZXggPSBMRUZUX05PREUoIG5vZGVJbmRleDMyICk7XG5cdFx0aWYgKCBpbnRlcnNlY3RSYXkoIGxlZnRJbmRleCwgZmxvYXQzMkFycmF5LCByYXksIF9ib3hJbnRlcnNlY3Rpb24gKSApIHtcblxuXHRcdFx0X3JheWNhc3QoIGxlZnRJbmRleCwgYnZoLCBzaWRlLCByYXksIGludGVyc2VjdHMgKTtcblxuXHRcdH1cblxuXHRcdGNvbnN0IHJpZ2h0SW5kZXggPSBSSUdIVF9OT0RFKCBub2RlSW5kZXgzMiwgdWludDMyQXJyYXkgKTtcblx0XHRpZiAoIGludGVyc2VjdFJheSggcmlnaHRJbmRleCwgZmxvYXQzMkFycmF5LCByYXksIF9ib3hJbnRlcnNlY3Rpb24gKSApIHtcblxuXHRcdFx0X3JheWNhc3QoIHJpZ2h0SW5kZXgsIGJ2aCwgc2lkZSwgcmF5LCBpbnRlcnNlY3RzICk7XG5cblx0XHR9XG5cblx0fVxuXG59XG5cbmV4cG9ydCB7IHJheWNhc3QgfTtcbiJdLCJuYW1lcyI6WyJWZWN0b3IzIiwiaW50ZXJzZWN0UmF5IiwiSVNfTEVBRiIsIk9GRlNFVCIsIkNPVU5UIiwiTEVGVF9OT0RFIiwiUklHSFRfTk9ERSIsIkJ1ZmZlclN0YWNrIiwiaW50ZXJzZWN0VHJpcyIsIl9ib3hJbnRlcnNlY3Rpb24iLCJyYXljYXN0IiwiYnZoIiwicm9vdCIsInNpZGUiLCJyYXkiLCJpbnRlcnNlY3RzIiwic2V0QnVmZmVyIiwiX3Jvb3RzIiwiX3JheWNhc3QiLCJjbGVhckJ1ZmZlciIsIm5vZGVJbmRleDMyIiwiZmxvYXQzMkFycmF5IiwidWludDE2QXJyYXkiLCJ1aW50MzJBcnJheSIsIm5vZGVJbmRleDE2IiwiaXNMZWFmIiwib2Zmc2V0IiwiY291bnQiLCJsZWZ0SW5kZXgiLCJyaWdodEluZGV4Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/three-mesh-bvh/src/core/cast/raycast.generated.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/three-mesh-bvh/src/core/cast/raycastFirst.generated.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/three-mesh-bvh/src/core/cast/raycastFirst.generated.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   raycastFirst: () => (/* binding */ raycastFirst)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var _utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/nodeBufferUtils.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/core/utils/nodeBufferUtils.js\");\n/* harmony import */ var _utils_BufferStack_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/BufferStack.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/core/utils/BufferStack.js\");\n/* harmony import */ var _utils_intersectUtils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/intersectUtils.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/core/utils/intersectUtils.js\");\n/* harmony import */ var _utils_iterationUtils_generated_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/iterationUtils.generated.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/core/utils/iterationUtils.generated.js\");\n\n\n\n\n\n\n/***********************************************************/ /* This file is generated from \"raycastFirst.template.js\". */ /***********************************************************/ const _boxIntersection = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\nconst _xyzFields = [\n    \"x\",\n    \"y\",\n    \"z\"\n];\nfunction raycastFirst(bvh, root, side, ray) {\n    _utils_BufferStack_js__WEBPACK_IMPORTED_MODULE_1__.BufferStack.setBuffer(bvh._roots[root]);\n    const result = _raycastFirst(0, bvh, side, ray);\n    _utils_BufferStack_js__WEBPACK_IMPORTED_MODULE_1__.BufferStack.clearBuffer();\n    return result;\n}\nfunction _raycastFirst(nodeIndex32, bvh, side, ray) {\n    const { float32Array, uint16Array, uint32Array } = _utils_BufferStack_js__WEBPACK_IMPORTED_MODULE_1__.BufferStack;\n    let nodeIndex16 = nodeIndex32 * 2;\n    const isLeaf = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_2__.IS_LEAF)(nodeIndex16, uint16Array);\n    if (isLeaf) {\n        const offset = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_2__.OFFSET)(nodeIndex32, uint32Array);\n        const count = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_2__.COUNT)(nodeIndex16, uint16Array);\n        return (0,_utils_iterationUtils_generated_js__WEBPACK_IMPORTED_MODULE_3__.intersectClosestTri)(bvh, side, ray, offset, count);\n    } else {\n        // consider the position of the split plane with respect to the oncoming ray; whichever direction\n        // the ray is coming from, look for an intersection among that side of the tree first\n        const splitAxis = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_2__.SPLIT_AXIS)(nodeIndex32, uint32Array);\n        const xyzAxis = _xyzFields[splitAxis];\n        const rayDir = ray.direction[xyzAxis];\n        const leftToRight = rayDir >= 0;\n        // c1 is the child to check first\n        let c1, c2;\n        if (leftToRight) {\n            c1 = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_2__.LEFT_NODE)(nodeIndex32);\n            c2 = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_2__.RIGHT_NODE)(nodeIndex32, uint32Array);\n        } else {\n            c1 = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_2__.RIGHT_NODE)(nodeIndex32, uint32Array);\n            c2 = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_2__.LEFT_NODE)(nodeIndex32);\n        }\n        const c1Intersection = (0,_utils_intersectUtils_js__WEBPACK_IMPORTED_MODULE_4__.intersectRay)(c1, float32Array, ray, _boxIntersection);\n        const c1Result = c1Intersection ? _raycastFirst(c1, bvh, side, ray) : null;\n        // if we got an intersection in the first node and it's closer than the second node's bounding\n        // box, we don't need to consider the second node because it couldn't possibly be a better result\n        if (c1Result) {\n            // check if the point is within the second bounds\n            // \"point\" is in the local frame of the bvh\n            const point = c1Result.point[xyzAxis];\n            const isOutside = leftToRight ? point <= float32Array[c2 + splitAxis] : point >= float32Array[c2 + splitAxis + 3]; // max bounding data\n            if (isOutside) {\n                return c1Result;\n            }\n        }\n        // either there was no intersection in the first node, or there could still be a closer\n        // intersection in the second, so check the second node and then take the better of the two\n        const c2Intersection = (0,_utils_intersectUtils_js__WEBPACK_IMPORTED_MODULE_4__.intersectRay)(c2, float32Array, ray, _boxIntersection);\n        const c2Result = c2Intersection ? _raycastFirst(c2, bvh, side, ray) : null;\n        if (c1Result && c2Result) {\n            return c1Result.distance <= c2Result.distance ? c1Result : c2Result;\n        } else {\n            return c1Result || c2Result || null;\n        }\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdGhyZWUtbWVzaC1idmgvc3JjL2NvcmUvY2FzdC9yYXljYXN0Rmlyc3QuZ2VuZXJhdGVkLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFnQztBQUN3RTtBQUNsRDtBQUNJO0FBQ2lCO0FBQ3BCO0FBRXZELDJEQUEyRCxHQUMzRCwyREFBMkQsR0FDM0QsMkRBQTJELEdBQzNELE1BQU1VLG1CQUFtQixhQUFhLEdBQUcsSUFBSVYsMENBQU9BO0FBQ3BELE1BQU1XLGFBQWE7SUFBRTtJQUFLO0lBQUs7Q0FBSztBQUNwQyxTQUFTQyxhQUFjQyxHQUFHLEVBQUVDLElBQUksRUFBRUMsSUFBSSxFQUFFQyxHQUFHO0lBRTFDVCw4REFBV0EsQ0FBQ1UsU0FBUyxDQUFFSixJQUFJSyxNQUFNLENBQUVKLEtBQU07SUFDekMsTUFBTUssU0FBU0MsY0FBZSxHQUFHUCxLQUFLRSxNQUFNQztJQUM1Q1QsOERBQVdBLENBQUNjLFdBQVc7SUFFdkIsT0FBT0Y7QUFFUjtBQUVBLFNBQVNDLGNBQWVFLFdBQVcsRUFBRVQsR0FBRyxFQUFFRSxJQUFJLEVBQUVDLEdBQUc7SUFFbEQsTUFBTSxFQUFFTyxZQUFZLEVBQUVDLFdBQVcsRUFBRUMsV0FBVyxFQUFFLEdBQUdsQiw4REFBV0E7SUFDOUQsSUFBSW1CLGNBQWNKLGNBQWM7SUFFaEMsTUFBTUssU0FBUzFCLGtFQUFPQSxDQUFFeUIsYUFBYUY7SUFDckMsSUFBS0csUUFBUztRQUViLE1BQU1DLFNBQVMxQixpRUFBTUEsQ0FBRW9CLGFBQWFHO1FBQ3BDLE1BQU1JLFFBQVExQixnRUFBS0EsQ0FBRXVCLGFBQWFGO1FBR2xDLE9BQU9mLHVGQUFtQkEsQ0FBRUksS0FBS0UsTUFBTUMsS0FBS1ksUUFBUUM7SUFHckQsT0FBTztRQUVOLGlHQUFpRztRQUNqRyxxRkFBcUY7UUFDckYsTUFBTUMsWUFBWTFCLHFFQUFVQSxDQUFFa0IsYUFBYUc7UUFDM0MsTUFBTU0sVUFBVXBCLFVBQVUsQ0FBRW1CLFVBQVc7UUFDdkMsTUFBTUUsU0FBU2hCLElBQUlpQixTQUFTLENBQUVGLFFBQVM7UUFDdkMsTUFBTUcsY0FBY0YsVUFBVTtRQUU5QixpQ0FBaUM7UUFDakMsSUFBSUcsSUFBSUM7UUFDUixJQUFLRixhQUFjO1lBRWxCQyxLQUFLOUIsb0VBQVNBLENBQUVpQjtZQUNoQmMsS0FBSzlCLHFFQUFVQSxDQUFFZ0IsYUFBYUc7UUFFL0IsT0FBTztZQUVOVSxLQUFLN0IscUVBQVVBLENBQUVnQixhQUFhRztZQUM5QlcsS0FBSy9CLG9FQUFTQSxDQUFFaUI7UUFFakI7UUFFQSxNQUFNZSxpQkFBaUI3QixzRUFBWUEsQ0FBRTJCLElBQUlaLGNBQWNQLEtBQUtOO1FBQzVELE1BQU00QixXQUFXRCxpQkFBaUJqQixjQUFlZSxJQUFJdEIsS0FBS0UsTUFBTUMsT0FBUTtRQUV4RSw4RkFBOEY7UUFDOUYsaUdBQWlHO1FBQ2pHLElBQUtzQixVQUFXO1lBRWYsaURBQWlEO1lBQ2pELDJDQUEyQztZQUMzQyxNQUFNQyxRQUFRRCxTQUFTQyxLQUFLLENBQUVSLFFBQVM7WUFDdkMsTUFBTVMsWUFBWU4sY0FDakJLLFNBQVNoQixZQUFZLENBQUVhLEtBQUtOLFVBQVcsR0FDdkNTLFNBQVNoQixZQUFZLENBQUVhLEtBQUtOLFlBQVksRUFBRyxFQUFFLG9CQUFvQjtZQUVsRSxJQUFLVSxXQUFZO2dCQUVoQixPQUFPRjtZQUVSO1FBRUQ7UUFFQSx1RkFBdUY7UUFDdkYsMkZBQTJGO1FBQzNGLE1BQU1HLGlCQUFpQmpDLHNFQUFZQSxDQUFFNEIsSUFBSWIsY0FBY1AsS0FBS047UUFDNUQsTUFBTWdDLFdBQVdELGlCQUFpQnJCLGNBQWVnQixJQUFJdkIsS0FBS0UsTUFBTUMsT0FBUTtRQUV4RSxJQUFLc0IsWUFBWUksVUFBVztZQUUzQixPQUFPSixTQUFTSyxRQUFRLElBQUlELFNBQVNDLFFBQVEsR0FBR0wsV0FBV0k7UUFFNUQsT0FBTztZQUVOLE9BQU9KLFlBQVlJLFlBQVk7UUFFaEM7SUFFRDtBQUVEO0FBRXdCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3RocmVlLW1lc2gtYnZoL3NyYy9jb3JlL2Nhc3QvcmF5Y2FzdEZpcnN0LmdlbmVyYXRlZC5qcz9kNWZjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFZlY3RvcjMgfSBmcm9tICd0aHJlZSc7XG5pbXBvcnQgeyBJU19MRUFGLCBPRkZTRVQsIENPVU5ULCBTUExJVF9BWElTLCBMRUZUX05PREUsIFJJR0hUX05PREUgfSBmcm9tICcuLi91dGlscy9ub2RlQnVmZmVyVXRpbHMuanMnO1xuaW1wb3J0IHsgQnVmZmVyU3RhY2sgfSBmcm9tICcuLi91dGlscy9CdWZmZXJTdGFjay5qcyc7XG5pbXBvcnQgeyBpbnRlcnNlY3RSYXkgfSBmcm9tICcuLi91dGlscy9pbnRlcnNlY3RVdGlscy5qcyc7XG5pbXBvcnQgeyBpbnRlcnNlY3RDbG9zZXN0VHJpIH0gZnJvbSAnLi4vdXRpbHMvaXRlcmF0aW9uVXRpbHMuZ2VuZXJhdGVkLmpzJztcbmltcG9ydCAnLi4vdXRpbHMvaXRlcmF0aW9uVXRpbHNfaW5kaXJlY3QuZ2VuZXJhdGVkLmpzJztcblxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyogVGhpcyBmaWxlIGlzIGdlbmVyYXRlZCBmcm9tIFwicmF5Y2FzdEZpcnN0LnRlbXBsYXRlLmpzXCIuICovXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5jb25zdCBfYm94SW50ZXJzZWN0aW9uID0gLyogQF9fUFVSRV9fICovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfeHl6RmllbGRzID0gWyAneCcsICd5JywgJ3onIF07XG5mdW5jdGlvbiByYXljYXN0Rmlyc3QoIGJ2aCwgcm9vdCwgc2lkZSwgcmF5ICkge1xuXG5cdEJ1ZmZlclN0YWNrLnNldEJ1ZmZlciggYnZoLl9yb290c1sgcm9vdCBdICk7XG5cdGNvbnN0IHJlc3VsdCA9IF9yYXljYXN0Rmlyc3QoIDAsIGJ2aCwgc2lkZSwgcmF5ICk7XG5cdEJ1ZmZlclN0YWNrLmNsZWFyQnVmZmVyKCk7XG5cblx0cmV0dXJuIHJlc3VsdDtcblxufVxuXG5mdW5jdGlvbiBfcmF5Y2FzdEZpcnN0KCBub2RlSW5kZXgzMiwgYnZoLCBzaWRlLCByYXkgKSB7XG5cblx0Y29uc3QgeyBmbG9hdDMyQXJyYXksIHVpbnQxNkFycmF5LCB1aW50MzJBcnJheSB9ID0gQnVmZmVyU3RhY2s7XG5cdGxldCBub2RlSW5kZXgxNiA9IG5vZGVJbmRleDMyICogMjtcblxuXHRjb25zdCBpc0xlYWYgPSBJU19MRUFGKCBub2RlSW5kZXgxNiwgdWludDE2QXJyYXkgKTtcblx0aWYgKCBpc0xlYWYgKSB7XG5cblx0XHRjb25zdCBvZmZzZXQgPSBPRkZTRVQoIG5vZGVJbmRleDMyLCB1aW50MzJBcnJheSApO1xuXHRcdGNvbnN0IGNvdW50ID0gQ09VTlQoIG5vZGVJbmRleDE2LCB1aW50MTZBcnJheSApO1xuXG5cblx0XHRyZXR1cm4gaW50ZXJzZWN0Q2xvc2VzdFRyaSggYnZoLCBzaWRlLCByYXksIG9mZnNldCwgY291bnQgKTtcblxuXG5cdH0gZWxzZSB7XG5cblx0XHQvLyBjb25zaWRlciB0aGUgcG9zaXRpb24gb2YgdGhlIHNwbGl0IHBsYW5lIHdpdGggcmVzcGVjdCB0byB0aGUgb25jb21pbmcgcmF5OyB3aGljaGV2ZXIgZGlyZWN0aW9uXG5cdFx0Ly8gdGhlIHJheSBpcyBjb21pbmcgZnJvbSwgbG9vayBmb3IgYW4gaW50ZXJzZWN0aW9uIGFtb25nIHRoYXQgc2lkZSBvZiB0aGUgdHJlZSBmaXJzdFxuXHRcdGNvbnN0IHNwbGl0QXhpcyA9IFNQTElUX0FYSVMoIG5vZGVJbmRleDMyLCB1aW50MzJBcnJheSApO1xuXHRcdGNvbnN0IHh5ekF4aXMgPSBfeHl6RmllbGRzWyBzcGxpdEF4aXMgXTtcblx0XHRjb25zdCByYXlEaXIgPSByYXkuZGlyZWN0aW9uWyB4eXpBeGlzIF07XG5cdFx0Y29uc3QgbGVmdFRvUmlnaHQgPSByYXlEaXIgPj0gMDtcblxuXHRcdC8vIGMxIGlzIHRoZSBjaGlsZCB0byBjaGVjayBmaXJzdFxuXHRcdGxldCBjMSwgYzI7XG5cdFx0aWYgKCBsZWZ0VG9SaWdodCApIHtcblxuXHRcdFx0YzEgPSBMRUZUX05PREUoIG5vZGVJbmRleDMyICk7XG5cdFx0XHRjMiA9IFJJR0hUX05PREUoIG5vZGVJbmRleDMyLCB1aW50MzJBcnJheSApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0YzEgPSBSSUdIVF9OT0RFKCBub2RlSW5kZXgzMiwgdWludDMyQXJyYXkgKTtcblx0XHRcdGMyID0gTEVGVF9OT0RFKCBub2RlSW5kZXgzMiApO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgYzFJbnRlcnNlY3Rpb24gPSBpbnRlcnNlY3RSYXkoIGMxLCBmbG9hdDMyQXJyYXksIHJheSwgX2JveEludGVyc2VjdGlvbiApO1xuXHRcdGNvbnN0IGMxUmVzdWx0ID0gYzFJbnRlcnNlY3Rpb24gPyBfcmF5Y2FzdEZpcnN0KCBjMSwgYnZoLCBzaWRlLCByYXkgKSA6IG51bGw7XG5cblx0XHQvLyBpZiB3ZSBnb3QgYW4gaW50ZXJzZWN0aW9uIGluIHRoZSBmaXJzdCBub2RlIGFuZCBpdCdzIGNsb3NlciB0aGFuIHRoZSBzZWNvbmQgbm9kZSdzIGJvdW5kaW5nXG5cdFx0Ly8gYm94LCB3ZSBkb24ndCBuZWVkIHRvIGNvbnNpZGVyIHRoZSBzZWNvbmQgbm9kZSBiZWNhdXNlIGl0IGNvdWxkbid0IHBvc3NpYmx5IGJlIGEgYmV0dGVyIHJlc3VsdFxuXHRcdGlmICggYzFSZXN1bHQgKSB7XG5cblx0XHRcdC8vIGNoZWNrIGlmIHRoZSBwb2ludCBpcyB3aXRoaW4gdGhlIHNlY29uZCBib3VuZHNcblx0XHRcdC8vIFwicG9pbnRcIiBpcyBpbiB0aGUgbG9jYWwgZnJhbWUgb2YgdGhlIGJ2aFxuXHRcdFx0Y29uc3QgcG9pbnQgPSBjMVJlc3VsdC5wb2ludFsgeHl6QXhpcyBdO1xuXHRcdFx0Y29uc3QgaXNPdXRzaWRlID0gbGVmdFRvUmlnaHQgP1xuXHRcdFx0XHRwb2ludCA8PSBmbG9hdDMyQXJyYXlbIGMyICsgc3BsaXRBeGlzIF0gOiAvLyBtaW4gYm91bmRpbmcgZGF0YVxuXHRcdFx0XHRwb2ludCA+PSBmbG9hdDMyQXJyYXlbIGMyICsgc3BsaXRBeGlzICsgMyBdOyAvLyBtYXggYm91bmRpbmcgZGF0YVxuXG5cdFx0XHRpZiAoIGlzT3V0c2lkZSApIHtcblxuXHRcdFx0XHRyZXR1cm4gYzFSZXN1bHQ7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIGVpdGhlciB0aGVyZSB3YXMgbm8gaW50ZXJzZWN0aW9uIGluIHRoZSBmaXJzdCBub2RlLCBvciB0aGVyZSBjb3VsZCBzdGlsbCBiZSBhIGNsb3NlclxuXHRcdC8vIGludGVyc2VjdGlvbiBpbiB0aGUgc2Vjb25kLCBzbyBjaGVjayB0aGUgc2Vjb25kIG5vZGUgYW5kIHRoZW4gdGFrZSB0aGUgYmV0dGVyIG9mIHRoZSB0d29cblx0XHRjb25zdCBjMkludGVyc2VjdGlvbiA9IGludGVyc2VjdFJheSggYzIsIGZsb2F0MzJBcnJheSwgcmF5LCBfYm94SW50ZXJzZWN0aW9uICk7XG5cdFx0Y29uc3QgYzJSZXN1bHQgPSBjMkludGVyc2VjdGlvbiA/IF9yYXljYXN0Rmlyc3QoIGMyLCBidmgsIHNpZGUsIHJheSApIDogbnVsbDtcblxuXHRcdGlmICggYzFSZXN1bHQgJiYgYzJSZXN1bHQgKSB7XG5cblx0XHRcdHJldHVybiBjMVJlc3VsdC5kaXN0YW5jZSA8PSBjMlJlc3VsdC5kaXN0YW5jZSA/IGMxUmVzdWx0IDogYzJSZXN1bHQ7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRyZXR1cm4gYzFSZXN1bHQgfHwgYzJSZXN1bHQgfHwgbnVsbDtcblxuXHRcdH1cblxuXHR9XG5cbn1cblxuZXhwb3J0IHsgcmF5Y2FzdEZpcnN0IH07XG4iXSwibmFtZXMiOlsiVmVjdG9yMyIsIklTX0xFQUYiLCJPRkZTRVQiLCJDT1VOVCIsIlNQTElUX0FYSVMiLCJMRUZUX05PREUiLCJSSUdIVF9OT0RFIiwiQnVmZmVyU3RhY2siLCJpbnRlcnNlY3RSYXkiLCJpbnRlcnNlY3RDbG9zZXN0VHJpIiwiX2JveEludGVyc2VjdGlvbiIsIl94eXpGaWVsZHMiLCJyYXljYXN0Rmlyc3QiLCJidmgiLCJyb290Iiwic2lkZSIsInJheSIsInNldEJ1ZmZlciIsIl9yb290cyIsInJlc3VsdCIsIl9yYXljYXN0Rmlyc3QiLCJjbGVhckJ1ZmZlciIsIm5vZGVJbmRleDMyIiwiZmxvYXQzMkFycmF5IiwidWludDE2QXJyYXkiLCJ1aW50MzJBcnJheSIsIm5vZGVJbmRleDE2IiwiaXNMZWFmIiwib2Zmc2V0IiwiY291bnQiLCJzcGxpdEF4aXMiLCJ4eXpBeGlzIiwicmF5RGlyIiwiZGlyZWN0aW9uIiwibGVmdFRvUmlnaHQiLCJjMSIsImMyIiwiYzFJbnRlcnNlY3Rpb24iLCJjMVJlc3VsdCIsInBvaW50IiwiaXNPdXRzaWRlIiwiYzJJbnRlcnNlY3Rpb24iLCJjMlJlc3VsdCIsImRpc3RhbmNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/three-mesh-bvh/src/core/cast/raycastFirst.generated.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/three-mesh-bvh/src/core/cast/raycastFirst_indirect.generated.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/three-mesh-bvh/src/core/cast/raycastFirst_indirect.generated.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   raycastFirst_indirect: () => (/* binding */ raycastFirst_indirect)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var _utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/nodeBufferUtils.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/core/utils/nodeBufferUtils.js\");\n/* harmony import */ var _utils_BufferStack_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/BufferStack.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/core/utils/BufferStack.js\");\n/* harmony import */ var _utils_intersectUtils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/intersectUtils.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/core/utils/intersectUtils.js\");\n/* harmony import */ var _utils_iterationUtils_indirect_generated_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/iterationUtils_indirect.generated.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/core/utils/iterationUtils_indirect.generated.js\");\n\n\n\n\n\n\n/***********************************************************/ /* This file is generated from \"raycastFirst.template.js\". */ /***********************************************************/ const _boxIntersection = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\nconst _xyzFields = [\n    \"x\",\n    \"y\",\n    \"z\"\n];\nfunction raycastFirst_indirect(bvh, root, side, ray) {\n    _utils_BufferStack_js__WEBPACK_IMPORTED_MODULE_1__.BufferStack.setBuffer(bvh._roots[root]);\n    const result = _raycastFirst(0, bvh, side, ray);\n    _utils_BufferStack_js__WEBPACK_IMPORTED_MODULE_1__.BufferStack.clearBuffer();\n    return result;\n}\nfunction _raycastFirst(nodeIndex32, bvh, side, ray) {\n    const { float32Array, uint16Array, uint32Array } = _utils_BufferStack_js__WEBPACK_IMPORTED_MODULE_1__.BufferStack;\n    let nodeIndex16 = nodeIndex32 * 2;\n    const isLeaf = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_2__.IS_LEAF)(nodeIndex16, uint16Array);\n    if (isLeaf) {\n        const offset = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_2__.OFFSET)(nodeIndex32, uint32Array);\n        const count = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_2__.COUNT)(nodeIndex16, uint16Array);\n        return (0,_utils_iterationUtils_indirect_generated_js__WEBPACK_IMPORTED_MODULE_3__.intersectClosestTri_indirect)(bvh, side, ray, offset, count);\n    } else {\n        // consider the position of the split plane with respect to the oncoming ray; whichever direction\n        // the ray is coming from, look for an intersection among that side of the tree first\n        const splitAxis = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_2__.SPLIT_AXIS)(nodeIndex32, uint32Array);\n        const xyzAxis = _xyzFields[splitAxis];\n        const rayDir = ray.direction[xyzAxis];\n        const leftToRight = rayDir >= 0;\n        // c1 is the child to check first\n        let c1, c2;\n        if (leftToRight) {\n            c1 = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_2__.LEFT_NODE)(nodeIndex32);\n            c2 = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_2__.RIGHT_NODE)(nodeIndex32, uint32Array);\n        } else {\n            c1 = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_2__.RIGHT_NODE)(nodeIndex32, uint32Array);\n            c2 = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_2__.LEFT_NODE)(nodeIndex32);\n        }\n        const c1Intersection = (0,_utils_intersectUtils_js__WEBPACK_IMPORTED_MODULE_4__.intersectRay)(c1, float32Array, ray, _boxIntersection);\n        const c1Result = c1Intersection ? _raycastFirst(c1, bvh, side, ray) : null;\n        // if we got an intersection in the first node and it's closer than the second node's bounding\n        // box, we don't need to consider the second node because it couldn't possibly be a better result\n        if (c1Result) {\n            // check if the point is within the second bounds\n            // \"point\" is in the local frame of the bvh\n            const point = c1Result.point[xyzAxis];\n            const isOutside = leftToRight ? point <= float32Array[c2 + splitAxis] : point >= float32Array[c2 + splitAxis + 3]; // max bounding data\n            if (isOutside) {\n                return c1Result;\n            }\n        }\n        // either there was no intersection in the first node, or there could still be a closer\n        // intersection in the second, so check the second node and then take the better of the two\n        const c2Intersection = (0,_utils_intersectUtils_js__WEBPACK_IMPORTED_MODULE_4__.intersectRay)(c2, float32Array, ray, _boxIntersection);\n        const c2Result = c2Intersection ? _raycastFirst(c2, bvh, side, ray) : null;\n        if (c1Result && c2Result) {\n            return c1Result.distance <= c2Result.distance ? c1Result : c2Result;\n        } else {\n            return c1Result || c2Result || null;\n        }\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdGhyZWUtbWVzaC1idmgvc3JjL2NvcmUvY2FzdC9yYXljYXN0Rmlyc3RfaW5kaXJlY3QuZ2VuZXJhdGVkLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFnQztBQUN3RTtBQUNsRDtBQUNJO0FBQ1o7QUFDK0M7QUFFN0YsMkRBQTJELEdBQzNELDJEQUEyRCxHQUMzRCwyREFBMkQsR0FDM0QsTUFBTVUsbUJBQW1CLGFBQWEsR0FBRyxJQUFJViwwQ0FBT0E7QUFDcEQsTUFBTVcsYUFBYTtJQUFFO0lBQUs7SUFBSztDQUFLO0FBQ3BDLFNBQVNDLHNCQUF1QkMsR0FBRyxFQUFFQyxJQUFJLEVBQUVDLElBQUksRUFBRUMsR0FBRztJQUVuRFQsOERBQVdBLENBQUNVLFNBQVMsQ0FBRUosSUFBSUssTUFBTSxDQUFFSixLQUFNO0lBQ3pDLE1BQU1LLFNBQVNDLGNBQWUsR0FBR1AsS0FBS0UsTUFBTUM7SUFDNUNULDhEQUFXQSxDQUFDYyxXQUFXO0lBRXZCLE9BQU9GO0FBRVI7QUFFQSxTQUFTQyxjQUFlRSxXQUFXLEVBQUVULEdBQUcsRUFBRUUsSUFBSSxFQUFFQyxHQUFHO0lBRWxELE1BQU0sRUFBRU8sWUFBWSxFQUFFQyxXQUFXLEVBQUVDLFdBQVcsRUFBRSxHQUFHbEIsOERBQVdBO0lBQzlELElBQUltQixjQUFjSixjQUFjO0lBRWhDLE1BQU1LLFNBQVMxQixrRUFBT0EsQ0FBRXlCLGFBQWFGO0lBQ3JDLElBQUtHLFFBQVM7UUFFYixNQUFNQyxTQUFTMUIsaUVBQU1BLENBQUVvQixhQUFhRztRQUNwQyxNQUFNSSxRQUFRMUIsZ0VBQUtBLENBQUV1QixhQUFhRjtRQUVsQyxPQUFPZix5R0FBNEJBLENBQUVJLEtBQUtFLE1BQU1DLEtBQUtZLFFBQVFDO0lBRzlELE9BQU87UUFFTixpR0FBaUc7UUFDakcscUZBQXFGO1FBQ3JGLE1BQU1DLFlBQVkxQixxRUFBVUEsQ0FBRWtCLGFBQWFHO1FBQzNDLE1BQU1NLFVBQVVwQixVQUFVLENBQUVtQixVQUFXO1FBQ3ZDLE1BQU1FLFNBQVNoQixJQUFJaUIsU0FBUyxDQUFFRixRQUFTO1FBQ3ZDLE1BQU1HLGNBQWNGLFVBQVU7UUFFOUIsaUNBQWlDO1FBQ2pDLElBQUlHLElBQUlDO1FBQ1IsSUFBS0YsYUFBYztZQUVsQkMsS0FBSzlCLG9FQUFTQSxDQUFFaUI7WUFDaEJjLEtBQUs5QixxRUFBVUEsQ0FBRWdCLGFBQWFHO1FBRS9CLE9BQU87WUFFTlUsS0FBSzdCLHFFQUFVQSxDQUFFZ0IsYUFBYUc7WUFDOUJXLEtBQUsvQixvRUFBU0EsQ0FBRWlCO1FBRWpCO1FBRUEsTUFBTWUsaUJBQWlCN0Isc0VBQVlBLENBQUUyQixJQUFJWixjQUFjUCxLQUFLTjtRQUM1RCxNQUFNNEIsV0FBV0QsaUJBQWlCakIsY0FBZWUsSUFBSXRCLEtBQUtFLE1BQU1DLE9BQVE7UUFFeEUsOEZBQThGO1FBQzlGLGlHQUFpRztRQUNqRyxJQUFLc0IsVUFBVztZQUVmLGlEQUFpRDtZQUNqRCwyQ0FBMkM7WUFDM0MsTUFBTUMsUUFBUUQsU0FBU0MsS0FBSyxDQUFFUixRQUFTO1lBQ3ZDLE1BQU1TLFlBQVlOLGNBQ2pCSyxTQUFTaEIsWUFBWSxDQUFFYSxLQUFLTixVQUFXLEdBQ3ZDUyxTQUFTaEIsWUFBWSxDQUFFYSxLQUFLTixZQUFZLEVBQUcsRUFBRSxvQkFBb0I7WUFFbEUsSUFBS1UsV0FBWTtnQkFFaEIsT0FBT0Y7WUFFUjtRQUVEO1FBRUEsdUZBQXVGO1FBQ3ZGLDJGQUEyRjtRQUMzRixNQUFNRyxpQkFBaUJqQyxzRUFBWUEsQ0FBRTRCLElBQUliLGNBQWNQLEtBQUtOO1FBQzVELE1BQU1nQyxXQUFXRCxpQkFBaUJyQixjQUFlZ0IsSUFBSXZCLEtBQUtFLE1BQU1DLE9BQVE7UUFFeEUsSUFBS3NCLFlBQVlJLFVBQVc7WUFFM0IsT0FBT0osU0FBU0ssUUFBUSxJQUFJRCxTQUFTQyxRQUFRLEdBQUdMLFdBQVdJO1FBRTVELE9BQU87WUFFTixPQUFPSixZQUFZSSxZQUFZO1FBRWhDO0lBRUQ7QUFFRDtBQUVpQyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90aHJlZS1tZXNoLWJ2aC9zcmMvY29yZS9jYXN0L3JheWNhc3RGaXJzdF9pbmRpcmVjdC5nZW5lcmF0ZWQuanM/OWRmNyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBWZWN0b3IzIH0gZnJvbSAndGhyZWUnO1xuaW1wb3J0IHsgSVNfTEVBRiwgT0ZGU0VULCBDT1VOVCwgU1BMSVRfQVhJUywgTEVGVF9OT0RFLCBSSUdIVF9OT0RFIH0gZnJvbSAnLi4vdXRpbHMvbm9kZUJ1ZmZlclV0aWxzLmpzJztcbmltcG9ydCB7IEJ1ZmZlclN0YWNrIH0gZnJvbSAnLi4vdXRpbHMvQnVmZmVyU3RhY2suanMnO1xuaW1wb3J0IHsgaW50ZXJzZWN0UmF5IH0gZnJvbSAnLi4vdXRpbHMvaW50ZXJzZWN0VXRpbHMuanMnO1xuaW1wb3J0ICcuLi91dGlscy9pdGVyYXRpb25VdGlscy5nZW5lcmF0ZWQuanMnO1xuaW1wb3J0IHsgaW50ZXJzZWN0Q2xvc2VzdFRyaV9pbmRpcmVjdCB9IGZyb20gJy4uL3V0aWxzL2l0ZXJhdGlvblV0aWxzX2luZGlyZWN0LmdlbmVyYXRlZC5qcyc7XG5cbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qIFRoaXMgZmlsZSBpcyBnZW5lcmF0ZWQgZnJvbSBcInJheWNhc3RGaXJzdC50ZW1wbGF0ZS5qc1wiLiAqL1xuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuY29uc3QgX2JveEludGVyc2VjdGlvbiA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgVmVjdG9yMygpO1xuY29uc3QgX3h5ekZpZWxkcyA9IFsgJ3gnLCAneScsICd6JyBdO1xuZnVuY3Rpb24gcmF5Y2FzdEZpcnN0X2luZGlyZWN0KCBidmgsIHJvb3QsIHNpZGUsIHJheSApIHtcblxuXHRCdWZmZXJTdGFjay5zZXRCdWZmZXIoIGJ2aC5fcm9vdHNbIHJvb3QgXSApO1xuXHRjb25zdCByZXN1bHQgPSBfcmF5Y2FzdEZpcnN0KCAwLCBidmgsIHNpZGUsIHJheSApO1xuXHRCdWZmZXJTdGFjay5jbGVhckJ1ZmZlcigpO1xuXG5cdHJldHVybiByZXN1bHQ7XG5cbn1cblxuZnVuY3Rpb24gX3JheWNhc3RGaXJzdCggbm9kZUluZGV4MzIsIGJ2aCwgc2lkZSwgcmF5ICkge1xuXG5cdGNvbnN0IHsgZmxvYXQzMkFycmF5LCB1aW50MTZBcnJheSwgdWludDMyQXJyYXkgfSA9IEJ1ZmZlclN0YWNrO1xuXHRsZXQgbm9kZUluZGV4MTYgPSBub2RlSW5kZXgzMiAqIDI7XG5cblx0Y29uc3QgaXNMZWFmID0gSVNfTEVBRiggbm9kZUluZGV4MTYsIHVpbnQxNkFycmF5ICk7XG5cdGlmICggaXNMZWFmICkge1xuXG5cdFx0Y29uc3Qgb2Zmc2V0ID0gT0ZGU0VUKCBub2RlSW5kZXgzMiwgdWludDMyQXJyYXkgKTtcblx0XHRjb25zdCBjb3VudCA9IENPVU5UKCBub2RlSW5kZXgxNiwgdWludDE2QXJyYXkgKTtcblxuXHRcdHJldHVybiBpbnRlcnNlY3RDbG9zZXN0VHJpX2luZGlyZWN0KCBidmgsIHNpZGUsIHJheSwgb2Zmc2V0LCBjb3VudCApO1xuXG5cblx0fSBlbHNlIHtcblxuXHRcdC8vIGNvbnNpZGVyIHRoZSBwb3NpdGlvbiBvZiB0aGUgc3BsaXQgcGxhbmUgd2l0aCByZXNwZWN0IHRvIHRoZSBvbmNvbWluZyByYXk7IHdoaWNoZXZlciBkaXJlY3Rpb25cblx0XHQvLyB0aGUgcmF5IGlzIGNvbWluZyBmcm9tLCBsb29rIGZvciBhbiBpbnRlcnNlY3Rpb24gYW1vbmcgdGhhdCBzaWRlIG9mIHRoZSB0cmVlIGZpcnN0XG5cdFx0Y29uc3Qgc3BsaXRBeGlzID0gU1BMSVRfQVhJUyggbm9kZUluZGV4MzIsIHVpbnQzMkFycmF5ICk7XG5cdFx0Y29uc3QgeHl6QXhpcyA9IF94eXpGaWVsZHNbIHNwbGl0QXhpcyBdO1xuXHRcdGNvbnN0IHJheURpciA9IHJheS5kaXJlY3Rpb25bIHh5ekF4aXMgXTtcblx0XHRjb25zdCBsZWZ0VG9SaWdodCA9IHJheURpciA+PSAwO1xuXG5cdFx0Ly8gYzEgaXMgdGhlIGNoaWxkIHRvIGNoZWNrIGZpcnN0XG5cdFx0bGV0IGMxLCBjMjtcblx0XHRpZiAoIGxlZnRUb1JpZ2h0ICkge1xuXG5cdFx0XHRjMSA9IExFRlRfTk9ERSggbm9kZUluZGV4MzIgKTtcblx0XHRcdGMyID0gUklHSFRfTk9ERSggbm9kZUluZGV4MzIsIHVpbnQzMkFycmF5ICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRjMSA9IFJJR0hUX05PREUoIG5vZGVJbmRleDMyLCB1aW50MzJBcnJheSApO1xuXHRcdFx0YzIgPSBMRUZUX05PREUoIG5vZGVJbmRleDMyICk7XG5cblx0XHR9XG5cblx0XHRjb25zdCBjMUludGVyc2VjdGlvbiA9IGludGVyc2VjdFJheSggYzEsIGZsb2F0MzJBcnJheSwgcmF5LCBfYm94SW50ZXJzZWN0aW9uICk7XG5cdFx0Y29uc3QgYzFSZXN1bHQgPSBjMUludGVyc2VjdGlvbiA/IF9yYXljYXN0Rmlyc3QoIGMxLCBidmgsIHNpZGUsIHJheSApIDogbnVsbDtcblxuXHRcdC8vIGlmIHdlIGdvdCBhbiBpbnRlcnNlY3Rpb24gaW4gdGhlIGZpcnN0IG5vZGUgYW5kIGl0J3MgY2xvc2VyIHRoYW4gdGhlIHNlY29uZCBub2RlJ3MgYm91bmRpbmdcblx0XHQvLyBib3gsIHdlIGRvbid0IG5lZWQgdG8gY29uc2lkZXIgdGhlIHNlY29uZCBub2RlIGJlY2F1c2UgaXQgY291bGRuJ3QgcG9zc2libHkgYmUgYSBiZXR0ZXIgcmVzdWx0XG5cdFx0aWYgKCBjMVJlc3VsdCApIHtcblxuXHRcdFx0Ly8gY2hlY2sgaWYgdGhlIHBvaW50IGlzIHdpdGhpbiB0aGUgc2Vjb25kIGJvdW5kc1xuXHRcdFx0Ly8gXCJwb2ludFwiIGlzIGluIHRoZSBsb2NhbCBmcmFtZSBvZiB0aGUgYnZoXG5cdFx0XHRjb25zdCBwb2ludCA9IGMxUmVzdWx0LnBvaW50WyB4eXpBeGlzIF07XG5cdFx0XHRjb25zdCBpc091dHNpZGUgPSBsZWZ0VG9SaWdodCA/XG5cdFx0XHRcdHBvaW50IDw9IGZsb2F0MzJBcnJheVsgYzIgKyBzcGxpdEF4aXMgXSA6IC8vIG1pbiBib3VuZGluZyBkYXRhXG5cdFx0XHRcdHBvaW50ID49IGZsb2F0MzJBcnJheVsgYzIgKyBzcGxpdEF4aXMgKyAzIF07IC8vIG1heCBib3VuZGluZyBkYXRhXG5cblx0XHRcdGlmICggaXNPdXRzaWRlICkge1xuXG5cdFx0XHRcdHJldHVybiBjMVJlc3VsdDtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly8gZWl0aGVyIHRoZXJlIHdhcyBubyBpbnRlcnNlY3Rpb24gaW4gdGhlIGZpcnN0IG5vZGUsIG9yIHRoZXJlIGNvdWxkIHN0aWxsIGJlIGEgY2xvc2VyXG5cdFx0Ly8gaW50ZXJzZWN0aW9uIGluIHRoZSBzZWNvbmQsIHNvIGNoZWNrIHRoZSBzZWNvbmQgbm9kZSBhbmQgdGhlbiB0YWtlIHRoZSBiZXR0ZXIgb2YgdGhlIHR3b1xuXHRcdGNvbnN0IGMySW50ZXJzZWN0aW9uID0gaW50ZXJzZWN0UmF5KCBjMiwgZmxvYXQzMkFycmF5LCByYXksIF9ib3hJbnRlcnNlY3Rpb24gKTtcblx0XHRjb25zdCBjMlJlc3VsdCA9IGMySW50ZXJzZWN0aW9uID8gX3JheWNhc3RGaXJzdCggYzIsIGJ2aCwgc2lkZSwgcmF5ICkgOiBudWxsO1xuXG5cdFx0aWYgKCBjMVJlc3VsdCAmJiBjMlJlc3VsdCApIHtcblxuXHRcdFx0cmV0dXJuIGMxUmVzdWx0LmRpc3RhbmNlIDw9IGMyUmVzdWx0LmRpc3RhbmNlID8gYzFSZXN1bHQgOiBjMlJlc3VsdDtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHJldHVybiBjMVJlc3VsdCB8fCBjMlJlc3VsdCB8fCBudWxsO1xuXG5cdFx0fVxuXG5cdH1cblxufVxuXG5leHBvcnQgeyByYXljYXN0Rmlyc3RfaW5kaXJlY3QgfTtcbiJdLCJuYW1lcyI6WyJWZWN0b3IzIiwiSVNfTEVBRiIsIk9GRlNFVCIsIkNPVU5UIiwiU1BMSVRfQVhJUyIsIkxFRlRfTk9ERSIsIlJJR0hUX05PREUiLCJCdWZmZXJTdGFjayIsImludGVyc2VjdFJheSIsImludGVyc2VjdENsb3Nlc3RUcmlfaW5kaXJlY3QiLCJfYm94SW50ZXJzZWN0aW9uIiwiX3h5ekZpZWxkcyIsInJheWNhc3RGaXJzdF9pbmRpcmVjdCIsImJ2aCIsInJvb3QiLCJzaWRlIiwicmF5Iiwic2V0QnVmZmVyIiwiX3Jvb3RzIiwicmVzdWx0IiwiX3JheWNhc3RGaXJzdCIsImNsZWFyQnVmZmVyIiwibm9kZUluZGV4MzIiLCJmbG9hdDMyQXJyYXkiLCJ1aW50MTZBcnJheSIsInVpbnQzMkFycmF5Iiwibm9kZUluZGV4MTYiLCJpc0xlYWYiLCJvZmZzZXQiLCJjb3VudCIsInNwbGl0QXhpcyIsInh5ekF4aXMiLCJyYXlEaXIiLCJkaXJlY3Rpb24iLCJsZWZ0VG9SaWdodCIsImMxIiwiYzIiLCJjMUludGVyc2VjdGlvbiIsImMxUmVzdWx0IiwicG9pbnQiLCJpc091dHNpZGUiLCJjMkludGVyc2VjdGlvbiIsImMyUmVzdWx0IiwiZGlzdGFuY2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/three-mesh-bvh/src/core/cast/raycastFirst_indirect.generated.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/three-mesh-bvh/src/core/cast/raycast_indirect.generated.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/three-mesh-bvh/src/core/cast/raycast_indirect.generated.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   raycast_indirect: () => (/* binding */ raycast_indirect)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var _utils_intersectUtils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/intersectUtils.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/core/utils/intersectUtils.js\");\n/* harmony import */ var _utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/nodeBufferUtils.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/core/utils/nodeBufferUtils.js\");\n/* harmony import */ var _utils_BufferStack_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/BufferStack.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/core/utils/BufferStack.js\");\n/* harmony import */ var _utils_iterationUtils_indirect_generated_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/iterationUtils_indirect.generated.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/core/utils/iterationUtils_indirect.generated.js\");\n\n\n\n\n\n\n/******************************************************/ /* This file is generated from \"raycast.template.js\". */ /******************************************************/ const _boxIntersection = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\nfunction raycast_indirect(bvh, root, side, ray, intersects) {\n    _utils_BufferStack_js__WEBPACK_IMPORTED_MODULE_1__.BufferStack.setBuffer(bvh._roots[root]);\n    _raycast(0, bvh, side, ray, intersects);\n    _utils_BufferStack_js__WEBPACK_IMPORTED_MODULE_1__.BufferStack.clearBuffer();\n}\nfunction _raycast(nodeIndex32, bvh, side, ray, intersects) {\n    const { float32Array, uint16Array, uint32Array } = _utils_BufferStack_js__WEBPACK_IMPORTED_MODULE_1__.BufferStack;\n    const nodeIndex16 = nodeIndex32 * 2;\n    const isLeaf = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_2__.IS_LEAF)(nodeIndex16, uint16Array);\n    if (isLeaf) {\n        const offset = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_2__.OFFSET)(nodeIndex32, uint32Array);\n        const count = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_2__.COUNT)(nodeIndex16, uint16Array);\n        (0,_utils_iterationUtils_indirect_generated_js__WEBPACK_IMPORTED_MODULE_3__.intersectTris_indirect)(bvh, side, ray, offset, count, intersects);\n    } else {\n        const leftIndex = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_2__.LEFT_NODE)(nodeIndex32);\n        if ((0,_utils_intersectUtils_js__WEBPACK_IMPORTED_MODULE_4__.intersectRay)(leftIndex, float32Array, ray, _boxIntersection)) {\n            _raycast(leftIndex, bvh, side, ray, intersects);\n        }\n        const rightIndex = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_2__.RIGHT_NODE)(nodeIndex32, uint32Array);\n        if ((0,_utils_intersectUtils_js__WEBPACK_IMPORTED_MODULE_4__.intersectRay)(rightIndex, float32Array, ray, _boxIntersection)) {\n            _raycast(rightIndex, bvh, side, ray, intersects);\n        }\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdGhyZWUtbWVzaC1idmgvc3JjL2NvcmUvY2FzdC9yYXljYXN0X2luZGlyZWN0LmdlbmVyYXRlZC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBZ0M7QUFDMEI7QUFDa0M7QUFDdEM7QUFDUjtBQUN5QztBQUV2RixzREFBc0QsR0FDdEQsc0RBQXNELEdBQ3RELHNEQUFzRCxHQUV0RCxNQUFNUyxtQkFBbUIsYUFBYSxHQUFHLElBQUlULDBDQUFPQTtBQUNwRCxTQUFTVSxpQkFBa0JDLEdBQUcsRUFBRUMsSUFBSSxFQUFFQyxJQUFJLEVBQUVDLEdBQUcsRUFBRUMsVUFBVTtJQUUxRFIsOERBQVdBLENBQUNTLFNBQVMsQ0FBRUwsSUFBSU0sTUFBTSxDQUFFTCxLQUFNO0lBQ3pDTSxTQUFVLEdBQUdQLEtBQUtFLE1BQU1DLEtBQUtDO0lBQzdCUiw4REFBV0EsQ0FBQ1ksV0FBVztBQUV4QjtBQUVBLFNBQVNELFNBQVVFLFdBQVcsRUFBRVQsR0FBRyxFQUFFRSxJQUFJLEVBQUVDLEdBQUcsRUFBRUMsVUFBVTtJQUV6RCxNQUFNLEVBQUVNLFlBQVksRUFBRUMsV0FBVyxFQUFFQyxXQUFXLEVBQUUsR0FBR2hCLDhEQUFXQTtJQUM5RCxNQUFNaUIsY0FBY0osY0FBYztJQUNsQyxNQUFNSyxTQUFTdkIsa0VBQU9BLENBQUVzQixhQUFhRjtJQUNyQyxJQUFLRyxRQUFTO1FBRWIsTUFBTUMsU0FBU3ZCLGlFQUFNQSxDQUFFaUIsYUFBYUc7UUFDcEMsTUFBTUksUUFBUXZCLGdFQUFLQSxDQUFFb0IsYUFBYUY7UUFFbENkLG1HQUFzQkEsQ0FBRUcsS0FBS0UsTUFBTUMsS0FBS1ksUUFBUUMsT0FBT1o7SUFHeEQsT0FBTztRQUVOLE1BQU1hLFlBQVl2QixvRUFBU0EsQ0FBRWU7UUFDN0IsSUFBS25CLHNFQUFZQSxDQUFFMkIsV0FBV1AsY0FBY1AsS0FBS0wsbUJBQXFCO1lBRXJFUyxTQUFVVSxXQUFXakIsS0FBS0UsTUFBTUMsS0FBS0M7UUFFdEM7UUFFQSxNQUFNYyxhQUFhdkIscUVBQVVBLENBQUVjLGFBQWFHO1FBQzVDLElBQUt0QixzRUFBWUEsQ0FBRTRCLFlBQVlSLGNBQWNQLEtBQUtMLG1CQUFxQjtZQUV0RVMsU0FBVVcsWUFBWWxCLEtBQUtFLE1BQU1DLEtBQUtDO1FBRXZDO0lBRUQ7QUFFRDtBQUU0QiIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90aHJlZS1tZXNoLWJ2aC9zcmMvY29yZS9jYXN0L3JheWNhc3RfaW5kaXJlY3QuZ2VuZXJhdGVkLmpzP2MxYTAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gJ3RocmVlJztcbmltcG9ydCB7IGludGVyc2VjdFJheSB9IGZyb20gJy4uL3V0aWxzL2ludGVyc2VjdFV0aWxzLmpzJztcbmltcG9ydCB7IElTX0xFQUYsIE9GRlNFVCwgQ09VTlQsIExFRlRfTk9ERSwgUklHSFRfTk9ERSB9IGZyb20gJy4uL3V0aWxzL25vZGVCdWZmZXJVdGlscy5qcyc7XG5pbXBvcnQgeyBCdWZmZXJTdGFjayB9IGZyb20gJy4uL3V0aWxzL0J1ZmZlclN0YWNrLmpzJztcbmltcG9ydCAnLi4vdXRpbHMvaXRlcmF0aW9uVXRpbHMuZ2VuZXJhdGVkLmpzJztcbmltcG9ydCB7IGludGVyc2VjdFRyaXNfaW5kaXJlY3QgfSBmcm9tICcuLi91dGlscy9pdGVyYXRpb25VdGlsc19pbmRpcmVjdC5nZW5lcmF0ZWQuanMnO1xuXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyogVGhpcyBmaWxlIGlzIGdlbmVyYXRlZCBmcm9tIFwicmF5Y2FzdC50ZW1wbGF0ZS5qc1wiLiAqL1xuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuY29uc3QgX2JveEludGVyc2VjdGlvbiA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgVmVjdG9yMygpO1xuZnVuY3Rpb24gcmF5Y2FzdF9pbmRpcmVjdCggYnZoLCByb290LCBzaWRlLCByYXksIGludGVyc2VjdHMgKSB7XG5cblx0QnVmZmVyU3RhY2suc2V0QnVmZmVyKCBidmguX3Jvb3RzWyByb290IF0gKTtcblx0X3JheWNhc3QoIDAsIGJ2aCwgc2lkZSwgcmF5LCBpbnRlcnNlY3RzICk7XG5cdEJ1ZmZlclN0YWNrLmNsZWFyQnVmZmVyKCk7XG5cbn1cblxuZnVuY3Rpb24gX3JheWNhc3QoIG5vZGVJbmRleDMyLCBidmgsIHNpZGUsIHJheSwgaW50ZXJzZWN0cyApIHtcblxuXHRjb25zdCB7IGZsb2F0MzJBcnJheSwgdWludDE2QXJyYXksIHVpbnQzMkFycmF5IH0gPSBCdWZmZXJTdGFjaztcblx0Y29uc3Qgbm9kZUluZGV4MTYgPSBub2RlSW5kZXgzMiAqIDI7XG5cdGNvbnN0IGlzTGVhZiA9IElTX0xFQUYoIG5vZGVJbmRleDE2LCB1aW50MTZBcnJheSApO1xuXHRpZiAoIGlzTGVhZiApIHtcblxuXHRcdGNvbnN0IG9mZnNldCA9IE9GRlNFVCggbm9kZUluZGV4MzIsIHVpbnQzMkFycmF5ICk7XG5cdFx0Y29uc3QgY291bnQgPSBDT1VOVCggbm9kZUluZGV4MTYsIHVpbnQxNkFycmF5ICk7XG5cblx0XHRpbnRlcnNlY3RUcmlzX2luZGlyZWN0KCBidmgsIHNpZGUsIHJheSwgb2Zmc2V0LCBjb3VudCwgaW50ZXJzZWN0cyApO1xuXG5cblx0fSBlbHNlIHtcblxuXHRcdGNvbnN0IGxlZnRJbmRleCA9IExFRlRfTk9ERSggbm9kZUluZGV4MzIgKTtcblx0XHRpZiAoIGludGVyc2VjdFJheSggbGVmdEluZGV4LCBmbG9hdDMyQXJyYXksIHJheSwgX2JveEludGVyc2VjdGlvbiApICkge1xuXG5cdFx0XHRfcmF5Y2FzdCggbGVmdEluZGV4LCBidmgsIHNpZGUsIHJheSwgaW50ZXJzZWN0cyApO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgcmlnaHRJbmRleCA9IFJJR0hUX05PREUoIG5vZGVJbmRleDMyLCB1aW50MzJBcnJheSApO1xuXHRcdGlmICggaW50ZXJzZWN0UmF5KCByaWdodEluZGV4LCBmbG9hdDMyQXJyYXksIHJheSwgX2JveEludGVyc2VjdGlvbiApICkge1xuXG5cdFx0XHRfcmF5Y2FzdCggcmlnaHRJbmRleCwgYnZoLCBzaWRlLCByYXksIGludGVyc2VjdHMgKTtcblxuXHRcdH1cblxuXHR9XG5cbn1cblxuZXhwb3J0IHsgcmF5Y2FzdF9pbmRpcmVjdCB9O1xuIl0sIm5hbWVzIjpbIlZlY3RvcjMiLCJpbnRlcnNlY3RSYXkiLCJJU19MRUFGIiwiT0ZGU0VUIiwiQ09VTlQiLCJMRUZUX05PREUiLCJSSUdIVF9OT0RFIiwiQnVmZmVyU3RhY2siLCJpbnRlcnNlY3RUcmlzX2luZGlyZWN0IiwiX2JveEludGVyc2VjdGlvbiIsInJheWNhc3RfaW5kaXJlY3QiLCJidmgiLCJyb290Iiwic2lkZSIsInJheSIsImludGVyc2VjdHMiLCJzZXRCdWZmZXIiLCJfcm9vdHMiLCJfcmF5Y2FzdCIsImNsZWFyQnVmZmVyIiwibm9kZUluZGV4MzIiLCJmbG9hdDMyQXJyYXkiLCJ1aW50MTZBcnJheSIsInVpbnQzMkFycmF5Iiwibm9kZUluZGV4MTYiLCJpc0xlYWYiLCJvZmZzZXQiLCJjb3VudCIsImxlZnRJbmRleCIsInJpZ2h0SW5kZXgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/three-mesh-bvh/src/core/cast/raycast_indirect.generated.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/three-mesh-bvh/src/core/cast/refit.generated.js":
/*!**********************************************************************!*\
  !*** ./node_modules/three-mesh-bvh/src/core/cast/refit.generated.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   refit: () => (/* binding */ refit)\n/* harmony export */ });\n/* harmony import */ var _Constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Constants.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/core/Constants.js\");\n\n/****************************************************/ /* This file is generated from \"refit.template.js\". */ /****************************************************/ function refit(bvh, nodeIndices = null) {\n    if (nodeIndices && Array.isArray(nodeIndices)) {\n        nodeIndices = new Set(nodeIndices);\n    }\n    const geometry = bvh.geometry;\n    const indexArr = geometry.index ? geometry.index.array : null;\n    const posAttr = geometry.attributes.position;\n    let buffer, uint32Array, uint16Array, float32Array;\n    let byteOffset = 0;\n    const roots = bvh._roots;\n    for(let i = 0, l = roots.length; i < l; i++){\n        buffer = roots[i];\n        uint32Array = new Uint32Array(buffer);\n        uint16Array = new Uint16Array(buffer);\n        float32Array = new Float32Array(buffer);\n        _traverse(0, byteOffset);\n        byteOffset += buffer.byteLength;\n    }\n    function _traverse(node32Index, byteOffset, force = false) {\n        const node16Index = node32Index * 2;\n        const isLeaf = uint16Array[node16Index + 15] === _Constants_js__WEBPACK_IMPORTED_MODULE_0__.IS_LEAFNODE_FLAG;\n        if (isLeaf) {\n            const offset = uint32Array[node32Index + 6];\n            const count = uint16Array[node16Index + 14];\n            let minx = Infinity;\n            let miny = Infinity;\n            let minz = Infinity;\n            let maxx = -Infinity;\n            let maxy = -Infinity;\n            let maxz = -Infinity;\n            for(let i = 3 * offset, l = 3 * (offset + count); i < l; i++){\n                let index = indexArr[i];\n                const x = posAttr.getX(index);\n                const y = posAttr.getY(index);\n                const z = posAttr.getZ(index);\n                if (x < minx) minx = x;\n                if (x > maxx) maxx = x;\n                if (y < miny) miny = y;\n                if (y > maxy) maxy = y;\n                if (z < minz) minz = z;\n                if (z > maxz) maxz = z;\n            }\n            if (float32Array[node32Index + 0] !== minx || float32Array[node32Index + 1] !== miny || float32Array[node32Index + 2] !== minz || float32Array[node32Index + 3] !== maxx || float32Array[node32Index + 4] !== maxy || float32Array[node32Index + 5] !== maxz) {\n                float32Array[node32Index + 0] = minx;\n                float32Array[node32Index + 1] = miny;\n                float32Array[node32Index + 2] = minz;\n                float32Array[node32Index + 3] = maxx;\n                float32Array[node32Index + 4] = maxy;\n                float32Array[node32Index + 5] = maxz;\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            const left = node32Index + 8;\n            const right = uint32Array[node32Index + 6];\n            // the identifying node indices provided by the shapecast function include offsets of all\n            // root buffers to guarantee they're unique between roots so offset left and right indices here.\n            const offsetLeft = left + byteOffset;\n            const offsetRight = right + byteOffset;\n            let forceChildren = force;\n            let includesLeft = false;\n            let includesRight = false;\n            if (nodeIndices) {\n                // if we see that neither the left or right child are included in the set that need to be updated\n                // then we assume that all children need to be updated.\n                if (!forceChildren) {\n                    includesLeft = nodeIndices.has(offsetLeft);\n                    includesRight = nodeIndices.has(offsetRight);\n                    forceChildren = !includesLeft && !includesRight;\n                }\n            } else {\n                includesLeft = true;\n                includesRight = true;\n            }\n            const traverseLeft = forceChildren || includesLeft;\n            const traverseRight = forceChildren || includesRight;\n            let leftChange = false;\n            if (traverseLeft) {\n                leftChange = _traverse(left, byteOffset, forceChildren);\n            }\n            let rightChange = false;\n            if (traverseRight) {\n                rightChange = _traverse(right, byteOffset, forceChildren);\n            }\n            const didChange = leftChange || rightChange;\n            if (didChange) {\n                for(let i = 0; i < 3; i++){\n                    const lefti = left + i;\n                    const righti = right + i;\n                    const minLeftValue = float32Array[lefti];\n                    const maxLeftValue = float32Array[lefti + 3];\n                    const minRightValue = float32Array[righti];\n                    const maxRightValue = float32Array[righti + 3];\n                    float32Array[node32Index + i] = minLeftValue < minRightValue ? minLeftValue : minRightValue;\n                    float32Array[node32Index + i + 3] = maxLeftValue > maxRightValue ? maxLeftValue : maxRightValue;\n                }\n            }\n            return didChange;\n        }\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/three-mesh-bvh/src/core/cast/refit.generated.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/three-mesh-bvh/src/core/cast/refit_indirect.generated.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/three-mesh-bvh/src/core/cast/refit_indirect.generated.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   refit_indirect: () => (/* binding */ refit_indirect)\n/* harmony export */ });\n/* harmony import */ var _Constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Constants.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/core/Constants.js\");\n\n/****************************************************/ /* This file is generated from \"refit.template.js\". */ /****************************************************/ function refit_indirect(bvh, nodeIndices = null) {\n    if (nodeIndices && Array.isArray(nodeIndices)) {\n        nodeIndices = new Set(nodeIndices);\n    }\n    const geometry = bvh.geometry;\n    const indexArr = geometry.index ? geometry.index.array : null;\n    const posAttr = geometry.attributes.position;\n    let buffer, uint32Array, uint16Array, float32Array;\n    let byteOffset = 0;\n    const roots = bvh._roots;\n    for(let i = 0, l = roots.length; i < l; i++){\n        buffer = roots[i];\n        uint32Array = new Uint32Array(buffer);\n        uint16Array = new Uint16Array(buffer);\n        float32Array = new Float32Array(buffer);\n        _traverse(0, byteOffset);\n        byteOffset += buffer.byteLength;\n    }\n    function _traverse(node32Index, byteOffset, force = false) {\n        const node16Index = node32Index * 2;\n        const isLeaf = uint16Array[node16Index + 15] === _Constants_js__WEBPACK_IMPORTED_MODULE_0__.IS_LEAFNODE_FLAG;\n        if (isLeaf) {\n            const offset = uint32Array[node32Index + 6];\n            const count = uint16Array[node16Index + 14];\n            let minx = Infinity;\n            let miny = Infinity;\n            let minz = Infinity;\n            let maxx = -Infinity;\n            let maxy = -Infinity;\n            let maxz = -Infinity;\n            for(let i = offset, l = offset + count; i < l; i++){\n                const t = 3 * bvh.resolveTriangleIndex(i);\n                for(let j = 0; j < 3; j++){\n                    let index = t + j;\n                    index = indexArr ? indexArr[index] : index;\n                    const x = posAttr.getX(index);\n                    const y = posAttr.getY(index);\n                    const z = posAttr.getZ(index);\n                    if (x < minx) minx = x;\n                    if (x > maxx) maxx = x;\n                    if (y < miny) miny = y;\n                    if (y > maxy) maxy = y;\n                    if (z < minz) minz = z;\n                    if (z > maxz) maxz = z;\n                }\n            }\n            if (float32Array[node32Index + 0] !== minx || float32Array[node32Index + 1] !== miny || float32Array[node32Index + 2] !== minz || float32Array[node32Index + 3] !== maxx || float32Array[node32Index + 4] !== maxy || float32Array[node32Index + 5] !== maxz) {\n                float32Array[node32Index + 0] = minx;\n                float32Array[node32Index + 1] = miny;\n                float32Array[node32Index + 2] = minz;\n                float32Array[node32Index + 3] = maxx;\n                float32Array[node32Index + 4] = maxy;\n                float32Array[node32Index + 5] = maxz;\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            const left = node32Index + 8;\n            const right = uint32Array[node32Index + 6];\n            // the identifying node indices provided by the shapecast function include offsets of all\n            // root buffers to guarantee they're unique between roots so offset left and right indices here.\n            const offsetLeft = left + byteOffset;\n            const offsetRight = right + byteOffset;\n            let forceChildren = force;\n            let includesLeft = false;\n            let includesRight = false;\n            if (nodeIndices) {\n                // if we see that neither the left or right child are included in the set that need to be updated\n                // then we assume that all children need to be updated.\n                if (!forceChildren) {\n                    includesLeft = nodeIndices.has(offsetLeft);\n                    includesRight = nodeIndices.has(offsetRight);\n                    forceChildren = !includesLeft && !includesRight;\n                }\n            } else {\n                includesLeft = true;\n                includesRight = true;\n            }\n            const traverseLeft = forceChildren || includesLeft;\n            const traverseRight = forceChildren || includesRight;\n            let leftChange = false;\n            if (traverseLeft) {\n                leftChange = _traverse(left, byteOffset, forceChildren);\n            }\n            let rightChange = false;\n            if (traverseRight) {\n                rightChange = _traverse(right, byteOffset, forceChildren);\n            }\n            const didChange = leftChange || rightChange;\n            if (didChange) {\n                for(let i = 0; i < 3; i++){\n                    const lefti = left + i;\n                    const righti = right + i;\n                    const minLeftValue = float32Array[lefti];\n                    const maxLeftValue = float32Array[lefti + 3];\n                    const minRightValue = float32Array[righti];\n                    const maxRightValue = float32Array[righti + 3];\n                    float32Array[node32Index + i] = minLeftValue < minRightValue ? minLeftValue : minRightValue;\n                    float32Array[node32Index + i + 3] = maxLeftValue > maxRightValue ? maxLeftValue : maxRightValue;\n                }\n            }\n            return didChange;\n        }\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/three-mesh-bvh/src/core/cast/refit_indirect.generated.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/three-mesh-bvh/src/core/cast/shapecast.js":
/*!****************************************************************!*\
  !*** ./node_modules/three-mesh-bvh/src/core/cast/shapecast.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   shapecast: () => (/* binding */ shapecast)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var _Constants_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../Constants.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/core/Constants.js\");\n/* harmony import */ var _utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utils/ArrayBoxUtilities.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/utils/ArrayBoxUtilities.js\");\n/* harmony import */ var _utils_PrimitivePool_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/PrimitivePool.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/utils/PrimitivePool.js\");\n/* harmony import */ var _utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/nodeBufferUtils.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/core/utils/nodeBufferUtils.js\");\n/* harmony import */ var _utils_BufferStack_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/BufferStack.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/core/utils/BufferStack.js\");\n\n\n\n\n\n\nlet _box1, _box2;\nconst boxStack = [];\nconst boxPool = /* @__PURE__ */ new _utils_PrimitivePool_js__WEBPACK_IMPORTED_MODULE_0__.PrimitivePool(()=>new three__WEBPACK_IMPORTED_MODULE_1__.Box3());\nfunction shapecast(bvh, root, intersectsBounds, intersectsRange, boundsTraverseOrder, byteOffset) {\n    // setup\n    _box1 = boxPool.getPrimitive();\n    _box2 = boxPool.getPrimitive();\n    boxStack.push(_box1, _box2);\n    _utils_BufferStack_js__WEBPACK_IMPORTED_MODULE_2__.BufferStack.setBuffer(bvh._roots[root]);\n    const result = shapecastTraverse(0, bvh.geometry, intersectsBounds, intersectsRange, boundsTraverseOrder, byteOffset);\n    // cleanup\n    _utils_BufferStack_js__WEBPACK_IMPORTED_MODULE_2__.BufferStack.clearBuffer();\n    boxPool.releasePrimitive(_box1);\n    boxPool.releasePrimitive(_box2);\n    boxStack.pop();\n    boxStack.pop();\n    const length = boxStack.length;\n    if (length > 0) {\n        _box2 = boxStack[length - 1];\n        _box1 = boxStack[length - 2];\n    }\n    return result;\n}\nfunction shapecastTraverse(nodeIndex32, geometry, intersectsBoundsFunc, intersectsRangeFunc, nodeScoreFunc = null, nodeIndexByteOffset = 0, depth = 0) {\n    const { float32Array, uint16Array, uint32Array } = _utils_BufferStack_js__WEBPACK_IMPORTED_MODULE_2__.BufferStack;\n    let nodeIndex16 = nodeIndex32 * 2;\n    const isLeaf = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_3__.IS_LEAF)(nodeIndex16, uint16Array);\n    if (isLeaf) {\n        const offset = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_3__.OFFSET)(nodeIndex32, uint32Array);\n        const count = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_3__.COUNT)(nodeIndex16, uint16Array);\n        (0,_utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_4__.arrayToBox)((0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_3__.BOUNDING_DATA_INDEX)(nodeIndex32), float32Array, _box1);\n        return intersectsRangeFunc(offset, count, false, depth, nodeIndexByteOffset + nodeIndex32, _box1);\n    } else {\n        const left = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_3__.LEFT_NODE)(nodeIndex32);\n        const right = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_3__.RIGHT_NODE)(nodeIndex32, uint32Array);\n        let c1 = left;\n        let c2 = right;\n        let score1, score2;\n        let box1, box2;\n        if (nodeScoreFunc) {\n            box1 = _box1;\n            box2 = _box2;\n            // bounding data is not offset\n            (0,_utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_4__.arrayToBox)((0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_3__.BOUNDING_DATA_INDEX)(c1), float32Array, box1);\n            (0,_utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_4__.arrayToBox)((0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_3__.BOUNDING_DATA_INDEX)(c2), float32Array, box2);\n            score1 = nodeScoreFunc(box1);\n            score2 = nodeScoreFunc(box2);\n            if (score2 < score1) {\n                c1 = right;\n                c2 = left;\n                const temp = score1;\n                score1 = score2;\n                score2 = temp;\n                box1 = box2;\n            // box2 is always set before use below\n            }\n        }\n        // Check box 1 intersection\n        if (!box1) {\n            box1 = _box1;\n            (0,_utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_4__.arrayToBox)((0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_3__.BOUNDING_DATA_INDEX)(c1), float32Array, box1);\n        }\n        const isC1Leaf = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_3__.IS_LEAF)(c1 * 2, uint16Array);\n        const c1Intersection = intersectsBoundsFunc(box1, isC1Leaf, score1, depth + 1, nodeIndexByteOffset + c1);\n        let c1StopTraversal;\n        if (c1Intersection === _Constants_js__WEBPACK_IMPORTED_MODULE_5__.CONTAINED) {\n            const offset = getLeftOffset(c1);\n            const end = getRightEndOffset(c1);\n            const count = end - offset;\n            c1StopTraversal = intersectsRangeFunc(offset, count, true, depth + 1, nodeIndexByteOffset + c1, box1);\n        } else {\n            c1StopTraversal = c1Intersection && shapecastTraverse(c1, geometry, intersectsBoundsFunc, intersectsRangeFunc, nodeScoreFunc, nodeIndexByteOffset, depth + 1);\n        }\n        if (c1StopTraversal) return true;\n        // Check box 2 intersection\n        // cached box2 will have been overwritten by previous traversal\n        box2 = _box2;\n        (0,_utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_4__.arrayToBox)((0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_3__.BOUNDING_DATA_INDEX)(c2), float32Array, box2);\n        const isC2Leaf = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_3__.IS_LEAF)(c2 * 2, uint16Array);\n        const c2Intersection = intersectsBoundsFunc(box2, isC2Leaf, score2, depth + 1, nodeIndexByteOffset + c2);\n        let c2StopTraversal;\n        if (c2Intersection === _Constants_js__WEBPACK_IMPORTED_MODULE_5__.CONTAINED) {\n            const offset = getLeftOffset(c2);\n            const end = getRightEndOffset(c2);\n            const count = end - offset;\n            c2StopTraversal = intersectsRangeFunc(offset, count, true, depth + 1, nodeIndexByteOffset + c2, box2);\n        } else {\n            c2StopTraversal = c2Intersection && shapecastTraverse(c2, geometry, intersectsBoundsFunc, intersectsRangeFunc, nodeScoreFunc, nodeIndexByteOffset, depth + 1);\n        }\n        if (c2StopTraversal) return true;\n        return false;\n        // Define these inside the function so it has access to the local variables needed\n        // when converting to the buffer equivalents\n        function getLeftOffset(nodeIndex32) {\n            const { uint16Array, uint32Array } = _utils_BufferStack_js__WEBPACK_IMPORTED_MODULE_2__.BufferStack;\n            let nodeIndex16 = nodeIndex32 * 2;\n            // traverse until we find a leaf\n            while(!(0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_3__.IS_LEAF)(nodeIndex16, uint16Array)){\n                nodeIndex32 = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_3__.LEFT_NODE)(nodeIndex32);\n                nodeIndex16 = nodeIndex32 * 2;\n            }\n            return (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_3__.OFFSET)(nodeIndex32, uint32Array);\n        }\n        function getRightEndOffset(nodeIndex32) {\n            const { uint16Array, uint32Array } = _utils_BufferStack_js__WEBPACK_IMPORTED_MODULE_2__.BufferStack;\n            let nodeIndex16 = nodeIndex32 * 2;\n            // traverse until we find a leaf\n            while(!(0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_3__.IS_LEAF)(nodeIndex16, uint16Array)){\n                // adjust offset to point to the right node\n                nodeIndex32 = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_3__.RIGHT_NODE)(nodeIndex32, uint32Array);\n                nodeIndex16 = nodeIndex32 * 2;\n            }\n            // return the end offset of the triangle range\n            return (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_3__.OFFSET)(nodeIndex32, uint32Array) + (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_3__.COUNT)(nodeIndex16, uint16Array);\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/three-mesh-bvh/src/core/cast/shapecast.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/three-mesh-bvh/src/core/utils/BufferStack.js":
/*!*******************************************************************!*\
  !*** ./node_modules/three-mesh-bvh/src/core/utils/BufferStack.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BufferStack: () => (/* binding */ BufferStack)\n/* harmony export */ });\nclass _BufferStack {\n    constructor(){\n        this.float32Array = null;\n        this.uint16Array = null;\n        this.uint32Array = null;\n        const stack = [];\n        let prevBuffer = null;\n        this.setBuffer = (buffer)=>{\n            if (prevBuffer) {\n                stack.push(prevBuffer);\n            }\n            prevBuffer = buffer;\n            this.float32Array = new Float32Array(buffer);\n            this.uint16Array = new Uint16Array(buffer);\n            this.uint32Array = new Uint32Array(buffer);\n        };\n        this.clearBuffer = ()=>{\n            prevBuffer = null;\n            this.float32Array = null;\n            this.uint16Array = null;\n            this.uint32Array = null;\n            if (stack.length !== 0) {\n                this.setBuffer(stack.pop());\n            }\n        };\n    }\n}\nconst BufferStack = new _BufferStack();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdGhyZWUtbWVzaC1idmgvc3JjL2NvcmUvdXRpbHMvQnVmZmVyU3RhY2suanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE1BQU1BO0lBRUxDLGFBQWM7UUFFYixJQUFJLENBQUNDLFlBQVksR0FBRztRQUNwQixJQUFJLENBQUNDLFdBQVcsR0FBRztRQUNuQixJQUFJLENBQUNDLFdBQVcsR0FBRztRQUVuQixNQUFNQyxRQUFRLEVBQUU7UUFDaEIsSUFBSUMsYUFBYTtRQUNqQixJQUFJLENBQUNDLFNBQVMsR0FBR0MsQ0FBQUE7WUFFaEIsSUFBS0YsWUFBYTtnQkFFakJELE1BQU1JLElBQUksQ0FBRUg7WUFFYjtZQUVBQSxhQUFhRTtZQUNiLElBQUksQ0FBQ04sWUFBWSxHQUFHLElBQUlRLGFBQWNGO1lBQ3RDLElBQUksQ0FBQ0wsV0FBVyxHQUFHLElBQUlRLFlBQWFIO1lBQ3BDLElBQUksQ0FBQ0osV0FBVyxHQUFHLElBQUlRLFlBQWFKO1FBRXJDO1FBRUEsSUFBSSxDQUFDSyxXQUFXLEdBQUc7WUFFbEJQLGFBQWE7WUFDYixJQUFJLENBQUNKLFlBQVksR0FBRztZQUNwQixJQUFJLENBQUNDLFdBQVcsR0FBRztZQUNuQixJQUFJLENBQUNDLFdBQVcsR0FBRztZQUVuQixJQUFLQyxNQUFNUyxNQUFNLEtBQUssR0FBSTtnQkFFekIsSUFBSSxDQUFDUCxTQUFTLENBQUVGLE1BQU1VLEdBQUc7WUFFMUI7UUFFRDtJQUVEO0FBRUQ7QUFFTyxNQUFNQyxjQUFjLElBQUloQixlQUFlIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3RocmVlLW1lc2gtYnZoL3NyYy9jb3JlL3V0aWxzL0J1ZmZlclN0YWNrLmpzPzFlNDciXSwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgX0J1ZmZlclN0YWNrIHtcblxuXHRjb25zdHJ1Y3RvcigpIHtcblxuXHRcdHRoaXMuZmxvYXQzMkFycmF5ID0gbnVsbDtcblx0XHR0aGlzLnVpbnQxNkFycmF5ID0gbnVsbDtcblx0XHR0aGlzLnVpbnQzMkFycmF5ID0gbnVsbDtcblxuXHRcdGNvbnN0IHN0YWNrID0gW107XG5cdFx0bGV0IHByZXZCdWZmZXIgPSBudWxsO1xuXHRcdHRoaXMuc2V0QnVmZmVyID0gYnVmZmVyID0+IHtcblxuXHRcdFx0aWYgKCBwcmV2QnVmZmVyICkge1xuXG5cdFx0XHRcdHN0YWNrLnB1c2goIHByZXZCdWZmZXIgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRwcmV2QnVmZmVyID0gYnVmZmVyO1xuXHRcdFx0dGhpcy5mbG9hdDMyQXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KCBidWZmZXIgKTtcblx0XHRcdHRoaXMudWludDE2QXJyYXkgPSBuZXcgVWludDE2QXJyYXkoIGJ1ZmZlciApO1xuXHRcdFx0dGhpcy51aW50MzJBcnJheSA9IG5ldyBVaW50MzJBcnJheSggYnVmZmVyICk7XG5cblx0XHR9O1xuXG5cdFx0dGhpcy5jbGVhckJ1ZmZlciA9ICgpID0+IHtcblxuXHRcdFx0cHJldkJ1ZmZlciA9IG51bGw7XG5cdFx0XHR0aGlzLmZsb2F0MzJBcnJheSA9IG51bGw7XG5cdFx0XHR0aGlzLnVpbnQxNkFycmF5ID0gbnVsbDtcblx0XHRcdHRoaXMudWludDMyQXJyYXkgPSBudWxsO1xuXG5cdFx0XHRpZiAoIHN0YWNrLmxlbmd0aCAhPT0gMCApIHtcblxuXHRcdFx0XHR0aGlzLnNldEJ1ZmZlciggc3RhY2sucG9wKCkgKTtcblxuXHRcdFx0fVxuXG5cdFx0fTtcblxuXHR9XG5cbn1cblxuZXhwb3J0IGNvbnN0IEJ1ZmZlclN0YWNrID0gbmV3IF9CdWZmZXJTdGFjaygpO1xuIl0sIm5hbWVzIjpbIl9CdWZmZXJTdGFjayIsImNvbnN0cnVjdG9yIiwiZmxvYXQzMkFycmF5IiwidWludDE2QXJyYXkiLCJ1aW50MzJBcnJheSIsInN0YWNrIiwicHJldkJ1ZmZlciIsInNldEJ1ZmZlciIsImJ1ZmZlciIsInB1c2giLCJGbG9hdDMyQXJyYXkiLCJVaW50MTZBcnJheSIsIlVpbnQzMkFycmF5IiwiY2xlYXJCdWZmZXIiLCJsZW5ndGgiLCJwb3AiLCJCdWZmZXJTdGFjayJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/three-mesh-bvh/src/core/utils/BufferStack.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/three-mesh-bvh/src/core/utils/intersectUtils.js":
/*!**********************************************************************!*\
  !*** ./node_modules/three-mesh-bvh/src/core/utils/intersectUtils.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   intersectRay: () => (/* binding */ intersectRay)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var _utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/ArrayBoxUtilities.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/utils/ArrayBoxUtilities.js\");\n\n\nconst _boundingBox = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Box3();\nfunction intersectRay(nodeIndex32, array, ray, target) {\n    (0,_utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_1__.arrayToBox)(nodeIndex32, array, _boundingBox);\n    return ray.intersectBox(_boundingBox, target);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdGhyZWUtbWVzaC1idmgvc3JjL2NvcmUvdXRpbHMvaW50ZXJzZWN0VXRpbHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTZCO0FBQ2lDO0FBRTlELE1BQU1FLGVBQWUsYUFBYSxHQUFHLElBQUlGLHVDQUFJQTtBQUN0QyxTQUFTRyxhQUFjQyxXQUFXLEVBQUVDLEtBQUssRUFBRUMsR0FBRyxFQUFFQyxNQUFNO0lBRTVETix1RUFBVUEsQ0FBRUcsYUFBYUMsT0FBT0g7SUFDaEMsT0FBT0ksSUFBSUUsWUFBWSxDQUFFTixjQUFjSztBQUV4QyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90aHJlZS1tZXNoLWJ2aC9zcmMvY29yZS91dGlscy9pbnRlcnNlY3RVdGlscy5qcz8wYTE0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJveDMgfSBmcm9tICd0aHJlZSc7XG5pbXBvcnQgeyBhcnJheVRvQm94IH0gZnJvbSAnLi4vLi4vdXRpbHMvQXJyYXlCb3hVdGlsaXRpZXMuanMnO1xuXG5jb25zdCBfYm91bmRpbmdCb3ggPSAvKiBAX19QVVJFX18gKi8gbmV3IEJveDMoKTtcbmV4cG9ydCBmdW5jdGlvbiBpbnRlcnNlY3RSYXkoIG5vZGVJbmRleDMyLCBhcnJheSwgcmF5LCB0YXJnZXQgKSB7XG5cblx0YXJyYXlUb0JveCggbm9kZUluZGV4MzIsIGFycmF5LCBfYm91bmRpbmdCb3ggKTtcblx0cmV0dXJuIHJheS5pbnRlcnNlY3RCb3goIF9ib3VuZGluZ0JveCwgdGFyZ2V0ICk7XG5cbn1cbiJdLCJuYW1lcyI6WyJCb3gzIiwiYXJyYXlUb0JveCIsIl9ib3VuZGluZ0JveCIsImludGVyc2VjdFJheSIsIm5vZGVJbmRleDMyIiwiYXJyYXkiLCJyYXkiLCJ0YXJnZXQiLCJpbnRlcnNlY3RCb3giXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/three-mesh-bvh/src/core/utils/intersectUtils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/three-mesh-bvh/src/core/utils/iterationUtils.generated.js":
/*!********************************************************************************!*\
  !*** ./node_modules/three-mesh-bvh/src/core/utils/iterationUtils.generated.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   intersectClosestTri: () => (/* binding */ intersectClosestTri),\n/* harmony export */   intersectTris: () => (/* binding */ intersectTris),\n/* harmony export */   iterateOverTriangles: () => (/* binding */ iterateOverTriangles)\n/* harmony export */ });\n/* harmony import */ var _utils_ThreeRayIntersectUtilities_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/ThreeRayIntersectUtilities.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/utils/ThreeRayIntersectUtilities.js\");\n/* harmony import */ var _utils_TriangleUtilities_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/TriangleUtilities.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/utils/TriangleUtilities.js\");\n\n\n/*************************************************************/ /* This file is generated from \"iterationUtils.template.js\". */ /*************************************************************/ /* eslint-disable indent */ function intersectTris(bvh, side, ray, offset, count, intersections) {\n    const { geometry, _indirectBuffer } = bvh;\n    for(let i = offset, end = offset + count; i < end; i++){\n        (0,_utils_ThreeRayIntersectUtilities_js__WEBPACK_IMPORTED_MODULE_0__.intersectTri)(geometry, side, ray, i, intersections);\n    }\n}\nfunction intersectClosestTri(bvh, side, ray, offset, count) {\n    const { geometry, _indirectBuffer } = bvh;\n    let dist = Infinity;\n    let res = null;\n    for(let i = offset, end = offset + count; i < end; i++){\n        let intersection;\n        intersection = (0,_utils_ThreeRayIntersectUtilities_js__WEBPACK_IMPORTED_MODULE_0__.intersectTri)(geometry, side, ray, i);\n        if (intersection && intersection.distance < dist) {\n            res = intersection;\n            dist = intersection.distance;\n        }\n    }\n    return res;\n}\nfunction iterateOverTriangles(offset, count, bvh, intersectsTriangleFunc, contained, depth, triangle) {\n    const { geometry } = bvh;\n    const { index } = geometry;\n    const pos = geometry.attributes.position;\n    for(let i = offset, l = count + offset; i < l; i++){\n        let tri;\n        tri = i;\n        (0,_utils_TriangleUtilities_js__WEBPACK_IMPORTED_MODULE_1__.setTriangle)(triangle, tri * 3, index, pos);\n        triangle.needsUpdate = true;\n        if (intersectsTriangleFunc(triangle, tri, contained, depth)) {\n            return true;\n        }\n    }\n    return false;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdGhyZWUtbWVzaC1idmgvc3JjL2NvcmUvdXRpbHMvaXRlcmF0aW9uVXRpbHMuZ2VuZXJhdGVkLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQXlFO0FBQ1Y7QUFFL0QsNkRBQTZELEdBQzdELDZEQUE2RCxHQUM3RCw2REFBNkQsR0FDN0QseUJBQXlCLEdBRXpCLFNBQVNFLGNBQWVDLEdBQUcsRUFBRUMsSUFBSSxFQUFFQyxHQUFHLEVBQUVDLE1BQU0sRUFBRUMsS0FBSyxFQUFFQyxhQUFhO0lBRW5FLE1BQU0sRUFBRUMsUUFBUSxFQUFFQyxlQUFlLEVBQUUsR0FBR1A7SUFDdEMsSUFBTSxJQUFJUSxJQUFJTCxRQUFRTSxNQUFNTixTQUFTQyxPQUFPSSxJQUFJQyxLQUFLRCxJQUFPO1FBRzNEWCxrRkFBWUEsQ0FBRVMsVUFBVUwsTUFBTUMsS0FBS00sR0FBR0g7SUFHdkM7QUFFRDtBQUVBLFNBQVNLLG9CQUFxQlYsR0FBRyxFQUFFQyxJQUFJLEVBQUVDLEdBQUcsRUFBRUMsTUFBTSxFQUFFQyxLQUFLO0lBRTFELE1BQU0sRUFBRUUsUUFBUSxFQUFFQyxlQUFlLEVBQUUsR0FBR1A7SUFDdEMsSUFBSVcsT0FBT0M7SUFDWCxJQUFJQyxNQUFNO0lBQ1YsSUFBTSxJQUFJTCxJQUFJTCxRQUFRTSxNQUFNTixTQUFTQyxPQUFPSSxJQUFJQyxLQUFLRCxJQUFPO1FBRTNELElBQUlNO1FBRUpBLGVBQWVqQixrRkFBWUEsQ0FBRVMsVUFBVUwsTUFBTUMsS0FBS007UUFHbEQsSUFBS00sZ0JBQWdCQSxhQUFhQyxRQUFRLEdBQUdKLE1BQU87WUFFbkRFLE1BQU1DO1lBQ05ILE9BQU9HLGFBQWFDLFFBQVE7UUFFN0I7SUFFRDtJQUVBLE9BQU9GO0FBRVI7QUFFQSxTQUFTRyxxQkFDUmIsTUFBTSxFQUNOQyxLQUFLLEVBQ0xKLEdBQUcsRUFDSGlCLHNCQUFzQixFQUN0QkMsU0FBUyxFQUNUQyxLQUFLLEVBQ0xDLFFBQVE7SUFHUixNQUFNLEVBQUVkLFFBQVEsRUFBRSxHQUFHTjtJQUNyQixNQUFNLEVBQUVxQixLQUFLLEVBQUUsR0FBR2Y7SUFDbEIsTUFBTWdCLE1BQU1oQixTQUFTaUIsVUFBVSxDQUFDQyxRQUFRO0lBQ3hDLElBQU0sSUFBSWhCLElBQUlMLFFBQVFzQixJQUFJckIsUUFBUUQsUUFBUUssSUFBSWlCLEdBQUdqQixJQUFPO1FBRXZELElBQUlrQjtRQUVKQSxNQUFNbEI7UUFFTlYsd0VBQVdBLENBQUVzQixVQUFVTSxNQUFNLEdBQUdMLE9BQU9DO1FBQ3ZDRixTQUFTTyxXQUFXLEdBQUc7UUFFdkIsSUFBS1YsdUJBQXdCRyxVQUFVTSxLQUFLUixXQUFXQyxRQUFVO1lBRWhFLE9BQU87UUFFUjtJQUVEO0lBRUEsT0FBTztBQUVSO0FBRW9FIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3RocmVlLW1lc2gtYnZoL3NyYy9jb3JlL3V0aWxzL2l0ZXJhdGlvblV0aWxzLmdlbmVyYXRlZC5qcz85MDQ5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGludGVyc2VjdFRyaSB9IGZyb20gJy4uLy4uL3V0aWxzL1RocmVlUmF5SW50ZXJzZWN0VXRpbGl0aWVzLmpzJztcbmltcG9ydCB7IHNldFRyaWFuZ2xlIH0gZnJvbSAnLi4vLi4vdXRpbHMvVHJpYW5nbGVVdGlsaXRpZXMuanMnO1xuXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qIFRoaXMgZmlsZSBpcyBnZW5lcmF0ZWQgZnJvbSBcIml0ZXJhdGlvblV0aWxzLnRlbXBsYXRlLmpzXCIuICovXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qIGVzbGludC1kaXNhYmxlIGluZGVudCAqL1xuXG5mdW5jdGlvbiBpbnRlcnNlY3RUcmlzKCBidmgsIHNpZGUsIHJheSwgb2Zmc2V0LCBjb3VudCwgaW50ZXJzZWN0aW9ucyApIHtcblxuXHRjb25zdCB7IGdlb21ldHJ5LCBfaW5kaXJlY3RCdWZmZXIgfSA9IGJ2aDtcblx0Zm9yICggbGV0IGkgPSBvZmZzZXQsIGVuZCA9IG9mZnNldCArIGNvdW50OyBpIDwgZW5kOyBpICsrICkge1xuXG5cblx0XHRpbnRlcnNlY3RUcmkoIGdlb21ldHJ5LCBzaWRlLCByYXksIGksIGludGVyc2VjdGlvbnMgKTtcblxuXG5cdH1cblxufVxuXG5mdW5jdGlvbiBpbnRlcnNlY3RDbG9zZXN0VHJpKCBidmgsIHNpZGUsIHJheSwgb2Zmc2V0LCBjb3VudCApIHtcblxuXHRjb25zdCB7IGdlb21ldHJ5LCBfaW5kaXJlY3RCdWZmZXIgfSA9IGJ2aDtcblx0bGV0IGRpc3QgPSBJbmZpbml0eTtcblx0bGV0IHJlcyA9IG51bGw7XG5cdGZvciAoIGxldCBpID0gb2Zmc2V0LCBlbmQgPSBvZmZzZXQgKyBjb3VudDsgaSA8IGVuZDsgaSArKyApIHtcblxuXHRcdGxldCBpbnRlcnNlY3Rpb247XG5cblx0XHRpbnRlcnNlY3Rpb24gPSBpbnRlcnNlY3RUcmkoIGdlb21ldHJ5LCBzaWRlLCByYXksIGkgKTtcblxuXG5cdFx0aWYgKCBpbnRlcnNlY3Rpb24gJiYgaW50ZXJzZWN0aW9uLmRpc3RhbmNlIDwgZGlzdCApIHtcblxuXHRcdFx0cmVzID0gaW50ZXJzZWN0aW9uO1xuXHRcdFx0ZGlzdCA9IGludGVyc2VjdGlvbi5kaXN0YW5jZTtcblxuXHRcdH1cblxuXHR9XG5cblx0cmV0dXJuIHJlcztcblxufVxuXG5mdW5jdGlvbiBpdGVyYXRlT3ZlclRyaWFuZ2xlcyhcblx0b2Zmc2V0LFxuXHRjb3VudCxcblx0YnZoLFxuXHRpbnRlcnNlY3RzVHJpYW5nbGVGdW5jLFxuXHRjb250YWluZWQsXG5cdGRlcHRoLFxuXHR0cmlhbmdsZVxuKSB7XG5cblx0Y29uc3QgeyBnZW9tZXRyeSB9ID0gYnZoO1xuXHRjb25zdCB7IGluZGV4IH0gPSBnZW9tZXRyeTtcblx0Y29uc3QgcG9zID0gZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbjtcblx0Zm9yICggbGV0IGkgPSBvZmZzZXQsIGwgPSBjb3VudCArIG9mZnNldDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRsZXQgdHJpO1xuXG5cdFx0dHJpID0gaTtcblxuXHRcdHNldFRyaWFuZ2xlKCB0cmlhbmdsZSwgdHJpICogMywgaW5kZXgsIHBvcyApO1xuXHRcdHRyaWFuZ2xlLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdGlmICggaW50ZXJzZWN0c1RyaWFuZ2xlRnVuYyggdHJpYW5nbGUsIHRyaSwgY29udGFpbmVkLCBkZXB0aCApICkge1xuXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblxuXHRcdH1cblxuXHR9XG5cblx0cmV0dXJuIGZhbHNlO1xuXG59XG5cbmV4cG9ydCB7IGludGVyc2VjdENsb3Nlc3RUcmksIGludGVyc2VjdFRyaXMsIGl0ZXJhdGVPdmVyVHJpYW5nbGVzIH07XG4iXSwibmFtZXMiOlsiaW50ZXJzZWN0VHJpIiwic2V0VHJpYW5nbGUiLCJpbnRlcnNlY3RUcmlzIiwiYnZoIiwic2lkZSIsInJheSIsIm9mZnNldCIsImNvdW50IiwiaW50ZXJzZWN0aW9ucyIsImdlb21ldHJ5IiwiX2luZGlyZWN0QnVmZmVyIiwiaSIsImVuZCIsImludGVyc2VjdENsb3Nlc3RUcmkiLCJkaXN0IiwiSW5maW5pdHkiLCJyZXMiLCJpbnRlcnNlY3Rpb24iLCJkaXN0YW5jZSIsIml0ZXJhdGVPdmVyVHJpYW5nbGVzIiwiaW50ZXJzZWN0c1RyaWFuZ2xlRnVuYyIsImNvbnRhaW5lZCIsImRlcHRoIiwidHJpYW5nbGUiLCJpbmRleCIsInBvcyIsImF0dHJpYnV0ZXMiLCJwb3NpdGlvbiIsImwiLCJ0cmkiLCJuZWVkc1VwZGF0ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/three-mesh-bvh/src/core/utils/iterationUtils.generated.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/three-mesh-bvh/src/core/utils/iterationUtils_indirect.generated.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/three-mesh-bvh/src/core/utils/iterationUtils_indirect.generated.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   intersectClosestTri_indirect: () => (/* binding */ intersectClosestTri_indirect),\n/* harmony export */   intersectTris_indirect: () => (/* binding */ intersectTris_indirect),\n/* harmony export */   iterateOverTriangles_indirect: () => (/* binding */ iterateOverTriangles_indirect)\n/* harmony export */ });\n/* harmony import */ var _utils_ThreeRayIntersectUtilities_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/ThreeRayIntersectUtilities.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/utils/ThreeRayIntersectUtilities.js\");\n/* harmony import */ var _utils_TriangleUtilities_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/TriangleUtilities.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/utils/TriangleUtilities.js\");\n\n\n/*************************************************************/ /* This file is generated from \"iterationUtils.template.js\". */ /*************************************************************/ /* eslint-disable indent */ function intersectTris_indirect(bvh, side, ray, offset, count, intersections) {\n    const { geometry, _indirectBuffer } = bvh;\n    for(let i = offset, end = offset + count; i < end; i++){\n        let vi = _indirectBuffer ? _indirectBuffer[i] : i;\n        (0,_utils_ThreeRayIntersectUtilities_js__WEBPACK_IMPORTED_MODULE_0__.intersectTri)(geometry, side, ray, vi, intersections);\n    }\n}\nfunction intersectClosestTri_indirect(bvh, side, ray, offset, count) {\n    const { geometry, _indirectBuffer } = bvh;\n    let dist = Infinity;\n    let res = null;\n    for(let i = offset, end = offset + count; i < end; i++){\n        let intersection;\n        intersection = (0,_utils_ThreeRayIntersectUtilities_js__WEBPACK_IMPORTED_MODULE_0__.intersectTri)(geometry, side, ray, _indirectBuffer ? _indirectBuffer[i] : i);\n        if (intersection && intersection.distance < dist) {\n            res = intersection;\n            dist = intersection.distance;\n        }\n    }\n    return res;\n}\nfunction iterateOverTriangles_indirect(offset, count, bvh, intersectsTriangleFunc, contained, depth, triangle) {\n    const { geometry } = bvh;\n    const { index } = geometry;\n    const pos = geometry.attributes.position;\n    for(let i = offset, l = count + offset; i < l; i++){\n        let tri;\n        tri = bvh.resolveTriangleIndex(i);\n        (0,_utils_TriangleUtilities_js__WEBPACK_IMPORTED_MODULE_1__.setTriangle)(triangle, tri * 3, index, pos);\n        triangle.needsUpdate = true;\n        if (intersectsTriangleFunc(triangle, tri, contained, depth)) {\n            return true;\n        }\n    }\n    return false;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdGhyZWUtbWVzaC1idmgvc3JjL2NvcmUvdXRpbHMvaXRlcmF0aW9uVXRpbHNfaW5kaXJlY3QuZ2VuZXJhdGVkLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQXlFO0FBQ1Y7QUFFL0QsNkRBQTZELEdBQzdELDZEQUE2RCxHQUM3RCw2REFBNkQsR0FDN0QseUJBQXlCLEdBRXpCLFNBQVNFLHVCQUF3QkMsR0FBRyxFQUFFQyxJQUFJLEVBQUVDLEdBQUcsRUFBRUMsTUFBTSxFQUFFQyxLQUFLLEVBQUVDLGFBQWE7SUFFNUUsTUFBTSxFQUFFQyxRQUFRLEVBQUVDLGVBQWUsRUFBRSxHQUFHUDtJQUN0QyxJQUFNLElBQUlRLElBQUlMLFFBQVFNLE1BQU1OLFNBQVNDLE9BQU9JLElBQUlDLEtBQUtELElBQU87UUFFM0QsSUFBSUUsS0FBS0gsa0JBQWtCQSxlQUFlLENBQUVDLEVBQUcsR0FBR0E7UUFDbERYLGtGQUFZQSxDQUFFUyxVQUFVTCxNQUFNQyxLQUFLUSxJQUFJTDtJQUd4QztBQUVEO0FBRUEsU0FBU00sNkJBQThCWCxHQUFHLEVBQUVDLElBQUksRUFBRUMsR0FBRyxFQUFFQyxNQUFNLEVBQUVDLEtBQUs7SUFFbkUsTUFBTSxFQUFFRSxRQUFRLEVBQUVDLGVBQWUsRUFBRSxHQUFHUDtJQUN0QyxJQUFJWSxPQUFPQztJQUNYLElBQUlDLE1BQU07SUFDVixJQUFNLElBQUlOLElBQUlMLFFBQVFNLE1BQU1OLFNBQVNDLE9BQU9JLElBQUlDLEtBQUtELElBQU87UUFFM0QsSUFBSU87UUFDSkEsZUFBZWxCLGtGQUFZQSxDQUFFUyxVQUFVTCxNQUFNQyxLQUFLSyxrQkFBa0JBLGVBQWUsQ0FBRUMsRUFBRyxHQUFHQTtRQUczRixJQUFLTyxnQkFBZ0JBLGFBQWFDLFFBQVEsR0FBR0osTUFBTztZQUVuREUsTUFBTUM7WUFDTkgsT0FBT0csYUFBYUMsUUFBUTtRQUU3QjtJQUVEO0lBRUEsT0FBT0Y7QUFFUjtBQUVBLFNBQVNHLDhCQUNSZCxNQUFNLEVBQ05DLEtBQUssRUFDTEosR0FBRyxFQUNIa0Isc0JBQXNCLEVBQ3RCQyxTQUFTLEVBQ1RDLEtBQUssRUFDTEMsUUFBUTtJQUdSLE1BQU0sRUFBRWYsUUFBUSxFQUFFLEdBQUdOO0lBQ3JCLE1BQU0sRUFBRXNCLEtBQUssRUFBRSxHQUFHaEI7SUFDbEIsTUFBTWlCLE1BQU1qQixTQUFTa0IsVUFBVSxDQUFDQyxRQUFRO0lBQ3hDLElBQU0sSUFBSWpCLElBQUlMLFFBQVF1QixJQUFJdEIsUUFBUUQsUUFBUUssSUFBSWtCLEdBQUdsQixJQUFPO1FBRXZELElBQUltQjtRQUNKQSxNQUFNM0IsSUFBSTRCLG9CQUFvQixDQUFFcEI7UUFFaENWLHdFQUFXQSxDQUFFdUIsVUFBVU0sTUFBTSxHQUFHTCxPQUFPQztRQUN2Q0YsU0FBU1EsV0FBVyxHQUFHO1FBRXZCLElBQUtYLHVCQUF3QkcsVUFBVU0sS0FBS1IsV0FBV0MsUUFBVTtZQUVoRSxPQUFPO1FBRVI7SUFFRDtJQUVBLE9BQU87QUFFUjtBQUUrRiIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90aHJlZS1tZXNoLWJ2aC9zcmMvY29yZS91dGlscy9pdGVyYXRpb25VdGlsc19pbmRpcmVjdC5nZW5lcmF0ZWQuanM/Y2U4OCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpbnRlcnNlY3RUcmkgfSBmcm9tICcuLi8uLi91dGlscy9UaHJlZVJheUludGVyc2VjdFV0aWxpdGllcy5qcyc7XG5pbXBvcnQgeyBzZXRUcmlhbmdsZSB9IGZyb20gJy4uLy4uL3V0aWxzL1RyaWFuZ2xlVXRpbGl0aWVzLmpzJztcblxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiBUaGlzIGZpbGUgaXMgZ2VuZXJhdGVkIGZyb20gXCJpdGVyYXRpb25VdGlscy50ZW1wbGF0ZS5qc1wiLiAqL1xuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiBlc2xpbnQtZGlzYWJsZSBpbmRlbnQgKi9cblxuZnVuY3Rpb24gaW50ZXJzZWN0VHJpc19pbmRpcmVjdCggYnZoLCBzaWRlLCByYXksIG9mZnNldCwgY291bnQsIGludGVyc2VjdGlvbnMgKSB7XG5cblx0Y29uc3QgeyBnZW9tZXRyeSwgX2luZGlyZWN0QnVmZmVyIH0gPSBidmg7XG5cdGZvciAoIGxldCBpID0gb2Zmc2V0LCBlbmQgPSBvZmZzZXQgKyBjb3VudDsgaSA8IGVuZDsgaSArKyApIHtcblxuXHRcdGxldCB2aSA9IF9pbmRpcmVjdEJ1ZmZlciA/IF9pbmRpcmVjdEJ1ZmZlclsgaSBdIDogaTtcblx0XHRpbnRlcnNlY3RUcmkoIGdlb21ldHJ5LCBzaWRlLCByYXksIHZpLCBpbnRlcnNlY3Rpb25zICk7XG5cblxuXHR9XG5cbn1cblxuZnVuY3Rpb24gaW50ZXJzZWN0Q2xvc2VzdFRyaV9pbmRpcmVjdCggYnZoLCBzaWRlLCByYXksIG9mZnNldCwgY291bnQgKSB7XG5cblx0Y29uc3QgeyBnZW9tZXRyeSwgX2luZGlyZWN0QnVmZmVyIH0gPSBidmg7XG5cdGxldCBkaXN0ID0gSW5maW5pdHk7XG5cdGxldCByZXMgPSBudWxsO1xuXHRmb3IgKCBsZXQgaSA9IG9mZnNldCwgZW5kID0gb2Zmc2V0ICsgY291bnQ7IGkgPCBlbmQ7IGkgKysgKSB7XG5cblx0XHRsZXQgaW50ZXJzZWN0aW9uO1xuXHRcdGludGVyc2VjdGlvbiA9IGludGVyc2VjdFRyaSggZ2VvbWV0cnksIHNpZGUsIHJheSwgX2luZGlyZWN0QnVmZmVyID8gX2luZGlyZWN0QnVmZmVyWyBpIF0gOiBpICk7XG5cblxuXHRcdGlmICggaW50ZXJzZWN0aW9uICYmIGludGVyc2VjdGlvbi5kaXN0YW5jZSA8IGRpc3QgKSB7XG5cblx0XHRcdHJlcyA9IGludGVyc2VjdGlvbjtcblx0XHRcdGRpc3QgPSBpbnRlcnNlY3Rpb24uZGlzdGFuY2U7XG5cblx0XHR9XG5cblx0fVxuXG5cdHJldHVybiByZXM7XG5cbn1cblxuZnVuY3Rpb24gaXRlcmF0ZU92ZXJUcmlhbmdsZXNfaW5kaXJlY3QoXG5cdG9mZnNldCxcblx0Y291bnQsXG5cdGJ2aCxcblx0aW50ZXJzZWN0c1RyaWFuZ2xlRnVuYyxcblx0Y29udGFpbmVkLFxuXHRkZXB0aCxcblx0dHJpYW5nbGVcbikge1xuXG5cdGNvbnN0IHsgZ2VvbWV0cnkgfSA9IGJ2aDtcblx0Y29uc3QgeyBpbmRleCB9ID0gZ2VvbWV0cnk7XG5cdGNvbnN0IHBvcyA9IGdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb247XG5cdGZvciAoIGxldCBpID0gb2Zmc2V0LCBsID0gY291bnQgKyBvZmZzZXQ7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0bGV0IHRyaTtcblx0XHR0cmkgPSBidmgucmVzb2x2ZVRyaWFuZ2xlSW5kZXgoIGkgKTtcblxuXHRcdHNldFRyaWFuZ2xlKCB0cmlhbmdsZSwgdHJpICogMywgaW5kZXgsIHBvcyApO1xuXHRcdHRyaWFuZ2xlLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdGlmICggaW50ZXJzZWN0c1RyaWFuZ2xlRnVuYyggdHJpYW5nbGUsIHRyaSwgY29udGFpbmVkLCBkZXB0aCApICkge1xuXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblxuXHRcdH1cblxuXHR9XG5cblx0cmV0dXJuIGZhbHNlO1xuXG59XG5cbmV4cG9ydCB7IGludGVyc2VjdENsb3Nlc3RUcmlfaW5kaXJlY3QsIGludGVyc2VjdFRyaXNfaW5kaXJlY3QsIGl0ZXJhdGVPdmVyVHJpYW5nbGVzX2luZGlyZWN0IH07XG4iXSwibmFtZXMiOlsiaW50ZXJzZWN0VHJpIiwic2V0VHJpYW5nbGUiLCJpbnRlcnNlY3RUcmlzX2luZGlyZWN0IiwiYnZoIiwic2lkZSIsInJheSIsIm9mZnNldCIsImNvdW50IiwiaW50ZXJzZWN0aW9ucyIsImdlb21ldHJ5IiwiX2luZGlyZWN0QnVmZmVyIiwiaSIsImVuZCIsInZpIiwiaW50ZXJzZWN0Q2xvc2VzdFRyaV9pbmRpcmVjdCIsImRpc3QiLCJJbmZpbml0eSIsInJlcyIsImludGVyc2VjdGlvbiIsImRpc3RhbmNlIiwiaXRlcmF0ZU92ZXJUcmlhbmdsZXNfaW5kaXJlY3QiLCJpbnRlcnNlY3RzVHJpYW5nbGVGdW5jIiwiY29udGFpbmVkIiwiZGVwdGgiLCJ0cmlhbmdsZSIsImluZGV4IiwicG9zIiwiYXR0cmlidXRlcyIsInBvc2l0aW9uIiwibCIsInRyaSIsInJlc29sdmVUcmlhbmdsZUluZGV4IiwibmVlZHNVcGRhdGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/three-mesh-bvh/src/core/utils/iterationUtils_indirect.generated.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/three-mesh-bvh/src/core/utils/nodeBufferUtils.js":
/*!***********************************************************************!*\
  !*** ./node_modules/three-mesh-bvh/src/core/utils/nodeBufferUtils.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BOUNDING_DATA_INDEX: () => (/* binding */ BOUNDING_DATA_INDEX),\n/* harmony export */   COUNT: () => (/* binding */ COUNT),\n/* harmony export */   IS_LEAF: () => (/* binding */ IS_LEAF),\n/* harmony export */   LEFT_NODE: () => (/* binding */ LEFT_NODE),\n/* harmony export */   OFFSET: () => (/* binding */ OFFSET),\n/* harmony export */   RIGHT_NODE: () => (/* binding */ RIGHT_NODE),\n/* harmony export */   SPLIT_AXIS: () => (/* binding */ SPLIT_AXIS)\n/* harmony export */ });\nfunction IS_LEAF(n16, uint16Array) {\n    return uint16Array[n16 + 15] === 0xFFFF;\n}\nfunction OFFSET(n32, uint32Array) {\n    return uint32Array[n32 + 6];\n}\nfunction COUNT(n16, uint16Array) {\n    return uint16Array[n16 + 14];\n}\nfunction LEFT_NODE(n32) {\n    return n32 + 8;\n}\nfunction RIGHT_NODE(n32, uint32Array) {\n    return uint32Array[n32 + 6];\n}\nfunction SPLIT_AXIS(n32, uint32Array) {\n    return uint32Array[n32 + 7];\n}\nfunction BOUNDING_DATA_INDEX(n32) {\n    return n32;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdGhyZWUtbWVzaC1idmgvc3JjL2NvcmUvdXRpbHMvbm9kZUJ1ZmZlclV0aWxzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBTyxTQUFTQSxRQUFTQyxHQUFHLEVBQUVDLFdBQVc7SUFFeEMsT0FBT0EsV0FBVyxDQUFFRCxNQUFNLEdBQUksS0FBSztBQUVwQztBQUVPLFNBQVNFLE9BQVFDLEdBQUcsRUFBRUMsV0FBVztJQUV2QyxPQUFPQSxXQUFXLENBQUVELE1BQU0sRUFBRztBQUU5QjtBQUVPLFNBQVNFLE1BQU9MLEdBQUcsRUFBRUMsV0FBVztJQUV0QyxPQUFPQSxXQUFXLENBQUVELE1BQU0sR0FBSTtBQUUvQjtBQUVPLFNBQVNNLFVBQVdILEdBQUc7SUFFN0IsT0FBT0EsTUFBTTtBQUVkO0FBRU8sU0FBU0ksV0FBWUosR0FBRyxFQUFFQyxXQUFXO0lBRTNDLE9BQU9BLFdBQVcsQ0FBRUQsTUFBTSxFQUFHO0FBRTlCO0FBRU8sU0FBU0ssV0FBWUwsR0FBRyxFQUFFQyxXQUFXO0lBRTNDLE9BQU9BLFdBQVcsQ0FBRUQsTUFBTSxFQUFHO0FBRTlCO0FBRU8sU0FBU00sb0JBQXFCTixHQUFHO0lBRXZDLE9BQU9BO0FBRVIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdGhyZWUtbWVzaC1idmgvc3JjL2NvcmUvdXRpbHMvbm9kZUJ1ZmZlclV0aWxzLmpzPzdhODUiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIElTX0xFQUYoIG4xNiwgdWludDE2QXJyYXkgKSB7XG5cblx0cmV0dXJuIHVpbnQxNkFycmF5WyBuMTYgKyAxNSBdID09PSAweEZGRkY7XG5cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIE9GRlNFVCggbjMyLCB1aW50MzJBcnJheSApIHtcblxuXHRyZXR1cm4gdWludDMyQXJyYXlbIG4zMiArIDYgXTtcblxufVxuXG5leHBvcnQgZnVuY3Rpb24gQ09VTlQoIG4xNiwgdWludDE2QXJyYXkgKSB7XG5cblx0cmV0dXJuIHVpbnQxNkFycmF5WyBuMTYgKyAxNCBdO1xuXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBMRUZUX05PREUoIG4zMiApIHtcblxuXHRyZXR1cm4gbjMyICsgODtcblxufVxuXG5leHBvcnQgZnVuY3Rpb24gUklHSFRfTk9ERSggbjMyLCB1aW50MzJBcnJheSApIHtcblxuXHRyZXR1cm4gdWludDMyQXJyYXlbIG4zMiArIDYgXTtcblxufVxuXG5leHBvcnQgZnVuY3Rpb24gU1BMSVRfQVhJUyggbjMyLCB1aW50MzJBcnJheSApIHtcblxuXHRyZXR1cm4gdWludDMyQXJyYXlbIG4zMiArIDcgXTtcblxufVxuXG5leHBvcnQgZnVuY3Rpb24gQk9VTkRJTkdfREFUQV9JTkRFWCggbjMyICkge1xuXG5cdHJldHVybiBuMzI7XG5cbn1cbiJdLCJuYW1lcyI6WyJJU19MRUFGIiwibjE2IiwidWludDE2QXJyYXkiLCJPRkZTRVQiLCJuMzIiLCJ1aW50MzJBcnJheSIsIkNPVU5UIiwiTEVGVF9OT0RFIiwiUklHSFRfTk9ERSIsIlNQTElUX0FYSVMiLCJCT1VORElOR19EQVRBX0lOREVYIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/three-mesh-bvh/src/core/utils/nodeBufferUtils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/three-mesh-bvh/src/math/ExtendedTriangle.js":
/*!******************************************************************!*\
  !*** ./node_modules/three-mesh-bvh/src/math/ExtendedTriangle.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ExtendedTriangle: () => (/* binding */ ExtendedTriangle)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var _SeparatingAxisBounds_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./SeparatingAxisBounds.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/math/SeparatingAxisBounds.js\");\n/* harmony import */ var _MathUtilities_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./MathUtilities.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/math/MathUtilities.js\");\n\n\n\nconst ZERO_EPSILON = 1e-15;\nfunction isNearZero(value) {\n    return Math.abs(value) < ZERO_EPSILON;\n}\nclass ExtendedTriangle extends three__WEBPACK_IMPORTED_MODULE_0__.Triangle {\n    constructor(...args){\n        super(...args);\n        this.isExtendedTriangle = true;\n        this.satAxes = new Array(4).fill().map(()=>new three__WEBPACK_IMPORTED_MODULE_0__.Vector3());\n        this.satBounds = new Array(4).fill().map(()=>new _SeparatingAxisBounds_js__WEBPACK_IMPORTED_MODULE_1__.SeparatingAxisBounds());\n        this.points = [\n            this.a,\n            this.b,\n            this.c\n        ];\n        this.sphere = new three__WEBPACK_IMPORTED_MODULE_0__.Sphere();\n        this.plane = new three__WEBPACK_IMPORTED_MODULE_0__.Plane();\n        this.needsUpdate = true;\n    }\n    intersectsSphere(sphere) {\n        return (0,_MathUtilities_js__WEBPACK_IMPORTED_MODULE_2__.sphereIntersectTriangle)(sphere, this);\n    }\n    update() {\n        const a = this.a;\n        const b = this.b;\n        const c = this.c;\n        const points = this.points;\n        const satAxes = this.satAxes;\n        const satBounds = this.satBounds;\n        const axis0 = satAxes[0];\n        const sab0 = satBounds[0];\n        this.getNormal(axis0);\n        sab0.setFromPoints(axis0, points);\n        const axis1 = satAxes[1];\n        const sab1 = satBounds[1];\n        axis1.subVectors(a, b);\n        sab1.setFromPoints(axis1, points);\n        const axis2 = satAxes[2];\n        const sab2 = satBounds[2];\n        axis2.subVectors(b, c);\n        sab2.setFromPoints(axis2, points);\n        const axis3 = satAxes[3];\n        const sab3 = satBounds[3];\n        axis3.subVectors(c, a);\n        sab3.setFromPoints(axis3, points);\n        this.sphere.setFromPoints(this.points);\n        this.plane.setFromNormalAndCoplanarPoint(axis0, a);\n        this.needsUpdate = false;\n    }\n}\nExtendedTriangle.prototype.closestPointToSegment = function() {\n    const point1 = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n    const point2 = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n    const edge = new three__WEBPACK_IMPORTED_MODULE_0__.Line3();\n    return function distanceToSegment(segment, target1 = null, target2 = null) {\n        const { start, end } = segment;\n        const points = this.points;\n        let distSq;\n        let closestDistanceSq = Infinity;\n        // check the triangle edges\n        for(let i = 0; i < 3; i++){\n            const nexti = (i + 1) % 3;\n            edge.start.copy(points[i]);\n            edge.end.copy(points[nexti]);\n            (0,_MathUtilities_js__WEBPACK_IMPORTED_MODULE_2__.closestPointsSegmentToSegment)(edge, segment, point1, point2);\n            distSq = point1.distanceToSquared(point2);\n            if (distSq < closestDistanceSq) {\n                closestDistanceSq = distSq;\n                if (target1) target1.copy(point1);\n                if (target2) target2.copy(point2);\n            }\n        }\n        // check end points\n        this.closestPointToPoint(start, point1);\n        distSq = start.distanceToSquared(point1);\n        if (distSq < closestDistanceSq) {\n            closestDistanceSq = distSq;\n            if (target1) target1.copy(point1);\n            if (target2) target2.copy(start);\n        }\n        this.closestPointToPoint(end, point1);\n        distSq = end.distanceToSquared(point1);\n        if (distSq < closestDistanceSq) {\n            closestDistanceSq = distSq;\n            if (target1) target1.copy(point1);\n            if (target2) target2.copy(end);\n        }\n        return Math.sqrt(closestDistanceSq);\n    };\n}();\nExtendedTriangle.prototype.intersectsTriangle = function() {\n    const saTri2 = new ExtendedTriangle();\n    const arr1 = new Array(3);\n    const arr2 = new Array(3);\n    const cachedSatBounds = new _SeparatingAxisBounds_js__WEBPACK_IMPORTED_MODULE_1__.SeparatingAxisBounds();\n    const cachedSatBounds2 = new _SeparatingAxisBounds_js__WEBPACK_IMPORTED_MODULE_1__.SeparatingAxisBounds();\n    const cachedAxis = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n    const dir = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n    const dir1 = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n    const dir2 = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n    const tempDir = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n    const edge = new three__WEBPACK_IMPORTED_MODULE_0__.Line3();\n    const edge1 = new three__WEBPACK_IMPORTED_MODULE_0__.Line3();\n    const edge2 = new three__WEBPACK_IMPORTED_MODULE_0__.Line3();\n    const tempPoint = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n    function triIntersectPlane(tri, plane, targetEdge) {\n        // find the edge that intersects the other triangle plane\n        const points = tri.points;\n        let count = 0;\n        let startPointIntersection = -1;\n        for(let i = 0; i < 3; i++){\n            const { start, end } = edge;\n            start.copy(points[i]);\n            end.copy(points[(i + 1) % 3]);\n            edge.delta(dir);\n            const startIntersects = isNearZero(plane.distanceToPoint(start));\n            if (isNearZero(plane.normal.dot(dir)) && startIntersects) {\n                // if the edge lies on the plane then take the line\n                targetEdge.copy(edge);\n                count = 2;\n                break;\n            }\n            // check if the start point is near the plane because \"intersectLine\" is not robust to that case\n            const doesIntersect = plane.intersectLine(edge, tempPoint);\n            if (!doesIntersect && startIntersects) {\n                tempPoint.copy(start);\n            }\n            // ignore the end point\n            if ((doesIntersect || startIntersects) && !isNearZero(tempPoint.distanceTo(end))) {\n                if (count <= 1) {\n                    // assign to the start or end point and save which index was snapped to\n                    // the start point if necessary\n                    const point = count === 1 ? targetEdge.start : targetEdge.end;\n                    point.copy(tempPoint);\n                    if (startIntersects) {\n                        startPointIntersection = count;\n                    }\n                } else if (count >= 2) {\n                    // if we're here that means that there must have been one point that had\n                    // snapped to the start point so replace it here\n                    const point = startPointIntersection === 1 ? targetEdge.start : targetEdge.end;\n                    point.copy(tempPoint);\n                    count = 2;\n                    break;\n                }\n                count++;\n                if (count === 2 && startPointIntersection === -1) {\n                    break;\n                }\n            }\n        }\n        return count;\n    }\n    // TODO: If the triangles are coplanar and intersecting the target is nonsensical. It should at least\n    // be a line contained by both triangles if not a different special case somehow represented in the return result.\n    return function intersectsTriangle(other, target = null, suppressLog = false) {\n        if (this.needsUpdate) {\n            this.update();\n        }\n        if (!other.isExtendedTriangle) {\n            saTri2.copy(other);\n            saTri2.update();\n            other = saTri2;\n        } else if (other.needsUpdate) {\n            other.update();\n        }\n        const plane1 = this.plane;\n        const plane2 = other.plane;\n        if (Math.abs(plane1.normal.dot(plane2.normal)) > 1.0 - 1e-10) {\n            // perform separating axis intersection test only for coplanar triangles\n            const satBounds1 = this.satBounds;\n            const satAxes1 = this.satAxes;\n            arr2[0] = other.a;\n            arr2[1] = other.b;\n            arr2[2] = other.c;\n            for(let i = 0; i < 4; i++){\n                const sb = satBounds1[i];\n                const sa = satAxes1[i];\n                cachedSatBounds.setFromPoints(sa, arr2);\n                if (sb.isSeparated(cachedSatBounds)) return false;\n            }\n            const satBounds2 = other.satBounds;\n            const satAxes2 = other.satAxes;\n            arr1[0] = this.a;\n            arr1[1] = this.b;\n            arr1[2] = this.c;\n            for(let i = 0; i < 4; i++){\n                const sb = satBounds2[i];\n                const sa = satAxes2[i];\n                cachedSatBounds.setFromPoints(sa, arr1);\n                if (sb.isSeparated(cachedSatBounds)) return false;\n            }\n            // check crossed axes\n            for(let i = 0; i < 4; i++){\n                const sa1 = satAxes1[i];\n                for(let i2 = 0; i2 < 4; i2++){\n                    const sa2 = satAxes2[i2];\n                    cachedAxis.crossVectors(sa1, sa2);\n                    cachedSatBounds.setFromPoints(cachedAxis, arr1);\n                    cachedSatBounds2.setFromPoints(cachedAxis, arr2);\n                    if (cachedSatBounds.isSeparated(cachedSatBounds2)) return false;\n                }\n            }\n            if (target) {\n                // TODO find two points that intersect on the edges and make that the result\n                if (!suppressLog) {\n                    console.warn(\"ExtendedTriangle.intersectsTriangle: Triangles are coplanar which does not support an output edge. Setting edge to 0, 0, 0.\");\n                }\n                target.start.set(0, 0, 0);\n                target.end.set(0, 0, 0);\n            }\n            return true;\n        } else {\n            // find the edge that intersects the other triangle plane\n            const count1 = triIntersectPlane(this, plane2, edge1);\n            if (count1 === 1 && other.containsPoint(edge1.end)) {\n                if (target) {\n                    target.start.copy(edge1.end);\n                    target.end.copy(edge1.end);\n                }\n                return true;\n            } else if (count1 !== 2) {\n                return false;\n            }\n            // find the other triangles edge that intersects this plane\n            const count2 = triIntersectPlane(other, plane1, edge2);\n            if (count2 === 1 && this.containsPoint(edge2.end)) {\n                if (target) {\n                    target.start.copy(edge2.end);\n                    target.end.copy(edge2.end);\n                }\n                return true;\n            } else if (count2 !== 2) {\n                return false;\n            }\n            // find swap the second edge so both lines are running the same direction\n            edge1.delta(dir1);\n            edge2.delta(dir2);\n            if (dir1.dot(dir2) < 0) {\n                let tmp = edge2.start;\n                edge2.start = edge2.end;\n                edge2.end = tmp;\n            }\n            // check if the edges are overlapping\n            const s1 = edge1.start.dot(dir1);\n            const e1 = edge1.end.dot(dir1);\n            const s2 = edge2.start.dot(dir1);\n            const e2 = edge2.end.dot(dir1);\n            const separated1 = e1 < s2;\n            const separated2 = s1 < e2;\n            if (s1 !== e2 && s2 !== e1 && separated1 === separated2) {\n                return false;\n            }\n            // assign the target output\n            if (target) {\n                tempDir.subVectors(edge1.start, edge2.start);\n                if (tempDir.dot(dir1) > 0) {\n                    target.start.copy(edge1.start);\n                } else {\n                    target.start.copy(edge2.start);\n                }\n                tempDir.subVectors(edge1.end, edge2.end);\n                if (tempDir.dot(dir1) < 0) {\n                    target.end.copy(edge1.end);\n                } else {\n                    target.end.copy(edge2.end);\n                }\n            }\n            return true;\n        }\n    };\n}();\nExtendedTriangle.prototype.distanceToPoint = function() {\n    const target = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n    return function distanceToPoint(point) {\n        this.closestPointToPoint(point, target);\n        return point.distanceTo(target);\n    };\n}();\nExtendedTriangle.prototype.distanceToTriangle = function() {\n    const point = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n    const point2 = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n    const cornerFields = [\n        \"a\",\n        \"b\",\n        \"c\"\n    ];\n    const line1 = new three__WEBPACK_IMPORTED_MODULE_0__.Line3();\n    const line2 = new three__WEBPACK_IMPORTED_MODULE_0__.Line3();\n    return function distanceToTriangle(other, target1 = null, target2 = null) {\n        const lineTarget = target1 || target2 ? line1 : null;\n        if (this.intersectsTriangle(other, lineTarget)) {\n            if (target1 || target2) {\n                if (target1) lineTarget.getCenter(target1);\n                if (target2) lineTarget.getCenter(target2);\n            }\n            return 0;\n        }\n        let closestDistanceSq = Infinity;\n        // check all point distances\n        for(let i = 0; i < 3; i++){\n            let dist;\n            const field = cornerFields[i];\n            const otherVec = other[field];\n            this.closestPointToPoint(otherVec, point);\n            dist = otherVec.distanceToSquared(point);\n            if (dist < closestDistanceSq) {\n                closestDistanceSq = dist;\n                if (target1) target1.copy(point);\n                if (target2) target2.copy(otherVec);\n            }\n            const thisVec = this[field];\n            other.closestPointToPoint(thisVec, point);\n            dist = thisVec.distanceToSquared(point);\n            if (dist < closestDistanceSq) {\n                closestDistanceSq = dist;\n                if (target1) target1.copy(thisVec);\n                if (target2) target2.copy(point);\n            }\n        }\n        for(let i = 0; i < 3; i++){\n            const f11 = cornerFields[i];\n            const f12 = cornerFields[(i + 1) % 3];\n            line1.set(this[f11], this[f12]);\n            for(let i2 = 0; i2 < 3; i2++){\n                const f21 = cornerFields[i2];\n                const f22 = cornerFields[(i2 + 1) % 3];\n                line2.set(other[f21], other[f22]);\n                (0,_MathUtilities_js__WEBPACK_IMPORTED_MODULE_2__.closestPointsSegmentToSegment)(line1, line2, point, point2);\n                const dist = point.distanceToSquared(point2);\n                if (dist < closestDistanceSq) {\n                    closestDistanceSq = dist;\n                    if (target1) target1.copy(point);\n                    if (target2) target2.copy(point2);\n                }\n            }\n        }\n        return Math.sqrt(closestDistanceSq);\n    };\n}();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/three-mesh-bvh/src/math/ExtendedTriangle.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/three-mesh-bvh/src/math/MathUtilities.js":
/*!***************************************************************!*\
  !*** ./node_modules/three-mesh-bvh/src/math/MathUtilities.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   closestPointLineToLine: () => (/* binding */ closestPointLineToLine),\n/* harmony export */   closestPointsSegmentToSegment: () => (/* binding */ closestPointsSegmentToSegment),\n/* harmony export */   sphereIntersectTriangle: () => (/* binding */ sphereIntersectTriangle)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n\nconst closestPointLineToLine = function() {\n    // https://github.com/juj/MathGeoLib/blob/master/src/Geometry/Line.cpp#L56\n    const dir1 = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n    const dir2 = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n    const v02 = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n    return function closestPointLineToLine(l1, l2, result) {\n        const v0 = l1.start;\n        const v10 = dir1;\n        const v2 = l2.start;\n        const v32 = dir2;\n        v02.subVectors(v0, v2);\n        dir1.subVectors(l1.end, l1.start);\n        dir2.subVectors(l2.end, l2.start);\n        // float d0232 = v02.Dot(v32);\n        const d0232 = v02.dot(v32);\n        // float d3210 = v32.Dot(v10);\n        const d3210 = v32.dot(v10);\n        // float d3232 = v32.Dot(v32);\n        const d3232 = v32.dot(v32);\n        // float d0210 = v02.Dot(v10);\n        const d0210 = v02.dot(v10);\n        // float d1010 = v10.Dot(v10);\n        const d1010 = v10.dot(v10);\n        // float denom = d1010*d3232 - d3210*d3210;\n        const denom = d1010 * d3232 - d3210 * d3210;\n        let d, d2;\n        if (denom !== 0) {\n            d = (d0232 * d3210 - d0210 * d3232) / denom;\n        } else {\n            d = 0;\n        }\n        d2 = (d0232 + d * d3210) / d3232;\n        result.x = d;\n        result.y = d2;\n    };\n}();\nconst closestPointsSegmentToSegment = function() {\n    // https://github.com/juj/MathGeoLib/blob/master/src/Geometry/LineSegment.cpp#L187\n    const paramResult = new three__WEBPACK_IMPORTED_MODULE_0__.Vector2();\n    const temp1 = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n    const temp2 = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n    return function closestPointsSegmentToSegment(l1, l2, target1, target2) {\n        closestPointLineToLine(l1, l2, paramResult);\n        let d = paramResult.x;\n        let d2 = paramResult.y;\n        if (d >= 0 && d <= 1 && d2 >= 0 && d2 <= 1) {\n            l1.at(d, target1);\n            l2.at(d2, target2);\n            return;\n        } else if (d >= 0 && d <= 1) {\n            // Only d2 is out of bounds.\n            if (d2 < 0) {\n                l2.at(0, target2);\n            } else {\n                l2.at(1, target2);\n            }\n            l1.closestPointToPoint(target2, true, target1);\n            return;\n        } else if (d2 >= 0 && d2 <= 1) {\n            // Only d is out of bounds.\n            if (d < 0) {\n                l1.at(0, target1);\n            } else {\n                l1.at(1, target1);\n            }\n            l2.closestPointToPoint(target1, true, target2);\n            return;\n        } else {\n            // Both u and u2 are out of bounds.\n            let p;\n            if (d < 0) {\n                p = l1.start;\n            } else {\n                p = l1.end;\n            }\n            let p2;\n            if (d2 < 0) {\n                p2 = l2.start;\n            } else {\n                p2 = l2.end;\n            }\n            const closestPoint = temp1;\n            const closestPoint2 = temp2;\n            l1.closestPointToPoint(p2, true, temp1);\n            l2.closestPointToPoint(p, true, temp2);\n            if (closestPoint.distanceToSquared(p2) <= closestPoint2.distanceToSquared(p)) {\n                target1.copy(closestPoint);\n                target2.copy(p2);\n                return;\n            } else {\n                target1.copy(p);\n                target2.copy(closestPoint2);\n                return;\n            }\n        }\n    };\n}();\nconst sphereIntersectTriangle = function() {\n    // https://stackoverflow.com/questions/34043955/detect-collision-between-sphere-and-triangle-in-three-js\n    const closestPointTemp = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n    const projectedPointTemp = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n    const planeTemp = new three__WEBPACK_IMPORTED_MODULE_0__.Plane();\n    const lineTemp = new three__WEBPACK_IMPORTED_MODULE_0__.Line3();\n    return function sphereIntersectTriangle(sphere, triangle) {\n        const { radius, center } = sphere;\n        const { a, b, c } = triangle;\n        // phase 1\n        lineTemp.start = a;\n        lineTemp.end = b;\n        const closestPoint1 = lineTemp.closestPointToPoint(center, true, closestPointTemp);\n        if (closestPoint1.distanceTo(center) <= radius) return true;\n        lineTemp.start = a;\n        lineTemp.end = c;\n        const closestPoint2 = lineTemp.closestPointToPoint(center, true, closestPointTemp);\n        if (closestPoint2.distanceTo(center) <= radius) return true;\n        lineTemp.start = b;\n        lineTemp.end = c;\n        const closestPoint3 = lineTemp.closestPointToPoint(center, true, closestPointTemp);\n        if (closestPoint3.distanceTo(center) <= radius) return true;\n        // phase 2\n        const plane = triangle.getPlane(planeTemp);\n        const dp = Math.abs(plane.distanceToPoint(center));\n        if (dp <= radius) {\n            const pp = plane.projectPoint(center, projectedPointTemp);\n            const cp = triangle.containsPoint(pp);\n            if (cp) return true;\n        }\n        return false;\n    };\n}();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/three-mesh-bvh/src/math/MathUtilities.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/three-mesh-bvh/src/math/OrientedBox.js":
/*!*************************************************************!*\
  !*** ./node_modules/three-mesh-bvh/src/math/OrientedBox.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OrientedBox: () => (/* binding */ OrientedBox)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var _SeparatingAxisBounds_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./SeparatingAxisBounds.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/math/SeparatingAxisBounds.js\");\n/* harmony import */ var _ExtendedTriangle_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ExtendedTriangle.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/math/ExtendedTriangle.js\");\n/* harmony import */ var _MathUtilities_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./MathUtilities.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/math/MathUtilities.js\");\n\n\n\n\nclass OrientedBox {\n    constructor(min, max, matrix){\n        this.isOrientedBox = true;\n        this.min = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n        this.max = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n        this.matrix = new three__WEBPACK_IMPORTED_MODULE_0__.Matrix4();\n        this.invMatrix = new three__WEBPACK_IMPORTED_MODULE_0__.Matrix4();\n        this.points = new Array(8).fill().map(()=>new three__WEBPACK_IMPORTED_MODULE_0__.Vector3());\n        this.satAxes = new Array(3).fill().map(()=>new three__WEBPACK_IMPORTED_MODULE_0__.Vector3());\n        this.satBounds = new Array(3).fill().map(()=>new _SeparatingAxisBounds_js__WEBPACK_IMPORTED_MODULE_1__.SeparatingAxisBounds());\n        this.alignedSatBounds = new Array(3).fill().map(()=>new _SeparatingAxisBounds_js__WEBPACK_IMPORTED_MODULE_1__.SeparatingAxisBounds());\n        this.needsUpdate = false;\n        if (min) this.min.copy(min);\n        if (max) this.max.copy(max);\n        if (matrix) this.matrix.copy(matrix);\n    }\n    set(min, max, matrix) {\n        this.min.copy(min);\n        this.max.copy(max);\n        this.matrix.copy(matrix);\n        this.needsUpdate = true;\n    }\n    copy(other) {\n        this.min.copy(other.min);\n        this.max.copy(other.max);\n        this.matrix.copy(other.matrix);\n        this.needsUpdate = true;\n    }\n}\nOrientedBox.prototype.update = function() {\n    return function update() {\n        const matrix = this.matrix;\n        const min = this.min;\n        const max = this.max;\n        const points = this.points;\n        for(let x = 0; x <= 1; x++){\n            for(let y = 0; y <= 1; y++){\n                for(let z = 0; z <= 1; z++){\n                    const i = (1 << 0) * x | (1 << 1) * y | (1 << 2) * z;\n                    const v = points[i];\n                    v.x = x ? max.x : min.x;\n                    v.y = y ? max.y : min.y;\n                    v.z = z ? max.z : min.z;\n                    v.applyMatrix4(matrix);\n                }\n            }\n        }\n        const satBounds = this.satBounds;\n        const satAxes = this.satAxes;\n        const minVec = points[0];\n        for(let i = 0; i < 3; i++){\n            const axis = satAxes[i];\n            const sb = satBounds[i];\n            const index = 1 << i;\n            const pi = points[index];\n            axis.subVectors(minVec, pi);\n            sb.setFromPoints(axis, points);\n        }\n        const alignedSatBounds = this.alignedSatBounds;\n        alignedSatBounds[0].setFromPointsField(points, \"x\");\n        alignedSatBounds[1].setFromPointsField(points, \"y\");\n        alignedSatBounds[2].setFromPointsField(points, \"z\");\n        this.invMatrix.copy(this.matrix).invert();\n        this.needsUpdate = false;\n    };\n}();\nOrientedBox.prototype.intersectsBox = function() {\n    const aabbBounds = new _SeparatingAxisBounds_js__WEBPACK_IMPORTED_MODULE_1__.SeparatingAxisBounds();\n    return function intersectsBox(box) {\n        // TODO: should this be doing SAT against the AABB?\n        if (this.needsUpdate) {\n            this.update();\n        }\n        const min = box.min;\n        const max = box.max;\n        const satBounds = this.satBounds;\n        const satAxes = this.satAxes;\n        const alignedSatBounds = this.alignedSatBounds;\n        aabbBounds.min = min.x;\n        aabbBounds.max = max.x;\n        if (alignedSatBounds[0].isSeparated(aabbBounds)) return false;\n        aabbBounds.min = min.y;\n        aabbBounds.max = max.y;\n        if (alignedSatBounds[1].isSeparated(aabbBounds)) return false;\n        aabbBounds.min = min.z;\n        aabbBounds.max = max.z;\n        if (alignedSatBounds[2].isSeparated(aabbBounds)) return false;\n        for(let i = 0; i < 3; i++){\n            const axis = satAxes[i];\n            const sb = satBounds[i];\n            aabbBounds.setFromBox(axis, box);\n            if (sb.isSeparated(aabbBounds)) return false;\n        }\n        return true;\n    };\n}();\nOrientedBox.prototype.intersectsTriangle = function() {\n    const saTri = new _ExtendedTriangle_js__WEBPACK_IMPORTED_MODULE_2__.ExtendedTriangle();\n    const pointsArr = new Array(3);\n    const cachedSatBounds = new _SeparatingAxisBounds_js__WEBPACK_IMPORTED_MODULE_1__.SeparatingAxisBounds();\n    const cachedSatBounds2 = new _SeparatingAxisBounds_js__WEBPACK_IMPORTED_MODULE_1__.SeparatingAxisBounds();\n    const cachedAxis = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n    return function intersectsTriangle(triangle) {\n        if (this.needsUpdate) {\n            this.update();\n        }\n        if (!triangle.isExtendedTriangle) {\n            saTri.copy(triangle);\n            saTri.update();\n            triangle = saTri;\n        } else if (triangle.needsUpdate) {\n            triangle.update();\n        }\n        const satBounds = this.satBounds;\n        const satAxes = this.satAxes;\n        pointsArr[0] = triangle.a;\n        pointsArr[1] = triangle.b;\n        pointsArr[2] = triangle.c;\n        for(let i = 0; i < 3; i++){\n            const sb = satBounds[i];\n            const sa = satAxes[i];\n            cachedSatBounds.setFromPoints(sa, pointsArr);\n            if (sb.isSeparated(cachedSatBounds)) return false;\n        }\n        const triSatBounds = triangle.satBounds;\n        const triSatAxes = triangle.satAxes;\n        const points = this.points;\n        for(let i = 0; i < 3; i++){\n            const sb = triSatBounds[i];\n            const sa = triSatAxes[i];\n            cachedSatBounds.setFromPoints(sa, points);\n            if (sb.isSeparated(cachedSatBounds)) return false;\n        }\n        // check crossed axes\n        for(let i = 0; i < 3; i++){\n            const sa1 = satAxes[i];\n            for(let i2 = 0; i2 < 4; i2++){\n                const sa2 = triSatAxes[i2];\n                cachedAxis.crossVectors(sa1, sa2);\n                cachedSatBounds.setFromPoints(cachedAxis, pointsArr);\n                cachedSatBounds2.setFromPoints(cachedAxis, points);\n                if (cachedSatBounds.isSeparated(cachedSatBounds2)) return false;\n            }\n        }\n        return true;\n    };\n}();\nOrientedBox.prototype.closestPointToPoint = function() {\n    return function closestPointToPoint(point, target1) {\n        if (this.needsUpdate) {\n            this.update();\n        }\n        target1.copy(point).applyMatrix4(this.invMatrix).clamp(this.min, this.max).applyMatrix4(this.matrix);\n        return target1;\n    };\n}();\nOrientedBox.prototype.distanceToPoint = function() {\n    const target = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n    return function distanceToPoint(point) {\n        this.closestPointToPoint(point, target);\n        return point.distanceTo(target);\n    };\n}();\nOrientedBox.prototype.distanceToBox = function() {\n    const xyzFields = [\n        \"x\",\n        \"y\",\n        \"z\"\n    ];\n    const segments1 = new Array(12).fill().map(()=>new three__WEBPACK_IMPORTED_MODULE_0__.Line3());\n    const segments2 = new Array(12).fill().map(()=>new three__WEBPACK_IMPORTED_MODULE_0__.Line3());\n    const point1 = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n    const point2 = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n    // early out if we find a value below threshold\n    return function distanceToBox(box, threshold = 0, target1 = null, target2 = null) {\n        if (this.needsUpdate) {\n            this.update();\n        }\n        if (this.intersectsBox(box)) {\n            if (target1 || target2) {\n                box.getCenter(point2);\n                this.closestPointToPoint(point2, point1);\n                box.closestPointToPoint(point1, point2);\n                if (target1) target1.copy(point1);\n                if (target2) target2.copy(point2);\n            }\n            return 0;\n        }\n        const threshold2 = threshold * threshold;\n        const min = box.min;\n        const max = box.max;\n        const points = this.points;\n        // iterate over every edge and compare distances\n        let closestDistanceSq = Infinity;\n        // check over all these points\n        for(let i = 0; i < 8; i++){\n            const p = points[i];\n            point2.copy(p).clamp(min, max);\n            const dist = p.distanceToSquared(point2);\n            if (dist < closestDistanceSq) {\n                closestDistanceSq = dist;\n                if (target1) target1.copy(p);\n                if (target2) target2.copy(point2);\n                if (dist < threshold2) return Math.sqrt(dist);\n            }\n        }\n        // generate and check all line segment distances\n        let count = 0;\n        for(let i = 0; i < 3; i++){\n            for(let i1 = 0; i1 <= 1; i1++){\n                for(let i2 = 0; i2 <= 1; i2++){\n                    const nextIndex = (i + 1) % 3;\n                    const nextIndex2 = (i + 2) % 3;\n                    // get obb line segments\n                    const index = i1 << nextIndex | i2 << nextIndex2;\n                    const index2 = 1 << i | i1 << nextIndex | i2 << nextIndex2;\n                    const p1 = points[index];\n                    const p2 = points[index2];\n                    const line1 = segments1[count];\n                    line1.set(p1, p2);\n                    // get aabb line segments\n                    const f1 = xyzFields[i];\n                    const f2 = xyzFields[nextIndex];\n                    const f3 = xyzFields[nextIndex2];\n                    const line2 = segments2[count];\n                    const start = line2.start;\n                    const end = line2.end;\n                    start[f1] = min[f1];\n                    start[f2] = i1 ? min[f2] : max[f2];\n                    start[f3] = i2 ? min[f3] : max[f2];\n                    end[f1] = max[f1];\n                    end[f2] = i1 ? min[f2] : max[f2];\n                    end[f3] = i2 ? min[f3] : max[f2];\n                    count++;\n                }\n            }\n        }\n        // check all the other boxes point\n        for(let x = 0; x <= 1; x++){\n            for(let y = 0; y <= 1; y++){\n                for(let z = 0; z <= 1; z++){\n                    point2.x = x ? max.x : min.x;\n                    point2.y = y ? max.y : min.y;\n                    point2.z = z ? max.z : min.z;\n                    this.closestPointToPoint(point2, point1);\n                    const dist = point2.distanceToSquared(point1);\n                    if (dist < closestDistanceSq) {\n                        closestDistanceSq = dist;\n                        if (target1) target1.copy(point1);\n                        if (target2) target2.copy(point2);\n                        if (dist < threshold2) return Math.sqrt(dist);\n                    }\n                }\n            }\n        }\n        for(let i = 0; i < 12; i++){\n            const l1 = segments1[i];\n            for(let i2 = 0; i2 < 12; i2++){\n                const l2 = segments2[i2];\n                (0,_MathUtilities_js__WEBPACK_IMPORTED_MODULE_3__.closestPointsSegmentToSegment)(l1, l2, point1, point2);\n                const dist = point1.distanceToSquared(point2);\n                if (dist < closestDistanceSq) {\n                    closestDistanceSq = dist;\n                    if (target1) target1.copy(point1);\n                    if (target2) target2.copy(point2);\n                    if (dist < threshold2) return Math.sqrt(dist);\n                }\n            }\n        }\n        return Math.sqrt(closestDistanceSq);\n    };\n}();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/three-mesh-bvh/src/math/OrientedBox.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/three-mesh-bvh/src/math/SeparatingAxisBounds.js":
/*!**********************************************************************!*\
  !*** ./node_modules/three-mesh-bvh/src/math/SeparatingAxisBounds.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SeparatingAxisBounds: () => (/* binding */ SeparatingAxisBounds),\n/* harmony export */   areIntersecting: () => (/* binding */ areIntersecting)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n\nclass SeparatingAxisBounds {\n    constructor(){\n        this.min = Infinity;\n        this.max = -Infinity;\n    }\n    setFromPointsField(points, field) {\n        let min = Infinity;\n        let max = -Infinity;\n        for(let i = 0, l = points.length; i < l; i++){\n            const p = points[i];\n            const val = p[field];\n            min = val < min ? val : min;\n            max = val > max ? val : max;\n        }\n        this.min = min;\n        this.max = max;\n    }\n    setFromPoints(axis, points) {\n        let min = Infinity;\n        let max = -Infinity;\n        for(let i = 0, l = points.length; i < l; i++){\n            const p = points[i];\n            const val = axis.dot(p);\n            min = val < min ? val : min;\n            max = val > max ? val : max;\n        }\n        this.min = min;\n        this.max = max;\n    }\n    isSeparated(other) {\n        return this.min > other.max || other.min > this.max;\n    }\n}\nSeparatingAxisBounds.prototype.setFromBox = function() {\n    const p = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n    return function setFromBox(axis, box) {\n        const boxMin = box.min;\n        const boxMax = box.max;\n        let min = Infinity;\n        let max = -Infinity;\n        for(let x = 0; x <= 1; x++){\n            for(let y = 0; y <= 1; y++){\n                for(let z = 0; z <= 1; z++){\n                    p.x = boxMin.x * x + boxMax.x * (1 - x);\n                    p.y = boxMin.y * y + boxMax.y * (1 - y);\n                    p.z = boxMin.z * z + boxMax.z * (1 - z);\n                    const val = axis.dot(p);\n                    min = Math.min(val, min);\n                    max = Math.max(val, max);\n                }\n            }\n        }\n        this.min = min;\n        this.max = max;\n    };\n}();\nconst areIntersecting = function() {\n    const cacheSatBounds = new SeparatingAxisBounds();\n    return function areIntersecting(shape1, shape2) {\n        const points1 = shape1.points;\n        const satAxes1 = shape1.satAxes;\n        const satBounds1 = shape1.satBounds;\n        const points2 = shape2.points;\n        const satAxes2 = shape2.satAxes;\n        const satBounds2 = shape2.satBounds;\n        // check axes of the first shape\n        for(let i = 0; i < 3; i++){\n            const sb = satBounds1[i];\n            const sa = satAxes1[i];\n            cacheSatBounds.setFromPoints(sa, points2);\n            if (sb.isSeparated(cacheSatBounds)) return false;\n        }\n        // check axes of the second shape\n        for(let i = 0; i < 3; i++){\n            const sb = satBounds2[i];\n            const sa = satAxes2[i];\n            cacheSatBounds.setFromPoints(sa, points1);\n            if (sb.isSeparated(cacheSatBounds)) return false;\n        }\n    };\n}();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdGhyZWUtbWVzaC1idmgvc3JjL21hdGgvU2VwYXJhdGluZ0F4aXNCb3VuZHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWdDO0FBRXpCLE1BQU1DO0lBRVpDLGFBQWM7UUFFYixJQUFJLENBQUNDLEdBQUcsR0FBR0M7UUFDWCxJQUFJLENBQUNDLEdBQUcsR0FBRyxDQUFFRDtJQUVkO0lBRUFFLG1CQUFvQkMsTUFBTSxFQUFFQyxLQUFLLEVBQUc7UUFFbkMsSUFBSUwsTUFBTUM7UUFDVixJQUFJQyxNQUFNLENBQUVEO1FBQ1osSUFBTSxJQUFJSyxJQUFJLEdBQUdDLElBQUlILE9BQU9JLE1BQU0sRUFBRUYsSUFBSUMsR0FBR0QsSUFBTztZQUVqRCxNQUFNRyxJQUFJTCxNQUFNLENBQUVFLEVBQUc7WUFDckIsTUFBTUksTUFBTUQsQ0FBQyxDQUFFSixNQUFPO1lBQ3RCTCxNQUFNVSxNQUFNVixNQUFNVSxNQUFNVjtZQUN4QkUsTUFBTVEsTUFBTVIsTUFBTVEsTUFBTVI7UUFFekI7UUFFQSxJQUFJLENBQUNGLEdBQUcsR0FBR0E7UUFDWCxJQUFJLENBQUNFLEdBQUcsR0FBR0E7SUFFWjtJQUVBUyxjQUFlQyxJQUFJLEVBQUVSLE1BQU0sRUFBRztRQUU3QixJQUFJSixNQUFNQztRQUNWLElBQUlDLE1BQU0sQ0FBRUQ7UUFDWixJQUFNLElBQUlLLElBQUksR0FBR0MsSUFBSUgsT0FBT0ksTUFBTSxFQUFFRixJQUFJQyxHQUFHRCxJQUFPO1lBRWpELE1BQU1HLElBQUlMLE1BQU0sQ0FBRUUsRUFBRztZQUNyQixNQUFNSSxNQUFNRSxLQUFLQyxHQUFHLENBQUVKO1lBQ3RCVCxNQUFNVSxNQUFNVixNQUFNVSxNQUFNVjtZQUN4QkUsTUFBTVEsTUFBTVIsTUFBTVEsTUFBTVI7UUFFekI7UUFFQSxJQUFJLENBQUNGLEdBQUcsR0FBR0E7UUFDWCxJQUFJLENBQUNFLEdBQUcsR0FBR0E7SUFFWjtJQUVBWSxZQUFhQyxLQUFLLEVBQUc7UUFFcEIsT0FBTyxJQUFJLENBQUNmLEdBQUcsR0FBR2UsTUFBTWIsR0FBRyxJQUFJYSxNQUFNZixHQUFHLEdBQUcsSUFBSSxDQUFDRSxHQUFHO0lBRXBEO0FBRUQ7QUFFQUoscUJBQXFCa0IsU0FBUyxDQUFDQyxVQUFVLEdBQUc7SUFFM0MsTUFBTVIsSUFBSSxJQUFJWiwwQ0FBT0E7SUFDckIsT0FBTyxTQUFTb0IsV0FBWUwsSUFBSSxFQUFFTSxHQUFHO1FBRXBDLE1BQU1DLFNBQVNELElBQUlsQixHQUFHO1FBQ3RCLE1BQU1vQixTQUFTRixJQUFJaEIsR0FBRztRQUN0QixJQUFJRixNQUFNQztRQUNWLElBQUlDLE1BQU0sQ0FBRUQ7UUFDWixJQUFNLElBQUlvQixJQUFJLEdBQUdBLEtBQUssR0FBR0EsSUFBTztZQUUvQixJQUFNLElBQUlDLElBQUksR0FBR0EsS0FBSyxHQUFHQSxJQUFPO2dCQUUvQixJQUFNLElBQUlDLElBQUksR0FBR0EsS0FBSyxHQUFHQSxJQUFPO29CQUUvQmQsRUFBRVksQ0FBQyxHQUFHRixPQUFPRSxDQUFDLEdBQUdBLElBQUlELE9BQU9DLENBQUMsR0FBSyxLQUFJQSxDQUFBQTtvQkFDdENaLEVBQUVhLENBQUMsR0FBR0gsT0FBT0csQ0FBQyxHQUFHQSxJQUFJRixPQUFPRSxDQUFDLEdBQUssS0FBSUEsQ0FBQUE7b0JBQ3RDYixFQUFFYyxDQUFDLEdBQUdKLE9BQU9JLENBQUMsR0FBR0EsSUFBSUgsT0FBT0csQ0FBQyxHQUFLLEtBQUlBLENBQUFBO29CQUV0QyxNQUFNYixNQUFNRSxLQUFLQyxHQUFHLENBQUVKO29CQUN0QlQsTUFBTXdCLEtBQUt4QixHQUFHLENBQUVVLEtBQUtWO29CQUNyQkUsTUFBTXNCLEtBQUt0QixHQUFHLENBQUVRLEtBQUtSO2dCQUV0QjtZQUVEO1FBRUQ7UUFFQSxJQUFJLENBQUNGLEdBQUcsR0FBR0E7UUFDWCxJQUFJLENBQUNFLEdBQUcsR0FBR0E7SUFFWjtBQUVEO0FBRU8sTUFBTXVCLGtCQUFrQjtJQUU5QixNQUFNQyxpQkFBaUIsSUFBSTVCO0lBQzNCLE9BQU8sU0FBUzJCLGdCQUFpQkUsTUFBTSxFQUFFQyxNQUFNO1FBRTlDLE1BQU1DLFVBQVVGLE9BQU92QixNQUFNO1FBQzdCLE1BQU0wQixXQUFXSCxPQUFPSSxPQUFPO1FBQy9CLE1BQU1DLGFBQWFMLE9BQU9NLFNBQVM7UUFFbkMsTUFBTUMsVUFBVU4sT0FBT3hCLE1BQU07UUFDN0IsTUFBTStCLFdBQVdQLE9BQU9HLE9BQU87UUFDL0IsTUFBTUssYUFBYVIsT0FBT0ssU0FBUztRQUVuQyxnQ0FBZ0M7UUFDaEMsSUFBTSxJQUFJM0IsSUFBSSxHQUFHQSxJQUFJLEdBQUdBLElBQU87WUFFOUIsTUFBTStCLEtBQUtMLFVBQVUsQ0FBRTFCLEVBQUc7WUFDMUIsTUFBTWdDLEtBQUtSLFFBQVEsQ0FBRXhCLEVBQUc7WUFDeEJvQixlQUFlZixhQUFhLENBQUUyQixJQUFJSjtZQUNsQyxJQUFLRyxHQUFHdkIsV0FBVyxDQUFFWSxpQkFBbUIsT0FBTztRQUVoRDtRQUVBLGlDQUFpQztRQUNqQyxJQUFNLElBQUlwQixJQUFJLEdBQUdBLElBQUksR0FBR0EsSUFBTztZQUU5QixNQUFNK0IsS0FBS0QsVUFBVSxDQUFFOUIsRUFBRztZQUMxQixNQUFNZ0MsS0FBS0gsUUFBUSxDQUFFN0IsRUFBRztZQUN4Qm9CLGVBQWVmLGFBQWEsQ0FBRTJCLElBQUlUO1lBQ2xDLElBQUtRLEdBQUd2QixXQUFXLENBQUVZLGlCQUFtQixPQUFPO1FBRWhEO0lBRUQ7QUFFRCxJQUFNIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3RocmVlLW1lc2gtYnZoL3NyYy9tYXRoL1NlcGFyYXRpbmdBeGlzQm91bmRzLmpzPzQzODYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gJ3RocmVlJztcblxuZXhwb3J0IGNsYXNzIFNlcGFyYXRpbmdBeGlzQm91bmRzIHtcblxuXHRjb25zdHJ1Y3RvcigpIHtcblxuXHRcdHRoaXMubWluID0gSW5maW5pdHk7XG5cdFx0dGhpcy5tYXggPSAtIEluZmluaXR5O1xuXG5cdH1cblxuXHRzZXRGcm9tUG9pbnRzRmllbGQoIHBvaW50cywgZmllbGQgKSB7XG5cblx0XHRsZXQgbWluID0gSW5maW5pdHk7XG5cdFx0bGV0IG1heCA9IC0gSW5maW5pdHk7XG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gcG9pbnRzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IHAgPSBwb2ludHNbIGkgXTtcblx0XHRcdGNvbnN0IHZhbCA9IHBbIGZpZWxkIF07XG5cdFx0XHRtaW4gPSB2YWwgPCBtaW4gPyB2YWwgOiBtaW47XG5cdFx0XHRtYXggPSB2YWwgPiBtYXggPyB2YWwgOiBtYXg7XG5cblx0XHR9XG5cblx0XHR0aGlzLm1pbiA9IG1pbjtcblx0XHR0aGlzLm1heCA9IG1heDtcblxuXHR9XG5cblx0c2V0RnJvbVBvaW50cyggYXhpcywgcG9pbnRzICkge1xuXG5cdFx0bGV0IG1pbiA9IEluZmluaXR5O1xuXHRcdGxldCBtYXggPSAtIEluZmluaXR5O1xuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IHBvaW50cy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRjb25zdCBwID0gcG9pbnRzWyBpIF07XG5cdFx0XHRjb25zdCB2YWwgPSBheGlzLmRvdCggcCApO1xuXHRcdFx0bWluID0gdmFsIDwgbWluID8gdmFsIDogbWluO1xuXHRcdFx0bWF4ID0gdmFsID4gbWF4ID8gdmFsIDogbWF4O1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5taW4gPSBtaW47XG5cdFx0dGhpcy5tYXggPSBtYXg7XG5cblx0fVxuXG5cdGlzU2VwYXJhdGVkKCBvdGhlciApIHtcblxuXHRcdHJldHVybiB0aGlzLm1pbiA+IG90aGVyLm1heCB8fCBvdGhlci5taW4gPiB0aGlzLm1heDtcblxuXHR9XG5cbn1cblxuU2VwYXJhdGluZ0F4aXNCb3VuZHMucHJvdG90eXBlLnNldEZyb21Cb3ggPSAoIGZ1bmN0aW9uICgpIHtcblxuXHRjb25zdCBwID0gbmV3IFZlY3RvcjMoKTtcblx0cmV0dXJuIGZ1bmN0aW9uIHNldEZyb21Cb3goIGF4aXMsIGJveCApIHtcblxuXHRcdGNvbnN0IGJveE1pbiA9IGJveC5taW47XG5cdFx0Y29uc3QgYm94TWF4ID0gYm94Lm1heDtcblx0XHRsZXQgbWluID0gSW5maW5pdHk7XG5cdFx0bGV0IG1heCA9IC0gSW5maW5pdHk7XG5cdFx0Zm9yICggbGV0IHggPSAwOyB4IDw9IDE7IHggKysgKSB7XG5cblx0XHRcdGZvciAoIGxldCB5ID0gMDsgeSA8PSAxOyB5ICsrICkge1xuXG5cdFx0XHRcdGZvciAoIGxldCB6ID0gMDsgeiA8PSAxOyB6ICsrICkge1xuXG5cdFx0XHRcdFx0cC54ID0gYm94TWluLnggKiB4ICsgYm94TWF4LnggKiAoIDEgLSB4ICk7XG5cdFx0XHRcdFx0cC55ID0gYm94TWluLnkgKiB5ICsgYm94TWF4LnkgKiAoIDEgLSB5ICk7XG5cdFx0XHRcdFx0cC56ID0gYm94TWluLnogKiB6ICsgYm94TWF4LnogKiAoIDEgLSB6ICk7XG5cblx0XHRcdFx0XHRjb25zdCB2YWwgPSBheGlzLmRvdCggcCApO1xuXHRcdFx0XHRcdG1pbiA9IE1hdGgubWluKCB2YWwsIG1pbiApO1xuXHRcdFx0XHRcdG1heCA9IE1hdGgubWF4KCB2YWwsIG1heCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0dGhpcy5taW4gPSBtaW47XG5cdFx0dGhpcy5tYXggPSBtYXg7XG5cblx0fTtcblxufSApKCk7XG5cbmV4cG9ydCBjb25zdCBhcmVJbnRlcnNlY3RpbmcgPSAoIGZ1bmN0aW9uICgpIHtcblxuXHRjb25zdCBjYWNoZVNhdEJvdW5kcyA9IG5ldyBTZXBhcmF0aW5nQXhpc0JvdW5kcygpO1xuXHRyZXR1cm4gZnVuY3Rpb24gYXJlSW50ZXJzZWN0aW5nKCBzaGFwZTEsIHNoYXBlMiApIHtcblxuXHRcdGNvbnN0IHBvaW50czEgPSBzaGFwZTEucG9pbnRzO1xuXHRcdGNvbnN0IHNhdEF4ZXMxID0gc2hhcGUxLnNhdEF4ZXM7XG5cdFx0Y29uc3Qgc2F0Qm91bmRzMSA9IHNoYXBlMS5zYXRCb3VuZHM7XG5cblx0XHRjb25zdCBwb2ludHMyID0gc2hhcGUyLnBvaW50cztcblx0XHRjb25zdCBzYXRBeGVzMiA9IHNoYXBlMi5zYXRBeGVzO1xuXHRcdGNvbnN0IHNhdEJvdW5kczIgPSBzaGFwZTIuc2F0Qm91bmRzO1xuXG5cdFx0Ly8gY2hlY2sgYXhlcyBvZiB0aGUgZmlyc3Qgc2hhcGVcblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCAzOyBpICsrICkge1xuXG5cdFx0XHRjb25zdCBzYiA9IHNhdEJvdW5kczFbIGkgXTtcblx0XHRcdGNvbnN0IHNhID0gc2F0QXhlczFbIGkgXTtcblx0XHRcdGNhY2hlU2F0Qm91bmRzLnNldEZyb21Qb2ludHMoIHNhLCBwb2ludHMyICk7XG5cdFx0XHRpZiAoIHNiLmlzU2VwYXJhdGVkKCBjYWNoZVNhdEJvdW5kcyApICkgcmV0dXJuIGZhbHNlO1xuXG5cdFx0fVxuXG5cdFx0Ly8gY2hlY2sgYXhlcyBvZiB0aGUgc2Vjb25kIHNoYXBlXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgMzsgaSArKyApIHtcblxuXHRcdFx0Y29uc3Qgc2IgPSBzYXRCb3VuZHMyWyBpIF07XG5cdFx0XHRjb25zdCBzYSA9IHNhdEF4ZXMyWyBpIF07XG5cdFx0XHRjYWNoZVNhdEJvdW5kcy5zZXRGcm9tUG9pbnRzKCBzYSwgcG9pbnRzMSApO1xuXHRcdFx0aWYgKCBzYi5pc1NlcGFyYXRlZCggY2FjaGVTYXRCb3VuZHMgKSApIHJldHVybiBmYWxzZTtcblxuXHRcdH1cblxuXHR9O1xuXG59ICkoKTtcbiJdLCJuYW1lcyI6WyJWZWN0b3IzIiwiU2VwYXJhdGluZ0F4aXNCb3VuZHMiLCJjb25zdHJ1Y3RvciIsIm1pbiIsIkluZmluaXR5IiwibWF4Iiwic2V0RnJvbVBvaW50c0ZpZWxkIiwicG9pbnRzIiwiZmllbGQiLCJpIiwibCIsImxlbmd0aCIsInAiLCJ2YWwiLCJzZXRGcm9tUG9pbnRzIiwiYXhpcyIsImRvdCIsImlzU2VwYXJhdGVkIiwib3RoZXIiLCJwcm90b3R5cGUiLCJzZXRGcm9tQm94IiwiYm94IiwiYm94TWluIiwiYm94TWF4IiwieCIsInkiLCJ6IiwiTWF0aCIsImFyZUludGVyc2VjdGluZyIsImNhY2hlU2F0Qm91bmRzIiwic2hhcGUxIiwic2hhcGUyIiwicG9pbnRzMSIsInNhdEF4ZXMxIiwic2F0QXhlcyIsInNhdEJvdW5kczEiLCJzYXRCb3VuZHMiLCJwb2ludHMyIiwic2F0QXhlczIiLCJzYXRCb3VuZHMyIiwic2IiLCJzYSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/three-mesh-bvh/src/math/SeparatingAxisBounds.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/three-mesh-bvh/src/utils/ArrayBoxUtilities.js":
/*!********************************************************************!*\
  !*** ./node_modules/three-mesh-bvh/src/utils/ArrayBoxUtilities.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   arrayToBox: () => (/* binding */ arrayToBox),\n/* harmony export */   computeSurfaceArea: () => (/* binding */ computeSurfaceArea),\n/* harmony export */   copyBounds: () => (/* binding */ copyBounds),\n/* harmony export */   expandByTriangleBounds: () => (/* binding */ expandByTriangleBounds),\n/* harmony export */   getLongestEdgeIndex: () => (/* binding */ getLongestEdgeIndex),\n/* harmony export */   makeEmptyBounds: () => (/* binding */ makeEmptyBounds),\n/* harmony export */   unionBounds: () => (/* binding */ unionBounds)\n/* harmony export */ });\nfunction arrayToBox(nodeIndex32, array, target) {\n    target.min.x = array[nodeIndex32];\n    target.min.y = array[nodeIndex32 + 1];\n    target.min.z = array[nodeIndex32 + 2];\n    target.max.x = array[nodeIndex32 + 3];\n    target.max.y = array[nodeIndex32 + 4];\n    target.max.z = array[nodeIndex32 + 5];\n    return target;\n}\nfunction makeEmptyBounds(target) {\n    target[0] = target[1] = target[2] = Infinity;\n    target[3] = target[4] = target[5] = -Infinity;\n}\nfunction getLongestEdgeIndex(bounds) {\n    let splitDimIdx = -1;\n    let splitDist = -Infinity;\n    for(let i = 0; i < 3; i++){\n        const dist = bounds[i + 3] - bounds[i];\n        if (dist > splitDist) {\n            splitDist = dist;\n            splitDimIdx = i;\n        }\n    }\n    return splitDimIdx;\n}\n// copies bounds a into bounds b\nfunction copyBounds(source, target) {\n    target.set(source);\n}\n// sets bounds target to the union of bounds a and b\nfunction unionBounds(a, b, target) {\n    let aVal, bVal;\n    for(let d = 0; d < 3; d++){\n        const d3 = d + 3;\n        // set the minimum values\n        aVal = a[d];\n        bVal = b[d];\n        target[d] = aVal < bVal ? aVal : bVal;\n        // set the max values\n        aVal = a[d3];\n        bVal = b[d3];\n        target[d3] = aVal > bVal ? aVal : bVal;\n    }\n}\n// expands the given bounds by the provided triangle bounds\nfunction expandByTriangleBounds(startIndex, triangleBounds, bounds) {\n    for(let d = 0; d < 3; d++){\n        const tCenter = triangleBounds[startIndex + 2 * d];\n        const tHalf = triangleBounds[startIndex + 2 * d + 1];\n        const tMin = tCenter - tHalf;\n        const tMax = tCenter + tHalf;\n        if (tMin < bounds[d]) {\n            bounds[d] = tMin;\n        }\n        if (tMax > bounds[d + 3]) {\n            bounds[d + 3] = tMax;\n        }\n    }\n}\n// compute bounds surface area\nfunction computeSurfaceArea(bounds) {\n    const d0 = bounds[3] - bounds[0];\n    const d1 = bounds[4] - bounds[1];\n    const d2 = bounds[5] - bounds[2];\n    return 2 * (d0 * d1 + d1 * d2 + d2 * d0);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdGhyZWUtbWVzaC1idmgvc3JjL3V0aWxzL0FycmF5Qm94VXRpbGl0aWVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBTyxTQUFTQSxXQUFZQyxXQUFXLEVBQUVDLEtBQUssRUFBRUMsTUFBTTtJQUVyREEsT0FBT0MsR0FBRyxDQUFDQyxDQUFDLEdBQUdILEtBQUssQ0FBRUQsWUFBYTtJQUNuQ0UsT0FBT0MsR0FBRyxDQUFDRSxDQUFDLEdBQUdKLEtBQUssQ0FBRUQsY0FBYyxFQUFHO0lBQ3ZDRSxPQUFPQyxHQUFHLENBQUNHLENBQUMsR0FBR0wsS0FBSyxDQUFFRCxjQUFjLEVBQUc7SUFFdkNFLE9BQU9LLEdBQUcsQ0FBQ0gsQ0FBQyxHQUFHSCxLQUFLLENBQUVELGNBQWMsRUFBRztJQUN2Q0UsT0FBT0ssR0FBRyxDQUFDRixDQUFDLEdBQUdKLEtBQUssQ0FBRUQsY0FBYyxFQUFHO0lBQ3ZDRSxPQUFPSyxHQUFHLENBQUNELENBQUMsR0FBR0wsS0FBSyxDQUFFRCxjQUFjLEVBQUc7SUFFdkMsT0FBT0U7QUFFUjtBQUVPLFNBQVNNLGdCQUFpQk4sTUFBTTtJQUV0Q0EsTUFBTSxDQUFFLEVBQUcsR0FBR0EsTUFBTSxDQUFFLEVBQUcsR0FBR0EsTUFBTSxDQUFFLEVBQUcsR0FBR087SUFDMUNQLE1BQU0sQ0FBRSxFQUFHLEdBQUdBLE1BQU0sQ0FBRSxFQUFHLEdBQUdBLE1BQU0sQ0FBRSxFQUFHLEdBQUcsQ0FBRU87QUFFN0M7QUFFTyxTQUFTQyxvQkFBcUJDLE1BQU07SUFFMUMsSUFBSUMsY0FBYyxDQUFFO0lBQ3BCLElBQUlDLFlBQVksQ0FBRUo7SUFFbEIsSUFBTSxJQUFJSyxJQUFJLEdBQUdBLElBQUksR0FBR0EsSUFBTztRQUU5QixNQUFNQyxPQUFPSixNQUFNLENBQUVHLElBQUksRUFBRyxHQUFHSCxNQUFNLENBQUVHLEVBQUc7UUFDMUMsSUFBS0MsT0FBT0YsV0FBWTtZQUV2QkEsWUFBWUU7WUFDWkgsY0FBY0U7UUFFZjtJQUVEO0lBRUEsT0FBT0Y7QUFFUjtBQUVBLGdDQUFnQztBQUN6QixTQUFTSSxXQUFZQyxNQUFNLEVBQUVmLE1BQU07SUFFekNBLE9BQU9nQixHQUFHLENBQUVEO0FBRWI7QUFFQSxvREFBb0Q7QUFDN0MsU0FBU0UsWUFBYUMsQ0FBQyxFQUFFQyxDQUFDLEVBQUVuQixNQUFNO0lBRXhDLElBQUlvQixNQUFNQztJQUNWLElBQU0sSUFBSUMsSUFBSSxHQUFHQSxJQUFJLEdBQUdBLElBQU87UUFFOUIsTUFBTUMsS0FBS0QsSUFBSTtRQUVmLHlCQUF5QjtRQUN6QkYsT0FBT0YsQ0FBQyxDQUFFSSxFQUFHO1FBQ2JELE9BQU9GLENBQUMsQ0FBRUcsRUFBRztRQUNidEIsTUFBTSxDQUFFc0IsRUFBRyxHQUFHRixPQUFPQyxPQUFPRCxPQUFPQztRQUVuQyxxQkFBcUI7UUFDckJELE9BQU9GLENBQUMsQ0FBRUssR0FBSTtRQUNkRixPQUFPRixDQUFDLENBQUVJLEdBQUk7UUFDZHZCLE1BQU0sQ0FBRXVCLEdBQUksR0FBR0gsT0FBT0MsT0FBT0QsT0FBT0M7SUFFckM7QUFFRDtBQUVBLDJEQUEyRDtBQUNwRCxTQUFTRyx1QkFBd0JDLFVBQVUsRUFBRUMsY0FBYyxFQUFFakIsTUFBTTtJQUV6RSxJQUFNLElBQUlhLElBQUksR0FBR0EsSUFBSSxHQUFHQSxJQUFPO1FBRTlCLE1BQU1LLFVBQVVELGNBQWMsQ0FBRUQsYUFBYSxJQUFJSCxFQUFHO1FBQ3BELE1BQU1NLFFBQVFGLGNBQWMsQ0FBRUQsYUFBYSxJQUFJSCxJQUFJLEVBQUc7UUFFdEQsTUFBTU8sT0FBT0YsVUFBVUM7UUFDdkIsTUFBTUUsT0FBT0gsVUFBVUM7UUFFdkIsSUFBS0MsT0FBT3BCLE1BQU0sQ0FBRWEsRUFBRyxFQUFHO1lBRXpCYixNQUFNLENBQUVhLEVBQUcsR0FBR087UUFFZjtRQUVBLElBQUtDLE9BQU9yQixNQUFNLENBQUVhLElBQUksRUFBRyxFQUFHO1lBRTdCYixNQUFNLENBQUVhLElBQUksRUFBRyxHQUFHUTtRQUVuQjtJQUVEO0FBRUQ7QUFFQSw4QkFBOEI7QUFDdkIsU0FBU0MsbUJBQW9CdEIsTUFBTTtJQUV6QyxNQUFNdUIsS0FBS3ZCLE1BQU0sQ0FBRSxFQUFHLEdBQUdBLE1BQU0sQ0FBRSxFQUFHO0lBQ3BDLE1BQU13QixLQUFLeEIsTUFBTSxDQUFFLEVBQUcsR0FBR0EsTUFBTSxDQUFFLEVBQUc7SUFDcEMsTUFBTXlCLEtBQUt6QixNQUFNLENBQUUsRUFBRyxHQUFHQSxNQUFNLENBQUUsRUFBRztJQUVwQyxPQUFPLElBQU11QixDQUFBQSxLQUFLQyxLQUFLQSxLQUFLQyxLQUFLQSxLQUFLRixFQUFDO0FBRXhDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3RocmVlLW1lc2gtYnZoL3NyYy91dGlscy9BcnJheUJveFV0aWxpdGllcy5qcz9jMTczIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBhcnJheVRvQm94KCBub2RlSW5kZXgzMiwgYXJyYXksIHRhcmdldCApIHtcblxuXHR0YXJnZXQubWluLnggPSBhcnJheVsgbm9kZUluZGV4MzIgXTtcblx0dGFyZ2V0Lm1pbi55ID0gYXJyYXlbIG5vZGVJbmRleDMyICsgMSBdO1xuXHR0YXJnZXQubWluLnogPSBhcnJheVsgbm9kZUluZGV4MzIgKyAyIF07XG5cblx0dGFyZ2V0Lm1heC54ID0gYXJyYXlbIG5vZGVJbmRleDMyICsgMyBdO1xuXHR0YXJnZXQubWF4LnkgPSBhcnJheVsgbm9kZUluZGV4MzIgKyA0IF07XG5cdHRhcmdldC5tYXgueiA9IGFycmF5WyBub2RlSW5kZXgzMiArIDUgXTtcblxuXHRyZXR1cm4gdGFyZ2V0O1xuXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtYWtlRW1wdHlCb3VuZHMoIHRhcmdldCApIHtcblxuXHR0YXJnZXRbIDAgXSA9IHRhcmdldFsgMSBdID0gdGFyZ2V0WyAyIF0gPSBJbmZpbml0eTtcblx0dGFyZ2V0WyAzIF0gPSB0YXJnZXRbIDQgXSA9IHRhcmdldFsgNSBdID0gLSBJbmZpbml0eTtcblxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0TG9uZ2VzdEVkZ2VJbmRleCggYm91bmRzICkge1xuXG5cdGxldCBzcGxpdERpbUlkeCA9IC0gMTtcblx0bGV0IHNwbGl0RGlzdCA9IC0gSW5maW5pdHk7XG5cblx0Zm9yICggbGV0IGkgPSAwOyBpIDwgMzsgaSArKyApIHtcblxuXHRcdGNvbnN0IGRpc3QgPSBib3VuZHNbIGkgKyAzIF0gLSBib3VuZHNbIGkgXTtcblx0XHRpZiAoIGRpc3QgPiBzcGxpdERpc3QgKSB7XG5cblx0XHRcdHNwbGl0RGlzdCA9IGRpc3Q7XG5cdFx0XHRzcGxpdERpbUlkeCA9IGk7XG5cblx0XHR9XG5cblx0fVxuXG5cdHJldHVybiBzcGxpdERpbUlkeDtcblxufVxuXG4vLyBjb3BpZXMgYm91bmRzIGEgaW50byBib3VuZHMgYlxuZXhwb3J0IGZ1bmN0aW9uIGNvcHlCb3VuZHMoIHNvdXJjZSwgdGFyZ2V0ICkge1xuXG5cdHRhcmdldC5zZXQoIHNvdXJjZSApO1xuXG59XG5cbi8vIHNldHMgYm91bmRzIHRhcmdldCB0byB0aGUgdW5pb24gb2YgYm91bmRzIGEgYW5kIGJcbmV4cG9ydCBmdW5jdGlvbiB1bmlvbkJvdW5kcyggYSwgYiwgdGFyZ2V0ICkge1xuXG5cdGxldCBhVmFsLCBiVmFsO1xuXHRmb3IgKCBsZXQgZCA9IDA7IGQgPCAzOyBkICsrICkge1xuXG5cdFx0Y29uc3QgZDMgPSBkICsgMztcblxuXHRcdC8vIHNldCB0aGUgbWluaW11bSB2YWx1ZXNcblx0XHRhVmFsID0gYVsgZCBdO1xuXHRcdGJWYWwgPSBiWyBkIF07XG5cdFx0dGFyZ2V0WyBkIF0gPSBhVmFsIDwgYlZhbCA/IGFWYWwgOiBiVmFsO1xuXG5cdFx0Ly8gc2V0IHRoZSBtYXggdmFsdWVzXG5cdFx0YVZhbCA9IGFbIGQzIF07XG5cdFx0YlZhbCA9IGJbIGQzIF07XG5cdFx0dGFyZ2V0WyBkMyBdID0gYVZhbCA+IGJWYWwgPyBhVmFsIDogYlZhbDtcblxuXHR9XG5cbn1cblxuLy8gZXhwYW5kcyB0aGUgZ2l2ZW4gYm91bmRzIGJ5IHRoZSBwcm92aWRlZCB0cmlhbmdsZSBib3VuZHNcbmV4cG9ydCBmdW5jdGlvbiBleHBhbmRCeVRyaWFuZ2xlQm91bmRzKCBzdGFydEluZGV4LCB0cmlhbmdsZUJvdW5kcywgYm91bmRzICkge1xuXG5cdGZvciAoIGxldCBkID0gMDsgZCA8IDM7IGQgKysgKSB7XG5cblx0XHRjb25zdCB0Q2VudGVyID0gdHJpYW5nbGVCb3VuZHNbIHN0YXJ0SW5kZXggKyAyICogZCBdO1xuXHRcdGNvbnN0IHRIYWxmID0gdHJpYW5nbGVCb3VuZHNbIHN0YXJ0SW5kZXggKyAyICogZCArIDEgXTtcblxuXHRcdGNvbnN0IHRNaW4gPSB0Q2VudGVyIC0gdEhhbGY7XG5cdFx0Y29uc3QgdE1heCA9IHRDZW50ZXIgKyB0SGFsZjtcblxuXHRcdGlmICggdE1pbiA8IGJvdW5kc1sgZCBdICkge1xuXG5cdFx0XHRib3VuZHNbIGQgXSA9IHRNaW47XG5cblx0XHR9XG5cblx0XHRpZiAoIHRNYXggPiBib3VuZHNbIGQgKyAzIF0gKSB7XG5cblx0XHRcdGJvdW5kc1sgZCArIDMgXSA9IHRNYXg7XG5cblx0XHR9XG5cblx0fVxuXG59XG5cbi8vIGNvbXB1dGUgYm91bmRzIHN1cmZhY2UgYXJlYVxuZXhwb3J0IGZ1bmN0aW9uIGNvbXB1dGVTdXJmYWNlQXJlYSggYm91bmRzICkge1xuXG5cdGNvbnN0IGQwID0gYm91bmRzWyAzIF0gLSBib3VuZHNbIDAgXTtcblx0Y29uc3QgZDEgPSBib3VuZHNbIDQgXSAtIGJvdW5kc1sgMSBdO1xuXHRjb25zdCBkMiA9IGJvdW5kc1sgNSBdIC0gYm91bmRzWyAyIF07XG5cblx0cmV0dXJuIDIgKiAoIGQwICogZDEgKyBkMSAqIGQyICsgZDIgKiBkMCApO1xuXG59XG4iXSwibmFtZXMiOlsiYXJyYXlUb0JveCIsIm5vZGVJbmRleDMyIiwiYXJyYXkiLCJ0YXJnZXQiLCJtaW4iLCJ4IiwieSIsInoiLCJtYXgiLCJtYWtlRW1wdHlCb3VuZHMiLCJJbmZpbml0eSIsImdldExvbmdlc3RFZGdlSW5kZXgiLCJib3VuZHMiLCJzcGxpdERpbUlkeCIsInNwbGl0RGlzdCIsImkiLCJkaXN0IiwiY29weUJvdW5kcyIsInNvdXJjZSIsInNldCIsInVuaW9uQm91bmRzIiwiYSIsImIiLCJhVmFsIiwiYlZhbCIsImQiLCJkMyIsImV4cGFuZEJ5VHJpYW5nbGVCb3VuZHMiLCJzdGFydEluZGV4IiwidHJpYW5nbGVCb3VuZHMiLCJ0Q2VudGVyIiwidEhhbGYiLCJ0TWluIiwidE1heCIsImNvbXB1dGVTdXJmYWNlQXJlYSIsImQwIiwiZDEiLCJkMiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/three-mesh-bvh/src/utils/ArrayBoxUtilities.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/three-mesh-bvh/src/utils/BufferUtils.js":
/*!**************************************************************!*\
  !*** ./node_modules/three-mesh-bvh/src/utils/BufferUtils.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   convertToBufferType: () => (/* binding */ convertToBufferType),\n/* harmony export */   isSharedArrayBufferSupported: () => (/* binding */ isSharedArrayBufferSupported)\n/* harmony export */ });\nfunction isSharedArrayBufferSupported() {\n    return typeof SharedArrayBuffer !== \"undefined\";\n}\nfunction convertToBufferType(array, BufferConstructor) {\n    if (array === null) {\n        return array;\n    } else if (array.buffer) {\n        const buffer = array.buffer;\n        if (buffer.constructor === BufferConstructor) {\n            return array;\n        }\n        const ArrayConstructor = array.constructor;\n        const result = new ArrayConstructor(new BufferConstructor(buffer.byteLength));\n        result.set(array);\n        return result;\n    } else {\n        if (array.constructor === BufferConstructor) {\n            return array;\n        }\n        const result = new BufferConstructor(array.byteLength);\n        new Uint8Array(result).set(new Uint8Array(array));\n        return result;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdGhyZWUtbWVzaC1idmgvc3JjL3V0aWxzL0J1ZmZlclV0aWxzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQU8sU0FBU0E7SUFFZixPQUFPLE9BQU9DLHNCQUFzQjtBQUVyQztBQUVPLFNBQVNDLG9CQUFxQkMsS0FBSyxFQUFFQyxpQkFBaUI7SUFFNUQsSUFBS0QsVUFBVSxNQUFPO1FBRXJCLE9BQU9BO0lBRVIsT0FBTyxJQUFLQSxNQUFNRSxNQUFNLEVBQUc7UUFFMUIsTUFBTUEsU0FBU0YsTUFBTUUsTUFBTTtRQUMzQixJQUFLQSxPQUFPQyxXQUFXLEtBQUtGLG1CQUFvQjtZQUUvQyxPQUFPRDtRQUVSO1FBRUEsTUFBTUksbUJBQW1CSixNQUFNRyxXQUFXO1FBQzFDLE1BQU1FLFNBQVMsSUFBSUQsaUJBQWtCLElBQUlILGtCQUFtQkMsT0FBT0ksVUFBVTtRQUM3RUQsT0FBT0UsR0FBRyxDQUFFUDtRQUNaLE9BQU9LO0lBRVIsT0FBTztRQUVOLElBQUtMLE1BQU1HLFdBQVcsS0FBS0YsbUJBQW9CO1lBRTlDLE9BQU9EO1FBRVI7UUFFQSxNQUFNSyxTQUFTLElBQUlKLGtCQUFtQkQsTUFBTU0sVUFBVTtRQUN0RCxJQUFJRSxXQUFZSCxRQUFTRSxHQUFHLENBQUUsSUFBSUMsV0FBWVI7UUFDOUMsT0FBT0s7SUFFUjtBQUVEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3RocmVlLW1lc2gtYnZoL3NyYy91dGlscy9CdWZmZXJVdGlscy5qcz9iYTVjIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBpc1NoYXJlZEFycmF5QnVmZmVyU3VwcG9ydGVkKCkge1xuXG5cdHJldHVybiB0eXBlb2YgU2hhcmVkQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnO1xuXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb252ZXJ0VG9CdWZmZXJUeXBlKCBhcnJheSwgQnVmZmVyQ29uc3RydWN0b3IgKSB7XG5cblx0aWYgKCBhcnJheSA9PT0gbnVsbCApIHtcblxuXHRcdHJldHVybiBhcnJheTtcblxuXHR9IGVsc2UgaWYgKCBhcnJheS5idWZmZXIgKSB7XG5cblx0XHRjb25zdCBidWZmZXIgPSBhcnJheS5idWZmZXI7XG5cdFx0aWYgKCBidWZmZXIuY29uc3RydWN0b3IgPT09IEJ1ZmZlckNvbnN0cnVjdG9yICkge1xuXG5cdFx0XHRyZXR1cm4gYXJyYXk7XG5cblx0XHR9XG5cblx0XHRjb25zdCBBcnJheUNvbnN0cnVjdG9yID0gYXJyYXkuY29uc3RydWN0b3I7XG5cdFx0Y29uc3QgcmVzdWx0ID0gbmV3IEFycmF5Q29uc3RydWN0b3IoIG5ldyBCdWZmZXJDb25zdHJ1Y3RvciggYnVmZmVyLmJ5dGVMZW5ndGggKSApO1xuXHRcdHJlc3VsdC5zZXQoIGFycmF5ICk7XG5cdFx0cmV0dXJuIHJlc3VsdDtcblxuXHR9IGVsc2Uge1xuXG5cdFx0aWYgKCBhcnJheS5jb25zdHJ1Y3RvciA9PT0gQnVmZmVyQ29uc3RydWN0b3IgKSB7XG5cblx0XHRcdHJldHVybiBhcnJheTtcblxuXHRcdH1cblxuXHRcdGNvbnN0IHJlc3VsdCA9IG5ldyBCdWZmZXJDb25zdHJ1Y3RvciggYXJyYXkuYnl0ZUxlbmd0aCApO1xuXHRcdG5ldyBVaW50OEFycmF5KCByZXN1bHQgKS5zZXQoIG5ldyBVaW50OEFycmF5KCBhcnJheSApICk7XG5cdFx0cmV0dXJuIHJlc3VsdDtcblxuXHR9XG5cbn1cbiJdLCJuYW1lcyI6WyJpc1NoYXJlZEFycmF5QnVmZmVyU3VwcG9ydGVkIiwiU2hhcmVkQXJyYXlCdWZmZXIiLCJjb252ZXJ0VG9CdWZmZXJUeXBlIiwiYXJyYXkiLCJCdWZmZXJDb25zdHJ1Y3RvciIsImJ1ZmZlciIsImNvbnN0cnVjdG9yIiwiQXJyYXlDb25zdHJ1Y3RvciIsInJlc3VsdCIsImJ5dGVMZW5ndGgiLCJzZXQiLCJVaW50OEFycmF5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/three-mesh-bvh/src/utils/BufferUtils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/three-mesh-bvh/src/utils/ExtendedTrianglePool.js":
/*!***********************************************************************!*\
  !*** ./node_modules/three-mesh-bvh/src/utils/ExtendedTrianglePool.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ExtendedTrianglePool: () => (/* binding */ ExtendedTrianglePool)\n/* harmony export */ });\n/* harmony import */ var _math_ExtendedTriangle_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../math/ExtendedTriangle.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/math/ExtendedTriangle.js\");\n/* harmony import */ var _PrimitivePool_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./PrimitivePool.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/utils/PrimitivePool.js\");\n\n\nclass ExtendedTrianglePoolBase extends _PrimitivePool_js__WEBPACK_IMPORTED_MODULE_0__.PrimitivePool {\n    constructor(){\n        super(()=>new _math_ExtendedTriangle_js__WEBPACK_IMPORTED_MODULE_1__.ExtendedTriangle());\n    }\n}\nconst ExtendedTrianglePool = /* @__PURE__ */ new ExtendedTrianglePoolBase();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdGhyZWUtbWVzaC1idmgvc3JjL3V0aWxzL0V4dGVuZGVkVHJpYW5nbGVQb29sLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUErRDtBQUNaO0FBRW5ELE1BQU1FLGlDQUFpQ0QsNERBQWFBO0lBRW5ERSxhQUFjO1FBRWIsS0FBSyxDQUFFLElBQU0sSUFBSUgsdUVBQWdCQTtJQUVsQztBQUVEO0FBRU8sTUFBTUksdUJBQXVCLGFBQWEsR0FBRyxJQUFJRiwyQkFBMkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdGhyZWUtbWVzaC1idmgvc3JjL3V0aWxzL0V4dGVuZGVkVHJpYW5nbGVQb29sLmpzPzI2NzgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXh0ZW5kZWRUcmlhbmdsZSB9IGZyb20gJy4uL21hdGgvRXh0ZW5kZWRUcmlhbmdsZS5qcyc7XG5pbXBvcnQgeyBQcmltaXRpdmVQb29sIH0gZnJvbSAnLi9QcmltaXRpdmVQb29sLmpzJztcblxuY2xhc3MgRXh0ZW5kZWRUcmlhbmdsZVBvb2xCYXNlIGV4dGVuZHMgUHJpbWl0aXZlUG9vbCB7XG5cblx0Y29uc3RydWN0b3IoKSB7XG5cblx0XHRzdXBlciggKCkgPT4gbmV3IEV4dGVuZGVkVHJpYW5nbGUoKSApO1xuXG5cdH1cblxufVxuXG5leHBvcnQgY29uc3QgRXh0ZW5kZWRUcmlhbmdsZVBvb2wgPSAvKiBAX19QVVJFX18gKi8gbmV3IEV4dGVuZGVkVHJpYW5nbGVQb29sQmFzZSgpO1xuIl0sIm5hbWVzIjpbIkV4dGVuZGVkVHJpYW5nbGUiLCJQcmltaXRpdmVQb29sIiwiRXh0ZW5kZWRUcmlhbmdsZVBvb2xCYXNlIiwiY29uc3RydWN0b3IiLCJFeHRlbmRlZFRyaWFuZ2xlUG9vbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/three-mesh-bvh/src/utils/ExtendedTrianglePool.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/three-mesh-bvh/src/utils/ExtensionUtilities.js":
/*!*********************************************************************!*\
  !*** ./node_modules/three-mesh-bvh/src/utils/ExtensionUtilities.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   acceleratedRaycast: () => (/* binding */ acceleratedRaycast),\n/* harmony export */   computeBoundsTree: () => (/* binding */ computeBoundsTree),\n/* harmony export */   disposeBoundsTree: () => (/* binding */ disposeBoundsTree)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var _GeometryRayIntersectUtilities_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./GeometryRayIntersectUtilities.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/utils/GeometryRayIntersectUtilities.js\");\n/* harmony import */ var _core_MeshBVH_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../core/MeshBVH.js */ \"(ssr)/./node_modules/three-mesh-bvh/src/core/MeshBVH.js\");\n\n\n\nconst ray = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Ray();\nconst tmpInverseMatrix = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Matrix4();\nconst origMeshRaycastFunc = three__WEBPACK_IMPORTED_MODULE_0__.Mesh.prototype.raycast;\nfunction acceleratedRaycast(raycaster, intersects) {\n    if (this.geometry.boundsTree) {\n        if (this.material === undefined) return;\n        tmpInverseMatrix.copy(this.matrixWorld).invert();\n        ray.copy(raycaster.ray).applyMatrix4(tmpInverseMatrix);\n        const bvh = this.geometry.boundsTree;\n        if (raycaster.firstHitOnly === true) {\n            const hit = (0,_GeometryRayIntersectUtilities_js__WEBPACK_IMPORTED_MODULE_1__.convertRaycastIntersect)(bvh.raycastFirst(ray, this.material), this, raycaster);\n            if (hit) {\n                intersects.push(hit);\n            }\n        } else {\n            const hits = bvh.raycast(ray, this.material);\n            for(let i = 0, l = hits.length; i < l; i++){\n                const hit = (0,_GeometryRayIntersectUtilities_js__WEBPACK_IMPORTED_MODULE_1__.convertRaycastIntersect)(hits[i], this, raycaster);\n                if (hit) {\n                    intersects.push(hit);\n                }\n            }\n        }\n    } else {\n        origMeshRaycastFunc.call(this, raycaster, intersects);\n    }\n}\nfunction computeBoundsTree(options) {\n    this.boundsTree = new _core_MeshBVH_js__WEBPACK_IMPORTED_MODULE_2__.MeshBVH(this, options);\n    return this.boundsTree;\n}\nfunction disposeBoundsTree() {\n    this.boundsTree = null;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdGhyZWUtbWVzaC1idmgvc3JjL3V0aWxzL0V4dGVuc2lvblV0aWxpdGllcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBMkM7QUFDa0M7QUFDaEM7QUFFN0MsTUFBTUssTUFBTSxhQUFhLEdBQUcsSUFBSUwsc0NBQUdBO0FBQ25DLE1BQU1NLG1CQUFtQixhQUFhLEdBQUcsSUFBSUwsMENBQU9BO0FBQ3BELE1BQU1NLHNCQUFzQkwsdUNBQUlBLENBQUNNLFNBQVMsQ0FBQ0MsT0FBTztBQUUzQyxTQUFTQyxtQkFBb0JDLFNBQVMsRUFBRUMsVUFBVTtJQUV4RCxJQUFLLElBQUksQ0FBQ0MsUUFBUSxDQUFDQyxVQUFVLEVBQUc7UUFFL0IsSUFBSyxJQUFJLENBQUNDLFFBQVEsS0FBS0MsV0FBWTtRQUVuQ1YsaUJBQWlCVyxJQUFJLENBQUUsSUFBSSxDQUFDQyxXQUFXLEVBQUdDLE1BQU07UUFDaERkLElBQUlZLElBQUksQ0FBRU4sVUFBVU4sR0FBRyxFQUFHZSxZQUFZLENBQUVkO1FBRXhDLE1BQU1lLE1BQU0sSUFBSSxDQUFDUixRQUFRLENBQUNDLFVBQVU7UUFDcEMsSUFBS0gsVUFBVVcsWUFBWSxLQUFLLE1BQU87WUFFdEMsTUFBTUMsTUFBTXBCLDBGQUF1QkEsQ0FBRWtCLElBQUlHLFlBQVksQ0FBRW5CLEtBQUssSUFBSSxDQUFDVSxRQUFRLEdBQUksSUFBSSxFQUFFSjtZQUNuRixJQUFLWSxLQUFNO2dCQUVWWCxXQUFXYSxJQUFJLENBQUVGO1lBRWxCO1FBRUQsT0FBTztZQUVOLE1BQU1HLE9BQU9MLElBQUlaLE9BQU8sQ0FBRUosS0FBSyxJQUFJLENBQUNVLFFBQVE7WUFDNUMsSUFBTSxJQUFJWSxJQUFJLEdBQUdDLElBQUlGLEtBQUtHLE1BQU0sRUFBRUYsSUFBSUMsR0FBR0QsSUFBTztnQkFFL0MsTUFBTUosTUFBTXBCLDBGQUF1QkEsQ0FBRXVCLElBQUksQ0FBRUMsRUFBRyxFQUFFLElBQUksRUFBRWhCO2dCQUN0RCxJQUFLWSxLQUFNO29CQUVWWCxXQUFXYSxJQUFJLENBQUVGO2dCQUVsQjtZQUVEO1FBRUQ7SUFFRCxPQUFPO1FBRU5oQixvQkFBb0J1QixJQUFJLENBQUUsSUFBSSxFQUFFbkIsV0FBV0M7SUFFNUM7QUFFRDtBQUVPLFNBQVNtQixrQkFBbUJDLE9BQU87SUFFekMsSUFBSSxDQUFDbEIsVUFBVSxHQUFHLElBQUlWLHFEQUFPQSxDQUFFLElBQUksRUFBRTRCO0lBQ3JDLE9BQU8sSUFBSSxDQUFDbEIsVUFBVTtBQUV2QjtBQUVPLFNBQVNtQjtJQUVmLElBQUksQ0FBQ25CLFVBQVUsR0FBRztBQUVuQiIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90aHJlZS1tZXNoLWJ2aC9zcmMvdXRpbHMvRXh0ZW5zaW9uVXRpbGl0aWVzLmpzPzQwYjAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmF5LCBNYXRyaXg0LCBNZXNoIH0gZnJvbSAndGhyZWUnO1xuaW1wb3J0IHsgY29udmVydFJheWNhc3RJbnRlcnNlY3QgfSBmcm9tICcuL0dlb21ldHJ5UmF5SW50ZXJzZWN0VXRpbGl0aWVzLmpzJztcbmltcG9ydCB7IE1lc2hCVkggfSBmcm9tICcuLi9jb3JlL01lc2hCVkguanMnO1xuXG5jb25zdCByYXkgPSAvKiBAX19QVVJFX18gKi8gbmV3IFJheSgpO1xuY29uc3QgdG1wSW52ZXJzZU1hdHJpeCA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWF0cml4NCgpO1xuY29uc3Qgb3JpZ01lc2hSYXljYXN0RnVuYyA9IE1lc2gucHJvdG90eXBlLnJheWNhc3Q7XG5cbmV4cG9ydCBmdW5jdGlvbiBhY2NlbGVyYXRlZFJheWNhc3QoIHJheWNhc3RlciwgaW50ZXJzZWN0cyApIHtcblxuXHRpZiAoIHRoaXMuZ2VvbWV0cnkuYm91bmRzVHJlZSApIHtcblxuXHRcdGlmICggdGhpcy5tYXRlcmlhbCA9PT0gdW5kZWZpbmVkICkgcmV0dXJuO1xuXG5cdFx0dG1wSW52ZXJzZU1hdHJpeC5jb3B5KCB0aGlzLm1hdHJpeFdvcmxkICkuaW52ZXJ0KCk7XG5cdFx0cmF5LmNvcHkoIHJheWNhc3Rlci5yYXkgKS5hcHBseU1hdHJpeDQoIHRtcEludmVyc2VNYXRyaXggKTtcblxuXHRcdGNvbnN0IGJ2aCA9IHRoaXMuZ2VvbWV0cnkuYm91bmRzVHJlZTtcblx0XHRpZiAoIHJheWNhc3Rlci5maXJzdEhpdE9ubHkgPT09IHRydWUgKSB7XG5cblx0XHRcdGNvbnN0IGhpdCA9IGNvbnZlcnRSYXljYXN0SW50ZXJzZWN0KCBidmgucmF5Y2FzdEZpcnN0KCByYXksIHRoaXMubWF0ZXJpYWwgKSwgdGhpcywgcmF5Y2FzdGVyICk7XG5cdFx0XHRpZiAoIGhpdCApIHtcblxuXHRcdFx0XHRpbnRlcnNlY3RzLnB1c2goIGhpdCApO1xuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRjb25zdCBoaXRzID0gYnZoLnJheWNhc3QoIHJheSwgdGhpcy5tYXRlcmlhbCApO1xuXHRcdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gaGl0cy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdGNvbnN0IGhpdCA9IGNvbnZlcnRSYXljYXN0SW50ZXJzZWN0KCBoaXRzWyBpIF0sIHRoaXMsIHJheWNhc3RlciApO1xuXHRcdFx0XHRpZiAoIGhpdCApIHtcblxuXHRcdFx0XHRcdGludGVyc2VjdHMucHVzaCggaGl0ICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fSBlbHNlIHtcblxuXHRcdG9yaWdNZXNoUmF5Y2FzdEZ1bmMuY2FsbCggdGhpcywgcmF5Y2FzdGVyLCBpbnRlcnNlY3RzICk7XG5cblx0fVxuXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb21wdXRlQm91bmRzVHJlZSggb3B0aW9ucyApIHtcblxuXHR0aGlzLmJvdW5kc1RyZWUgPSBuZXcgTWVzaEJWSCggdGhpcywgb3B0aW9ucyApO1xuXHRyZXR1cm4gdGhpcy5ib3VuZHNUcmVlO1xuXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkaXNwb3NlQm91bmRzVHJlZSgpIHtcblxuXHR0aGlzLmJvdW5kc1RyZWUgPSBudWxsO1xuXG59XG4iXSwibmFtZXMiOlsiUmF5IiwiTWF0cml4NCIsIk1lc2giLCJjb252ZXJ0UmF5Y2FzdEludGVyc2VjdCIsIk1lc2hCVkgiLCJyYXkiLCJ0bXBJbnZlcnNlTWF0cml4Iiwib3JpZ01lc2hSYXljYXN0RnVuYyIsInByb3RvdHlwZSIsInJheWNhc3QiLCJhY2NlbGVyYXRlZFJheWNhc3QiLCJyYXljYXN0ZXIiLCJpbnRlcnNlY3RzIiwiZ2VvbWV0cnkiLCJib3VuZHNUcmVlIiwibWF0ZXJpYWwiLCJ1bmRlZmluZWQiLCJjb3B5IiwibWF0cml4V29ybGQiLCJpbnZlcnQiLCJhcHBseU1hdHJpeDQiLCJidmgiLCJmaXJzdEhpdE9ubHkiLCJoaXQiLCJyYXljYXN0Rmlyc3QiLCJwdXNoIiwiaGl0cyIsImkiLCJsIiwibGVuZ3RoIiwiY2FsbCIsImNvbXB1dGVCb3VuZHNUcmVlIiwib3B0aW9ucyIsImRpc3Bvc2VCb3VuZHNUcmVlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/three-mesh-bvh/src/utils/ExtensionUtilities.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/three-mesh-bvh/src/utils/GeometryRayIntersectUtilities.js":
/*!********************************************************************************!*\
  !*** ./node_modules/three-mesh-bvh/src/utils/GeometryRayIntersectUtilities.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   convertRaycastIntersect: () => (/* binding */ convertRaycastIntersect)\n/* harmony export */ });\n// converts the given BVH raycast intersection to align with the three.js raycast\n// structure (include object, world space distance and point).\nfunction convertRaycastIntersect(hit, object, raycaster) {\n    if (hit === null) {\n        return null;\n    }\n    hit.point.applyMatrix4(object.matrixWorld);\n    hit.distance = hit.point.distanceTo(raycaster.ray.origin);\n    hit.object = object;\n    if (hit.distance < raycaster.near || hit.distance > raycaster.far) {\n        return null;\n    } else {\n        return hit;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdGhyZWUtbWVzaC1idmgvc3JjL3V0aWxzL0dlb21ldHJ5UmF5SW50ZXJzZWN0VXRpbGl0aWVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpRkFBaUY7QUFDakYsOERBQThEO0FBQ3ZELFNBQVNBLHdCQUF5QkMsR0FBRyxFQUFFQyxNQUFNLEVBQUVDLFNBQVM7SUFFOUQsSUFBS0YsUUFBUSxNQUFPO1FBRW5CLE9BQU87SUFFUjtJQUVBQSxJQUFJRyxLQUFLLENBQUNDLFlBQVksQ0FBRUgsT0FBT0ksV0FBVztJQUMxQ0wsSUFBSU0sUUFBUSxHQUFHTixJQUFJRyxLQUFLLENBQUNJLFVBQVUsQ0FBRUwsVUFBVU0sR0FBRyxDQUFDQyxNQUFNO0lBQ3pEVCxJQUFJQyxNQUFNLEdBQUdBO0lBRWIsSUFBS0QsSUFBSU0sUUFBUSxHQUFHSixVQUFVUSxJQUFJLElBQUlWLElBQUlNLFFBQVEsR0FBR0osVUFBVVMsR0FBRyxFQUFHO1FBRXBFLE9BQU87SUFFUixPQUFPO1FBRU4sT0FBT1g7SUFFUjtBQUVEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3RocmVlLW1lc2gtYnZoL3NyYy91dGlscy9HZW9tZXRyeVJheUludGVyc2VjdFV0aWxpdGllcy5qcz8zNzBkIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGNvbnZlcnRzIHRoZSBnaXZlbiBCVkggcmF5Y2FzdCBpbnRlcnNlY3Rpb24gdG8gYWxpZ24gd2l0aCB0aGUgdGhyZWUuanMgcmF5Y2FzdFxuLy8gc3RydWN0dXJlIChpbmNsdWRlIG9iamVjdCwgd29ybGQgc3BhY2UgZGlzdGFuY2UgYW5kIHBvaW50KS5cbmV4cG9ydCBmdW5jdGlvbiBjb252ZXJ0UmF5Y2FzdEludGVyc2VjdCggaGl0LCBvYmplY3QsIHJheWNhc3RlciApIHtcblxuXHRpZiAoIGhpdCA9PT0gbnVsbCApIHtcblxuXHRcdHJldHVybiBudWxsO1xuXG5cdH1cblxuXHRoaXQucG9pbnQuYXBwbHlNYXRyaXg0KCBvYmplY3QubWF0cml4V29ybGQgKTtcblx0aGl0LmRpc3RhbmNlID0gaGl0LnBvaW50LmRpc3RhbmNlVG8oIHJheWNhc3Rlci5yYXkub3JpZ2luICk7XG5cdGhpdC5vYmplY3QgPSBvYmplY3Q7XG5cblx0aWYgKCBoaXQuZGlzdGFuY2UgPCByYXljYXN0ZXIubmVhciB8fCBoaXQuZGlzdGFuY2UgPiByYXljYXN0ZXIuZmFyICkge1xuXG5cdFx0cmV0dXJuIG51bGw7XG5cblx0fSBlbHNlIHtcblxuXHRcdHJldHVybiBoaXQ7XG5cblx0fVxuXG59XG4iXSwibmFtZXMiOlsiY29udmVydFJheWNhc3RJbnRlcnNlY3QiLCJoaXQiLCJvYmplY3QiLCJyYXljYXN0ZXIiLCJwb2ludCIsImFwcGx5TWF0cml4NCIsIm1hdHJpeFdvcmxkIiwiZGlzdGFuY2UiLCJkaXN0YW5jZVRvIiwicmF5Iiwib3JpZ2luIiwibmVhciIsImZhciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/three-mesh-bvh/src/utils/GeometryRayIntersectUtilities.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/three-mesh-bvh/src/utils/PrimitivePool.js":
/*!****************************************************************!*\
  !*** ./node_modules/three-mesh-bvh/src/utils/PrimitivePool.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PrimitivePool: () => (/* binding */ PrimitivePool)\n/* harmony export */ });\nclass PrimitivePool {\n    constructor(getNewPrimitive){\n        this._getNewPrimitive = getNewPrimitive;\n        this._primitives = [];\n    }\n    getPrimitive() {\n        const primitives = this._primitives;\n        if (primitives.length === 0) {\n            return this._getNewPrimitive();\n        } else {\n            return primitives.pop();\n        }\n    }\n    releasePrimitive(primitive) {\n        this._primitives.push(primitive);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdGhyZWUtbWVzaC1idmgvc3JjL3V0aWxzL1ByaW1pdGl2ZVBvb2wuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLE1BQU1BO0lBRVpDLFlBQWFDLGVBQWUsQ0FBRztRQUU5QixJQUFJLENBQUNDLGdCQUFnQixHQUFHRDtRQUN4QixJQUFJLENBQUNFLFdBQVcsR0FBRyxFQUFFO0lBRXRCO0lBRUFDLGVBQWU7UUFFZCxNQUFNQyxhQUFhLElBQUksQ0FBQ0YsV0FBVztRQUNuQyxJQUFLRSxXQUFXQyxNQUFNLEtBQUssR0FBSTtZQUU5QixPQUFPLElBQUksQ0FBQ0osZ0JBQWdCO1FBRTdCLE9BQU87WUFFTixPQUFPRyxXQUFXRSxHQUFHO1FBRXRCO0lBRUQ7SUFFQUMsaUJBQWtCQyxTQUFTLEVBQUc7UUFFN0IsSUFBSSxDQUFDTixXQUFXLENBQUNPLElBQUksQ0FBRUQ7SUFFeEI7QUFFRCIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90aHJlZS1tZXNoLWJ2aC9zcmMvdXRpbHMvUHJpbWl0aXZlUG9vbC5qcz80OGZlIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBQcmltaXRpdmVQb29sIHtcblxuXHRjb25zdHJ1Y3RvciggZ2V0TmV3UHJpbWl0aXZlICkge1xuXG5cdFx0dGhpcy5fZ2V0TmV3UHJpbWl0aXZlID0gZ2V0TmV3UHJpbWl0aXZlO1xuXHRcdHRoaXMuX3ByaW1pdGl2ZXMgPSBbXTtcblxuXHR9XG5cblx0Z2V0UHJpbWl0aXZlKCkge1xuXG5cdFx0Y29uc3QgcHJpbWl0aXZlcyA9IHRoaXMuX3ByaW1pdGl2ZXM7XG5cdFx0aWYgKCBwcmltaXRpdmVzLmxlbmd0aCA9PT0gMCApIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMuX2dldE5ld1ByaW1pdGl2ZSgpO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0cmV0dXJuIHByaW1pdGl2ZXMucG9wKCk7XG5cblx0XHR9XG5cblx0fVxuXG5cdHJlbGVhc2VQcmltaXRpdmUoIHByaW1pdGl2ZSApIHtcblxuXHRcdHRoaXMuX3ByaW1pdGl2ZXMucHVzaCggcHJpbWl0aXZlICk7XG5cblx0fVxuXG59XG4iXSwibmFtZXMiOlsiUHJpbWl0aXZlUG9vbCIsImNvbnN0cnVjdG9yIiwiZ2V0TmV3UHJpbWl0aXZlIiwiX2dldE5ld1ByaW1pdGl2ZSIsIl9wcmltaXRpdmVzIiwiZ2V0UHJpbWl0aXZlIiwicHJpbWl0aXZlcyIsImxlbmd0aCIsInBvcCIsInJlbGVhc2VQcmltaXRpdmUiLCJwcmltaXRpdmUiLCJwdXNoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/three-mesh-bvh/src/utils/PrimitivePool.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/three-mesh-bvh/src/utils/ThreeRayIntersectUtilities.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/three-mesh-bvh/src/utils/ThreeRayIntersectUtilities.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   intersectTri: () => (/* binding */ intersectTri)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n\n// Ripped and modified From THREE.js Mesh raycast\n// https://github.com/mrdoob/three.js/blob/0aa87c999fe61e216c1133fba7a95772b503eddf/src/objects/Mesh.js#L115\nconst _vA = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\nconst _vB = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\nconst _vC = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\nconst _uvA = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Vector2();\nconst _uvB = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Vector2();\nconst _uvC = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Vector2();\nconst _normalA = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\nconst _normalB = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\nconst _normalC = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\nconst _intersectionPoint = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\nfunction checkIntersection(ray, pA, pB, pC, point, side) {\n    let intersect;\n    if (side === three__WEBPACK_IMPORTED_MODULE_0__.BackSide) {\n        intersect = ray.intersectTriangle(pC, pB, pA, true, point);\n    } else {\n        intersect = ray.intersectTriangle(pA, pB, pC, side !== three__WEBPACK_IMPORTED_MODULE_0__.DoubleSide, point);\n    }\n    if (intersect === null) return null;\n    const distance = ray.origin.distanceTo(point);\n    return {\n        distance: distance,\n        point: point.clone()\n    };\n}\nfunction checkBufferGeometryIntersection(ray, position, normal, uv, uv1, a, b, c, side) {\n    _vA.fromBufferAttribute(position, a);\n    _vB.fromBufferAttribute(position, b);\n    _vC.fromBufferAttribute(position, c);\n    const intersection = checkIntersection(ray, _vA, _vB, _vC, _intersectionPoint, side);\n    if (intersection) {\n        if (uv) {\n            _uvA.fromBufferAttribute(uv, a);\n            _uvB.fromBufferAttribute(uv, b);\n            _uvC.fromBufferAttribute(uv, c);\n            intersection.uv = three__WEBPACK_IMPORTED_MODULE_0__.Triangle.getInterpolation(_intersectionPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new three__WEBPACK_IMPORTED_MODULE_0__.Vector2());\n        }\n        if (uv1) {\n            _uvA.fromBufferAttribute(uv1, a);\n            _uvB.fromBufferAttribute(uv1, b);\n            _uvC.fromBufferAttribute(uv1, c);\n            intersection.uv1 = three__WEBPACK_IMPORTED_MODULE_0__.Triangle.getInterpolation(_intersectionPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new three__WEBPACK_IMPORTED_MODULE_0__.Vector2());\n        }\n        if (normal) {\n            _normalA.fromBufferAttribute(normal, a);\n            _normalB.fromBufferAttribute(normal, b);\n            _normalC.fromBufferAttribute(normal, c);\n            intersection.normal = three__WEBPACK_IMPORTED_MODULE_0__.Triangle.getInterpolation(_intersectionPoint, _vA, _vB, _vC, _normalA, _normalB, _normalC, new three__WEBPACK_IMPORTED_MODULE_0__.Vector3());\n            if (intersection.normal.dot(ray.direction) > 0) {\n                intersection.normal.multiplyScalar(-1);\n            }\n        }\n        const face = {\n            a: a,\n            b: b,\n            c: c,\n            normal: new three__WEBPACK_IMPORTED_MODULE_0__.Vector3(),\n            materialIndex: 0\n        };\n        three__WEBPACK_IMPORTED_MODULE_0__.Triangle.getNormal(_vA, _vB, _vC, face.normal);\n        intersection.face = face;\n        intersection.faceIndex = a;\n    }\n    return intersection;\n}\n// https://github.com/mrdoob/three.js/blob/0aa87c999fe61e216c1133fba7a95772b503eddf/src/objects/Mesh.js#L258\nfunction intersectTri(geo, side, ray, tri, intersections) {\n    const triOffset = tri * 3;\n    let a = triOffset + 0;\n    let b = triOffset + 1;\n    let c = triOffset + 2;\n    const index = geo.index;\n    if (geo.index) {\n        a = index.getX(a);\n        b = index.getX(b);\n        c = index.getX(c);\n    }\n    const { position, normal, uv, uv1 } = geo.attributes;\n    const intersection = checkBufferGeometryIntersection(ray, position, normal, uv, uv1, a, b, c, side);\n    if (intersection) {\n        intersection.faceIndex = tri;\n        if (intersections) intersections.push(intersection);\n        return intersection;\n    }\n    return null;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/three-mesh-bvh/src/utils/ThreeRayIntersectUtilities.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/three-mesh-bvh/src/utils/TriangleUtilities.js":
/*!********************************************************************!*\
  !*** ./node_modules/three-mesh-bvh/src/utils/TriangleUtilities.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getTriangleHitPointInfo: () => (/* binding */ getTriangleHitPointInfo),\n/* harmony export */   setTriangle: () => (/* binding */ setTriangle)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n\n// sets the vertices of triangle `tri` with the 3 vertices after i\nfunction setTriangle(tri, i, index, pos) {\n    const ta = tri.a;\n    const tb = tri.b;\n    const tc = tri.c;\n    let i0 = i;\n    let i1 = i + 1;\n    let i2 = i + 2;\n    if (index) {\n        i0 = index.getX(i0);\n        i1 = index.getX(i1);\n        i2 = index.getX(i2);\n    }\n    ta.x = pos.getX(i0);\n    ta.y = pos.getY(i0);\n    ta.z = pos.getZ(i0);\n    tb.x = pos.getX(i1);\n    tb.y = pos.getY(i1);\n    tb.z = pos.getZ(i1);\n    tc.x = pos.getX(i2);\n    tc.y = pos.getY(i2);\n    tc.z = pos.getZ(i2);\n}\nconst tempV1 = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\nconst tempV2 = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\nconst tempV3 = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\nconst tempUV1 = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Vector2();\nconst tempUV2 = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Vector2();\nconst tempUV3 = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Vector2();\nfunction getTriangleHitPointInfo(point, geometry, triangleIndex, target) {\n    const indices = geometry.getIndex().array;\n    const positions = geometry.getAttribute(\"position\");\n    const uvs = geometry.getAttribute(\"uv\");\n    const a = indices[triangleIndex * 3];\n    const b = indices[triangleIndex * 3 + 1];\n    const c = indices[triangleIndex * 3 + 2];\n    tempV1.fromBufferAttribute(positions, a);\n    tempV2.fromBufferAttribute(positions, b);\n    tempV3.fromBufferAttribute(positions, c);\n    // find the associated material index\n    let materialIndex = 0;\n    const groups = geometry.groups;\n    const firstVertexIndex = triangleIndex * 3;\n    for(let i = 0, l = groups.length; i < l; i++){\n        const group = groups[i];\n        const { start, count } = group;\n        if (firstVertexIndex >= start && firstVertexIndex < start + count) {\n            materialIndex = group.materialIndex;\n            break;\n        }\n    }\n    // extract uvs\n    let uv = null;\n    if (uvs) {\n        tempUV1.fromBufferAttribute(uvs, a);\n        tempUV2.fromBufferAttribute(uvs, b);\n        tempUV3.fromBufferAttribute(uvs, c);\n        if (target && target.uv) uv = target.uv;\n        else uv = new three__WEBPACK_IMPORTED_MODULE_0__.Vector2();\n        three__WEBPACK_IMPORTED_MODULE_0__.Triangle.getInterpolation(point, tempV1, tempV2, tempV3, tempUV1, tempUV2, tempUV3, uv);\n    }\n    // adjust the provided target or create a new one\n    if (target) {\n        if (!target.face) target.face = {};\n        target.face.a = a;\n        target.face.b = b;\n        target.face.c = c;\n        target.face.materialIndex = materialIndex;\n        if (!target.face.normal) target.face.normal = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n        three__WEBPACK_IMPORTED_MODULE_0__.Triangle.getNormal(tempV1, tempV2, tempV3, target.face.normal);\n        if (uv) target.uv = uv;\n        return target;\n    } else {\n        return {\n            face: {\n                a: a,\n                b: b,\n                c: c,\n                materialIndex: materialIndex,\n                normal: three__WEBPACK_IMPORTED_MODULE_0__.Triangle.getNormal(tempV1, tempV2, tempV3, new three__WEBPACK_IMPORTED_MODULE_0__.Vector3())\n            },\n            uv: uv\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/three-mesh-bvh/src/utils/TriangleUtilities.js\n");

/***/ })

};
;