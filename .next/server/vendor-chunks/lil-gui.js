"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/lil-gui";
exports.ids = ["vendor-chunks/lil-gui"];
exports.modules = {

/***/ "(ssr)/./node_modules/lil-gui/dist/lil-gui.esm.js":
/*!**************************************************!*\
  !*** ./node_modules/lil-gui/dist/lil-gui.esm.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BooleanController: () => (/* binding */ BooleanController),\n/* harmony export */   ColorController: () => (/* binding */ ColorController),\n/* harmony export */   Controller: () => (/* binding */ Controller),\n/* harmony export */   FunctionController: () => (/* binding */ FunctionController),\n/* harmony export */   GUI: () => (/* binding */ GUI),\n/* harmony export */   NumberController: () => (/* binding */ NumberController),\n/* harmony export */   OptionController: () => (/* binding */ OptionController),\n/* harmony export */   StringController: () => (/* binding */ StringController),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**\n * lil-gui\n * https://lil-gui.georgealways.com\n * @version 0.19.2\n * @author George Michael Brower\n * @license MIT\n */ /**\n * Base class for all controllers.\n */ class Controller {\n    constructor(parent, object, property, className, elementType = \"div\"){\n        /**\n\t\t * The GUI that contains this controller.\n\t\t * @type {GUI}\n\t\t */ this.parent = parent;\n        /**\n\t\t * The object this controller will modify.\n\t\t * @type {object}\n\t\t */ this.object = object;\n        /**\n\t\t * The name of the property to control.\n\t\t * @type {string}\n\t\t */ this.property = property;\n        /**\n\t\t * Used to determine if the controller is disabled.\n\t\t * Use `controller.disable( true|false )` to modify this value.\n\t\t * @type {boolean}\n\t\t */ this._disabled = false;\n        /**\n\t\t * Used to determine if the Controller is hidden.\n\t\t * Use `controller.show()` or `controller.hide()` to change this.\n\t\t * @type {boolean}\n\t\t */ this._hidden = false;\n        /**\n\t\t * The value of `object[ property ]` when the controller was created.\n\t\t * @type {any}\n\t\t */ this.initialValue = this.getValue();\n        /**\n\t\t * The outermost container DOM element for this controller.\n\t\t * @type {HTMLElement}\n\t\t */ this.domElement = document.createElement(elementType);\n        this.domElement.classList.add(\"controller\");\n        this.domElement.classList.add(className);\n        /**\n\t\t * The DOM element that contains the controller's name.\n\t\t * @type {HTMLElement}\n\t\t */ this.$name = document.createElement(\"div\");\n        this.$name.classList.add(\"name\");\n        Controller.nextNameID = Controller.nextNameID || 0;\n        this.$name.id = `lil-gui-name-${++Controller.nextNameID}`;\n        /**\n\t\t * The DOM element that contains the controller's \"widget\" (which differs by controller type).\n\t\t * @type {HTMLElement}\n\t\t */ this.$widget = document.createElement(\"div\");\n        this.$widget.classList.add(\"widget\");\n        /**\n\t\t * The DOM element that receives the disabled attribute when using disable().\n\t\t * @type {HTMLElement}\n\t\t */ this.$disable = this.$widget;\n        this.domElement.appendChild(this.$name);\n        this.domElement.appendChild(this.$widget);\n        // Don't fire global key events while typing in a controller\n        this.domElement.addEventListener(\"keydown\", (e)=>e.stopPropagation());\n        this.domElement.addEventListener(\"keyup\", (e)=>e.stopPropagation());\n        this.parent.children.push(this);\n        this.parent.controllers.push(this);\n        this.parent.$children.appendChild(this.domElement);\n        this._listenCallback = this._listenCallback.bind(this);\n        this.name(property);\n    }\n    /**\n\t * Sets the name of the controller and its label in the GUI.\n\t * @param {string} name\n\t * @returns {this}\n\t */ name(name) {\n        /**\n\t\t * The controller's name. Use `controller.name( 'Name' )` to modify this value.\n\t\t * @type {string}\n\t\t */ this._name = name;\n        this.$name.textContent = name;\n        return this;\n    }\n    /**\n\t * Pass a function to be called whenever the value is modified by this controller.\n\t * The function receives the new value as its first parameter. The value of `this` will be the\n\t * controller.\n\t *\n\t * For function controllers, the `onChange` callback will be fired on click, after the function\n\t * executes.\n\t * @param {Function} callback\n\t * @returns {this}\n\t * @example\n\t * const controller = gui.add( object, 'property' );\n\t *\n\t * controller.onChange( function( v ) {\n\t * \tconsole.log( 'The value is now ' + v );\n\t * \tconsole.assert( this === controller );\n\t * } );\n\t */ onChange(callback) {\n        /**\n\t\t * Used to access the function bound to `onChange` events. Don't modify this value directly.\n\t\t * Use the `controller.onChange( callback )` method instead.\n\t\t * @type {Function}\n\t\t */ this._onChange = callback;\n        return this;\n    }\n    /**\n\t * Calls the onChange methods of this controller and its parent GUI.\n\t * @protected\n\t */ _callOnChange() {\n        this.parent._callOnChange(this);\n        if (this._onChange !== undefined) {\n            this._onChange.call(this, this.getValue());\n        }\n        this._changed = true;\n    }\n    /**\n\t * Pass a function to be called after this controller has been modified and loses focus.\n\t * @param {Function} callback\n\t * @returns {this}\n\t * @example\n\t * const controller = gui.add( object, 'property' );\n\t *\n\t * controller.onFinishChange( function( v ) {\n\t * \tconsole.log( 'Changes complete: ' + v );\n\t * \tconsole.assert( this === controller );\n\t * } );\n\t */ onFinishChange(callback) {\n        /**\n\t\t * Used to access the function bound to `onFinishChange` events. Don't modify this value\n\t\t * directly. Use the `controller.onFinishChange( callback )` method instead.\n\t\t * @type {Function}\n\t\t */ this._onFinishChange = callback;\n        return this;\n    }\n    /**\n\t * Should be called by Controller when its widgets lose focus.\n\t * @protected\n\t */ _callOnFinishChange() {\n        if (this._changed) {\n            this.parent._callOnFinishChange(this);\n            if (this._onFinishChange !== undefined) {\n                this._onFinishChange.call(this, this.getValue());\n            }\n        }\n        this._changed = false;\n    }\n    /**\n\t * Sets the controller back to its initial value.\n\t * @returns {this}\n\t */ reset() {\n        this.setValue(this.initialValue);\n        this._callOnFinishChange();\n        return this;\n    }\n    /**\n\t * Enables this controller.\n\t * @param {boolean} enabled\n\t * @returns {this}\n\t * @example\n\t * controller.enable();\n\t * controller.enable( false ); // disable\n\t * controller.enable( controller._disabled ); // toggle\n\t */ enable(enabled = true) {\n        return this.disable(!enabled);\n    }\n    /**\n\t * Disables this controller.\n\t * @param {boolean} disabled\n\t * @returns {this}\n\t * @example\n\t * controller.disable();\n\t * controller.disable( false ); // enable\n\t * controller.disable( !controller._disabled ); // toggle\n\t */ disable(disabled = true) {\n        if (disabled === this._disabled) return this;\n        this._disabled = disabled;\n        this.domElement.classList.toggle(\"disabled\", disabled);\n        this.$disable.toggleAttribute(\"disabled\", disabled);\n        return this;\n    }\n    /**\n\t * Shows the Controller after it's been hidden.\n\t * @param {boolean} show\n\t * @returns {this}\n\t * @example\n\t * controller.show();\n\t * controller.show( false ); // hide\n\t * controller.show( controller._hidden ); // toggle\n\t */ show(show = true) {\n        this._hidden = !show;\n        this.domElement.style.display = this._hidden ? \"none\" : \"\";\n        return this;\n    }\n    /**\n\t * Hides the Controller.\n\t * @returns {this}\n\t */ hide() {\n        return this.show(false);\n    }\n    /**\n\t * Changes this controller into a dropdown of options.\n\t *\n\t * Calling this method on an option controller will simply update the options. However, if this\n\t * controller was not already an option controller, old references to this controller are\n\t * destroyed, and a new controller is added to the end of the GUI.\n\t * @example\n\t * // safe usage\n\t *\n\t * gui.add( obj, 'prop1' ).options( [ 'a', 'b', 'c' ] );\n\t * gui.add( obj, 'prop2' ).options( { Big: 10, Small: 1 } );\n\t * gui.add( obj, 'prop3' );\n\t *\n\t * // danger\n\t *\n\t * const ctrl1 = gui.add( obj, 'prop1' );\n\t * gui.add( obj, 'prop2' );\n\t *\n\t * // calling options out of order adds a new controller to the end...\n\t * const ctrl2 = ctrl1.options( [ 'a', 'b', 'c' ] );\n\t *\n\t * // ...and ctrl1 now references a controller that doesn't exist\n\t * assert( ctrl2 !== ctrl1 )\n\t * @param {object|Array} options\n\t * @returns {Controller}\n\t */ options(options) {\n        const controller = this.parent.add(this.object, this.property, options);\n        controller.name(this._name);\n        this.destroy();\n        return controller;\n    }\n    /**\n\t * Sets the minimum value. Only works on number controllers.\n\t * @param {number} min\n\t * @returns {this}\n\t */ min(min) {\n        return this;\n    }\n    /**\n\t * Sets the maximum value. Only works on number controllers.\n\t * @param {number} max\n\t * @returns {this}\n\t */ max(max) {\n        return this;\n    }\n    /**\n\t * Values set by this controller will be rounded to multiples of `step`. Only works on number\n\t * controllers.\n\t * @param {number} step\n\t * @returns {this}\n\t */ step(step) {\n        return this;\n    }\n    /**\n\t * Rounds the displayed value to a fixed number of decimals, without affecting the actual value\n\t * like `step()`. Only works on number controllers.\n\t * @example\n\t * gui.add( object, 'property' ).listen().decimals( 4 );\n\t * @param {number} decimals\n\t * @returns {this}\n\t */ decimals(decimals) {\n        return this;\n    }\n    /**\n\t * Calls `updateDisplay()` every animation frame. Pass `false` to stop listening.\n\t * @param {boolean} listen\n\t * @returns {this}\n\t */ listen(listen = true) {\n        /**\n\t\t * Used to determine if the controller is currently listening. Don't modify this value\n\t\t * directly. Use the `controller.listen( true|false )` method instead.\n\t\t * @type {boolean}\n\t\t */ this._listening = listen;\n        if (this._listenCallbackID !== undefined) {\n            cancelAnimationFrame(this._listenCallbackID);\n            this._listenCallbackID = undefined;\n        }\n        if (this._listening) {\n            this._listenCallback();\n        }\n        return this;\n    }\n    _listenCallback() {\n        this._listenCallbackID = requestAnimationFrame(this._listenCallback);\n        // To prevent framerate loss, make sure the value has changed before updating the display.\n        // Note: save() is used here instead of getValue() only because of ColorController. The !== operator\n        // won't work for color objects or arrays, but ColorController.save() always returns a string.\n        const curValue = this.save();\n        if (curValue !== this._listenPrevValue) {\n            this.updateDisplay();\n        }\n        this._listenPrevValue = curValue;\n    }\n    /**\n\t * Returns `object[ property ]`.\n\t * @returns {any}\n\t */ getValue() {\n        return this.object[this.property];\n    }\n    /**\n\t * Sets the value of `object[ property ]`, invokes any `onChange` handlers and updates the display.\n\t * @param {any} value\n\t * @returns {this}\n\t */ setValue(value) {\n        if (this.getValue() !== value) {\n            this.object[this.property] = value;\n            this._callOnChange();\n            this.updateDisplay();\n        }\n        return this;\n    }\n    /**\n\t * Updates the display to keep it in sync with the current value. Useful for updating your\n\t * controllers when their values have been modified outside of the GUI.\n\t * @returns {this}\n\t */ updateDisplay() {\n        return this;\n    }\n    load(value) {\n        this.setValue(value);\n        this._callOnFinishChange();\n        return this;\n    }\n    save() {\n        return this.getValue();\n    }\n    /**\n\t * Destroys this controller and removes it from the parent GUI.\n\t */ destroy() {\n        this.listen(false);\n        this.parent.children.splice(this.parent.children.indexOf(this), 1);\n        this.parent.controllers.splice(this.parent.controllers.indexOf(this), 1);\n        this.parent.$children.removeChild(this.domElement);\n    }\n}\nclass BooleanController extends Controller {\n    constructor(parent, object, property){\n        super(parent, object, property, \"boolean\", \"label\");\n        this.$input = document.createElement(\"input\");\n        this.$input.setAttribute(\"type\", \"checkbox\");\n        this.$input.setAttribute(\"aria-labelledby\", this.$name.id);\n        this.$widget.appendChild(this.$input);\n        this.$input.addEventListener(\"change\", ()=>{\n            this.setValue(this.$input.checked);\n            this._callOnFinishChange();\n        });\n        this.$disable = this.$input;\n        this.updateDisplay();\n    }\n    updateDisplay() {\n        this.$input.checked = this.getValue();\n        return this;\n    }\n}\nfunction normalizeColorString(string) {\n    let match, result;\n    if (match = string.match(/(#|0x)?([a-f0-9]{6})/i)) {\n        result = match[2];\n    } else if (match = string.match(/rgb\\(\\s*(\\d*)\\s*,\\s*(\\d*)\\s*,\\s*(\\d*)\\s*\\)/)) {\n        result = parseInt(match[1]).toString(16).padStart(2, 0) + parseInt(match[2]).toString(16).padStart(2, 0) + parseInt(match[3]).toString(16).padStart(2, 0);\n    } else if (match = string.match(/^#?([a-f0-9])([a-f0-9])([a-f0-9])$/i)) {\n        result = match[1] + match[1] + match[2] + match[2] + match[3] + match[3];\n    }\n    if (result) {\n        return \"#\" + result;\n    }\n    return false;\n}\nconst STRING = {\n    isPrimitive: true,\n    match: (v)=>typeof v === \"string\",\n    fromHexString: normalizeColorString,\n    toHexString: normalizeColorString\n};\nconst INT = {\n    isPrimitive: true,\n    match: (v)=>typeof v === \"number\",\n    fromHexString: (string)=>parseInt(string.substring(1), 16),\n    toHexString: (value)=>\"#\" + value.toString(16).padStart(6, 0)\n};\nconst ARRAY = {\n    isPrimitive: false,\n    // The arrow function is here to appease tree shakers like esbuild or webpack.\n    // See https://esbuild.github.io/api/#tree-shaking\n    match: (v)=>Array.isArray(v),\n    fromHexString (string, target, rgbScale = 1) {\n        const int = INT.fromHexString(string);\n        target[0] = (int >> 16 & 255) / 255 * rgbScale;\n        target[1] = (int >> 8 & 255) / 255 * rgbScale;\n        target[2] = (int & 255) / 255 * rgbScale;\n    },\n    toHexString ([r, g, b], rgbScale = 1) {\n        rgbScale = 255 / rgbScale;\n        const int = r * rgbScale << 16 ^ g * rgbScale << 8 ^ b * rgbScale << 0;\n        return INT.toHexString(int);\n    }\n};\nconst OBJECT = {\n    isPrimitive: false,\n    match: (v)=>Object(v) === v,\n    fromHexString (string, target, rgbScale = 1) {\n        const int = INT.fromHexString(string);\n        target.r = (int >> 16 & 255) / 255 * rgbScale;\n        target.g = (int >> 8 & 255) / 255 * rgbScale;\n        target.b = (int & 255) / 255 * rgbScale;\n    },\n    toHexString ({ r, g, b }, rgbScale = 1) {\n        rgbScale = 255 / rgbScale;\n        const int = r * rgbScale << 16 ^ g * rgbScale << 8 ^ b * rgbScale << 0;\n        return INT.toHexString(int);\n    }\n};\nconst FORMATS = [\n    STRING,\n    INT,\n    ARRAY,\n    OBJECT\n];\nfunction getColorFormat(value) {\n    return FORMATS.find((format)=>format.match(value));\n}\nclass ColorController extends Controller {\n    constructor(parent, object, property, rgbScale){\n        super(parent, object, property, \"color\");\n        this.$input = document.createElement(\"input\");\n        this.$input.setAttribute(\"type\", \"color\");\n        this.$input.setAttribute(\"tabindex\", -1);\n        this.$input.setAttribute(\"aria-labelledby\", this.$name.id);\n        this.$text = document.createElement(\"input\");\n        this.$text.setAttribute(\"type\", \"text\");\n        this.$text.setAttribute(\"spellcheck\", \"false\");\n        this.$text.setAttribute(\"aria-labelledby\", this.$name.id);\n        this.$display = document.createElement(\"div\");\n        this.$display.classList.add(\"display\");\n        this.$display.appendChild(this.$input);\n        this.$widget.appendChild(this.$display);\n        this.$widget.appendChild(this.$text);\n        this._format = getColorFormat(this.initialValue);\n        this._rgbScale = rgbScale;\n        this._initialValueHexString = this.save();\n        this._textFocused = false;\n        this.$input.addEventListener(\"input\", ()=>{\n            this._setValueFromHexString(this.$input.value);\n        });\n        this.$input.addEventListener(\"blur\", ()=>{\n            this._callOnFinishChange();\n        });\n        this.$text.addEventListener(\"input\", ()=>{\n            const tryParse = normalizeColorString(this.$text.value);\n            if (tryParse) {\n                this._setValueFromHexString(tryParse);\n            }\n        });\n        this.$text.addEventListener(\"focus\", ()=>{\n            this._textFocused = true;\n            this.$text.select();\n        });\n        this.$text.addEventListener(\"blur\", ()=>{\n            this._textFocused = false;\n            this.updateDisplay();\n            this._callOnFinishChange();\n        });\n        this.$disable = this.$text;\n        this.updateDisplay();\n    }\n    reset() {\n        this._setValueFromHexString(this._initialValueHexString);\n        return this;\n    }\n    _setValueFromHexString(value) {\n        if (this._format.isPrimitive) {\n            const newValue = this._format.fromHexString(value);\n            this.setValue(newValue);\n        } else {\n            this._format.fromHexString(value, this.getValue(), this._rgbScale);\n            this._callOnChange();\n            this.updateDisplay();\n        }\n    }\n    save() {\n        return this._format.toHexString(this.getValue(), this._rgbScale);\n    }\n    load(value) {\n        this._setValueFromHexString(value);\n        this._callOnFinishChange();\n        return this;\n    }\n    updateDisplay() {\n        this.$input.value = this._format.toHexString(this.getValue(), this._rgbScale);\n        if (!this._textFocused) {\n            this.$text.value = this.$input.value.substring(1);\n        }\n        this.$display.style.backgroundColor = this.$input.value;\n        return this;\n    }\n}\nclass FunctionController extends Controller {\n    constructor(parent, object, property){\n        super(parent, object, property, \"function\");\n        // Buttons are the only case where widget contains name\n        this.$button = document.createElement(\"button\");\n        this.$button.appendChild(this.$name);\n        this.$widget.appendChild(this.$button);\n        this.$button.addEventListener(\"click\", (e)=>{\n            e.preventDefault();\n            this.getValue().call(this.object);\n            this._callOnChange();\n        });\n        // enables :active pseudo class on mobile\n        this.$button.addEventListener(\"touchstart\", ()=>{}, {\n            passive: true\n        });\n        this.$disable = this.$button;\n    }\n}\nclass NumberController extends Controller {\n    constructor(parent, object, property, min, max, step){\n        super(parent, object, property, \"number\");\n        this._initInput();\n        this.min(min);\n        this.max(max);\n        const stepExplicit = step !== undefined;\n        this.step(stepExplicit ? step : this._getImplicitStep(), stepExplicit);\n        this.updateDisplay();\n    }\n    decimals(decimals) {\n        this._decimals = decimals;\n        this.updateDisplay();\n        return this;\n    }\n    min(min) {\n        this._min = min;\n        this._onUpdateMinMax();\n        return this;\n    }\n    max(max) {\n        this._max = max;\n        this._onUpdateMinMax();\n        return this;\n    }\n    step(step, explicit = true) {\n        this._step = step;\n        this._stepExplicit = explicit;\n        return this;\n    }\n    updateDisplay() {\n        const value = this.getValue();\n        if (this._hasSlider) {\n            let percent = (value - this._min) / (this._max - this._min);\n            percent = Math.max(0, Math.min(percent, 1));\n            this.$fill.style.width = percent * 100 + \"%\";\n        }\n        if (!this._inputFocused) {\n            this.$input.value = this._decimals === undefined ? value : value.toFixed(this._decimals);\n        }\n        return this;\n    }\n    _initInput() {\n        this.$input = document.createElement(\"input\");\n        this.$input.setAttribute(\"type\", \"text\");\n        this.$input.setAttribute(\"aria-labelledby\", this.$name.id);\n        // On touch devices only, use input[type=number] to force a numeric keyboard.\n        // Ideally we could use one input type everywhere, but [type=number] has quirks\n        // on desktop, and [inputmode=decimal] has quirks on iOS.\n        // See https://github.com/georgealways/lil-gui/pull/16\n        const isTouch = window.matchMedia(\"(pointer: coarse)\").matches;\n        if (isTouch) {\n            this.$input.setAttribute(\"type\", \"number\");\n            this.$input.setAttribute(\"step\", \"any\");\n        }\n        this.$widget.appendChild(this.$input);\n        this.$disable = this.$input;\n        const onInput = ()=>{\n            let value = parseFloat(this.$input.value);\n            if (isNaN(value)) return;\n            if (this._stepExplicit) {\n                value = this._snap(value);\n            }\n            this.setValue(this._clamp(value));\n        };\n        // Keys & mouse wheel\n        // ---------------------------------------------------------------------\n        const increment = (delta)=>{\n            const value = parseFloat(this.$input.value);\n            if (isNaN(value)) return;\n            this._snapClampSetValue(value + delta);\n            // Force the input to updateDisplay when it's focused\n            this.$input.value = this.getValue();\n        };\n        const onKeyDown = (e)=>{\n            // Using `e.key` instead of `e.code` also catches NumpadEnter\n            if (e.key === \"Enter\") {\n                this.$input.blur();\n            }\n            if (e.code === \"ArrowUp\") {\n                e.preventDefault();\n                increment(this._step * this._arrowKeyMultiplier(e));\n            }\n            if (e.code === \"ArrowDown\") {\n                e.preventDefault();\n                increment(this._step * this._arrowKeyMultiplier(e) * -1);\n            }\n        };\n        const onWheel = (e)=>{\n            if (this._inputFocused) {\n                e.preventDefault();\n                increment(this._step * this._normalizeMouseWheel(e));\n            }\n        };\n        // Vertical drag\n        // ---------------------------------------------------------------------\n        let testingForVerticalDrag = false, initClientX, initClientY, prevClientY, initValue, dragDelta;\n        // Once the mouse is dragged more than DRAG_THRESH px on any axis, we decide\n        // on the user's intent: horizontal means highlight, vertical means drag.\n        const DRAG_THRESH = 5;\n        const onMouseDown = (e)=>{\n            initClientX = e.clientX;\n            initClientY = prevClientY = e.clientY;\n            testingForVerticalDrag = true;\n            initValue = this.getValue();\n            dragDelta = 0;\n            window.addEventListener(\"mousemove\", onMouseMove);\n            window.addEventListener(\"mouseup\", onMouseUp);\n        };\n        const onMouseMove = (e)=>{\n            if (testingForVerticalDrag) {\n                const dx = e.clientX - initClientX;\n                const dy = e.clientY - initClientY;\n                if (Math.abs(dy) > DRAG_THRESH) {\n                    e.preventDefault();\n                    this.$input.blur();\n                    testingForVerticalDrag = false;\n                    this._setDraggingStyle(true, \"vertical\");\n                } else if (Math.abs(dx) > DRAG_THRESH) {\n                    onMouseUp();\n                }\n            }\n            // This isn't an else so that the first move counts towards dragDelta\n            if (!testingForVerticalDrag) {\n                const dy = e.clientY - prevClientY;\n                dragDelta -= dy * this._step * this._arrowKeyMultiplier(e);\n                // Clamp dragDelta so we don't have 'dead space' after dragging past bounds.\n                // We're okay with the fact that bounds can be undefined here.\n                if (initValue + dragDelta > this._max) {\n                    dragDelta = this._max - initValue;\n                } else if (initValue + dragDelta < this._min) {\n                    dragDelta = this._min - initValue;\n                }\n                this._snapClampSetValue(initValue + dragDelta);\n            }\n            prevClientY = e.clientY;\n        };\n        const onMouseUp = ()=>{\n            this._setDraggingStyle(false, \"vertical\");\n            this._callOnFinishChange();\n            window.removeEventListener(\"mousemove\", onMouseMove);\n            window.removeEventListener(\"mouseup\", onMouseUp);\n        };\n        // Focus state & onFinishChange\n        // ---------------------------------------------------------------------\n        const onFocus = ()=>{\n            this._inputFocused = true;\n        };\n        const onBlur = ()=>{\n            this._inputFocused = false;\n            this.updateDisplay();\n            this._callOnFinishChange();\n        };\n        this.$input.addEventListener(\"input\", onInput);\n        this.$input.addEventListener(\"keydown\", onKeyDown);\n        this.$input.addEventListener(\"wheel\", onWheel, {\n            passive: false\n        });\n        this.$input.addEventListener(\"mousedown\", onMouseDown);\n        this.$input.addEventListener(\"focus\", onFocus);\n        this.$input.addEventListener(\"blur\", onBlur);\n    }\n    _initSlider() {\n        this._hasSlider = true;\n        // Build DOM\n        // ---------------------------------------------------------------------\n        this.$slider = document.createElement(\"div\");\n        this.$slider.classList.add(\"slider\");\n        this.$fill = document.createElement(\"div\");\n        this.$fill.classList.add(\"fill\");\n        this.$slider.appendChild(this.$fill);\n        this.$widget.insertBefore(this.$slider, this.$input);\n        this.domElement.classList.add(\"hasSlider\");\n        // Map clientX to value\n        // ---------------------------------------------------------------------\n        const map = (v, a, b, c, d)=>{\n            return (v - a) / (b - a) * (d - c) + c;\n        };\n        const setValueFromX = (clientX)=>{\n            const rect = this.$slider.getBoundingClientRect();\n            let value = map(clientX, rect.left, rect.right, this._min, this._max);\n            this._snapClampSetValue(value);\n        };\n        // Mouse drag\n        // ---------------------------------------------------------------------\n        const mouseDown = (e)=>{\n            this._setDraggingStyle(true);\n            setValueFromX(e.clientX);\n            window.addEventListener(\"mousemove\", mouseMove);\n            window.addEventListener(\"mouseup\", mouseUp);\n        };\n        const mouseMove = (e)=>{\n            setValueFromX(e.clientX);\n        };\n        const mouseUp = ()=>{\n            this._callOnFinishChange();\n            this._setDraggingStyle(false);\n            window.removeEventListener(\"mousemove\", mouseMove);\n            window.removeEventListener(\"mouseup\", mouseUp);\n        };\n        // Touch drag\n        // ---------------------------------------------------------------------\n        let testingForScroll = false, prevClientX, prevClientY;\n        const beginTouchDrag = (e)=>{\n            e.preventDefault();\n            this._setDraggingStyle(true);\n            setValueFromX(e.touches[0].clientX);\n            testingForScroll = false;\n        };\n        const onTouchStart = (e)=>{\n            if (e.touches.length > 1) return;\n            // If we're in a scrollable container, we should wait for the first\n            // touchmove to see if the user is trying to slide or scroll.\n            if (this._hasScrollBar) {\n                prevClientX = e.touches[0].clientX;\n                prevClientY = e.touches[0].clientY;\n                testingForScroll = true;\n            } else {\n                // Otherwise, we can set the value straight away on touchstart.\n                beginTouchDrag(e);\n            }\n            window.addEventListener(\"touchmove\", onTouchMove, {\n                passive: false\n            });\n            window.addEventListener(\"touchend\", onTouchEnd);\n        };\n        const onTouchMove = (e)=>{\n            if (testingForScroll) {\n                const dx = e.touches[0].clientX - prevClientX;\n                const dy = e.touches[0].clientY - prevClientY;\n                if (Math.abs(dx) > Math.abs(dy)) {\n                    // We moved horizontally, set the value and stop checking.\n                    beginTouchDrag(e);\n                } else {\n                    // This was, in fact, an attempt to scroll. Abort.\n                    window.removeEventListener(\"touchmove\", onTouchMove);\n                    window.removeEventListener(\"touchend\", onTouchEnd);\n                }\n            } else {\n                e.preventDefault();\n                setValueFromX(e.touches[0].clientX);\n            }\n        };\n        const onTouchEnd = ()=>{\n            this._callOnFinishChange();\n            this._setDraggingStyle(false);\n            window.removeEventListener(\"touchmove\", onTouchMove);\n            window.removeEventListener(\"touchend\", onTouchEnd);\n        };\n        // Mouse wheel\n        // ---------------------------------------------------------------------\n        // We have to use a debounced function to call onFinishChange because\n        // there's no way to tell when the user is \"done\" mouse-wheeling.\n        const callOnFinishChange = this._callOnFinishChange.bind(this);\n        const WHEEL_DEBOUNCE_TIME = 400;\n        let wheelFinishChangeTimeout;\n        const onWheel = (e)=>{\n            // ignore vertical wheels if there's a scrollbar\n            const isVertical = Math.abs(e.deltaX) < Math.abs(e.deltaY);\n            if (isVertical && this._hasScrollBar) return;\n            e.preventDefault();\n            // set value\n            const delta = this._normalizeMouseWheel(e) * this._step;\n            this._snapClampSetValue(this.getValue() + delta);\n            // force the input to updateDisplay when it's focused\n            this.$input.value = this.getValue();\n            // debounce onFinishChange\n            clearTimeout(wheelFinishChangeTimeout);\n            wheelFinishChangeTimeout = setTimeout(callOnFinishChange, WHEEL_DEBOUNCE_TIME);\n        };\n        this.$slider.addEventListener(\"mousedown\", mouseDown);\n        this.$slider.addEventListener(\"touchstart\", onTouchStart, {\n            passive: false\n        });\n        this.$slider.addEventListener(\"wheel\", onWheel, {\n            passive: false\n        });\n    }\n    _setDraggingStyle(active, axis = \"horizontal\") {\n        if (this.$slider) {\n            this.$slider.classList.toggle(\"active\", active);\n        }\n        document.body.classList.toggle(\"lil-gui-dragging\", active);\n        document.body.classList.toggle(`lil-gui-${axis}`, active);\n    }\n    _getImplicitStep() {\n        if (this._hasMin && this._hasMax) {\n            return (this._max - this._min) / 1000;\n        }\n        return 0.1;\n    }\n    _onUpdateMinMax() {\n        if (!this._hasSlider && this._hasMin && this._hasMax) {\n            // If this is the first time we're hearing about min and max\n            // and we haven't explicitly stated what our step is, let's\n            // update that too.\n            if (!this._stepExplicit) {\n                this.step(this._getImplicitStep(), false);\n            }\n            this._initSlider();\n            this.updateDisplay();\n        }\n    }\n    _normalizeMouseWheel(e) {\n        let { deltaX, deltaY } = e;\n        // Safari and Chrome report weird non-integral values for a notched wheel,\n        // but still expose actual lines scrolled via wheelDelta. Notched wheels\n        // should behave the same way as arrow keys.\n        if (Math.floor(e.deltaY) !== e.deltaY && e.wheelDelta) {\n            deltaX = 0;\n            deltaY = -e.wheelDelta / 120;\n            deltaY *= this._stepExplicit ? 1 : 10;\n        }\n        const wheel = deltaX + -deltaY;\n        return wheel;\n    }\n    _arrowKeyMultiplier(e) {\n        let mult = this._stepExplicit ? 1 : 10;\n        if (e.shiftKey) {\n            mult *= 10;\n        } else if (e.altKey) {\n            mult /= 10;\n        }\n        return mult;\n    }\n    _snap(value) {\n        // This would be the logical way to do things, but floating point errors.\n        // return Math.round( value / this._step ) * this._step;\n        // Using inverse step solves a lot of them, but not all\n        // const inverseStep = 1 / this._step;\n        // return Math.round( value * inverseStep ) / inverseStep;\n        // Not happy about this, but haven't seen it break.\n        const r = Math.round(value / this._step) * this._step;\n        return parseFloat(r.toPrecision(15));\n    }\n    _clamp(value) {\n        // either condition is false if min or max is undefined\n        if (value < this._min) value = this._min;\n        if (value > this._max) value = this._max;\n        return value;\n    }\n    _snapClampSetValue(value) {\n        this.setValue(this._clamp(this._snap(value)));\n    }\n    get _hasScrollBar() {\n        const root = this.parent.root.$children;\n        return root.scrollHeight > root.clientHeight;\n    }\n    get _hasMin() {\n        return this._min !== undefined;\n    }\n    get _hasMax() {\n        return this._max !== undefined;\n    }\n}\nclass OptionController extends Controller {\n    constructor(parent, object, property, options){\n        super(parent, object, property, \"option\");\n        this.$select = document.createElement(\"select\");\n        this.$select.setAttribute(\"aria-labelledby\", this.$name.id);\n        this.$display = document.createElement(\"div\");\n        this.$display.classList.add(\"display\");\n        this.$select.addEventListener(\"change\", ()=>{\n            this.setValue(this._values[this.$select.selectedIndex]);\n            this._callOnFinishChange();\n        });\n        this.$select.addEventListener(\"focus\", ()=>{\n            this.$display.classList.add(\"focus\");\n        });\n        this.$select.addEventListener(\"blur\", ()=>{\n            this.$display.classList.remove(\"focus\");\n        });\n        this.$widget.appendChild(this.$select);\n        this.$widget.appendChild(this.$display);\n        this.$disable = this.$select;\n        this.options(options);\n    }\n    options(options) {\n        this._values = Array.isArray(options) ? options : Object.values(options);\n        this._names = Array.isArray(options) ? options : Object.keys(options);\n        this.$select.replaceChildren();\n        this._names.forEach((name)=>{\n            const $option = document.createElement(\"option\");\n            $option.textContent = name;\n            this.$select.appendChild($option);\n        });\n        this.updateDisplay();\n        return this;\n    }\n    updateDisplay() {\n        const value = this.getValue();\n        const index = this._values.indexOf(value);\n        this.$select.selectedIndex = index;\n        this.$display.textContent = index === -1 ? value : this._names[index];\n        return this;\n    }\n}\nclass StringController extends Controller {\n    constructor(parent, object, property){\n        super(parent, object, property, \"string\");\n        this.$input = document.createElement(\"input\");\n        this.$input.setAttribute(\"type\", \"text\");\n        this.$input.setAttribute(\"spellcheck\", \"false\");\n        this.$input.setAttribute(\"aria-labelledby\", this.$name.id);\n        this.$input.addEventListener(\"input\", ()=>{\n            this.setValue(this.$input.value);\n        });\n        this.$input.addEventListener(\"keydown\", (e)=>{\n            if (e.code === \"Enter\") {\n                this.$input.blur();\n            }\n        });\n        this.$input.addEventListener(\"blur\", ()=>{\n            this._callOnFinishChange();\n        });\n        this.$widget.appendChild(this.$input);\n        this.$disable = this.$input;\n        this.updateDisplay();\n    }\n    updateDisplay() {\n        this.$input.value = this.getValue();\n        return this;\n    }\n}\nconst stylesheet = `.lil-gui {\n  font-family: var(--font-family);\n  font-size: var(--font-size);\n  line-height: 1;\n  font-weight: normal;\n  font-style: normal;\n  text-align: left;\n  color: var(--text-color);\n  user-select: none;\n  -webkit-user-select: none;\n  touch-action: manipulation;\n  --background-color: #1f1f1f;\n  --text-color: #ebebeb;\n  --title-background-color: #111111;\n  --title-text-color: #ebebeb;\n  --widget-color: #424242;\n  --hover-color: #4f4f4f;\n  --focus-color: #595959;\n  --number-color: #2cc9ff;\n  --string-color: #a2db3c;\n  --font-size: 11px;\n  --input-font-size: 11px;\n  --font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Arial, sans-serif;\n  --font-family-mono: Menlo, Monaco, Consolas, \"Droid Sans Mono\", monospace;\n  --padding: 4px;\n  --spacing: 4px;\n  --widget-height: 20px;\n  --title-height: calc(var(--widget-height) + var(--spacing) * 1.25);\n  --name-width: 45%;\n  --slider-knob-width: 2px;\n  --slider-input-width: 27%;\n  --color-input-width: 27%;\n  --slider-input-min-width: 45px;\n  --color-input-min-width: 45px;\n  --folder-indent: 7px;\n  --widget-padding: 0 0 0 3px;\n  --widget-border-radius: 2px;\n  --checkbox-size: calc(0.75 * var(--widget-height));\n  --scrollbar-width: 5px;\n}\n.lil-gui, .lil-gui * {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n.lil-gui.root {\n  width: var(--width, 245px);\n  display: flex;\n  flex-direction: column;\n  background: var(--background-color);\n}\n.lil-gui.root > .title {\n  background: var(--title-background-color);\n  color: var(--title-text-color);\n}\n.lil-gui.root > .children {\n  overflow-x: hidden;\n  overflow-y: auto;\n}\n.lil-gui.root > .children::-webkit-scrollbar {\n  width: var(--scrollbar-width);\n  height: var(--scrollbar-width);\n  background: var(--background-color);\n}\n.lil-gui.root > .children::-webkit-scrollbar-thumb {\n  border-radius: var(--scrollbar-width);\n  background: var(--focus-color);\n}\n@media (pointer: coarse) {\n  .lil-gui.allow-touch-styles, .lil-gui.allow-touch-styles .lil-gui {\n    --widget-height: 28px;\n    --padding: 6px;\n    --spacing: 6px;\n    --font-size: 13px;\n    --input-font-size: 16px;\n    --folder-indent: 10px;\n    --scrollbar-width: 7px;\n    --slider-input-min-width: 50px;\n    --color-input-min-width: 65px;\n  }\n}\n.lil-gui.force-touch-styles, .lil-gui.force-touch-styles .lil-gui {\n  --widget-height: 28px;\n  --padding: 6px;\n  --spacing: 6px;\n  --font-size: 13px;\n  --input-font-size: 16px;\n  --folder-indent: 10px;\n  --scrollbar-width: 7px;\n  --slider-input-min-width: 50px;\n  --color-input-min-width: 65px;\n}\n.lil-gui.autoPlace {\n  max-height: 100%;\n  position: fixed;\n  top: 0;\n  right: 15px;\n  z-index: 1001;\n}\n\n.lil-gui .controller {\n  display: flex;\n  align-items: center;\n  padding: 0 var(--padding);\n  margin: var(--spacing) 0;\n}\n.lil-gui .controller.disabled {\n  opacity: 0.5;\n}\n.lil-gui .controller.disabled, .lil-gui .controller.disabled * {\n  pointer-events: none !important;\n}\n.lil-gui .controller > .name {\n  min-width: var(--name-width);\n  flex-shrink: 0;\n  white-space: pre;\n  padding-right: var(--spacing);\n  line-height: var(--widget-height);\n}\n.lil-gui .controller .widget {\n  position: relative;\n  display: flex;\n  align-items: center;\n  width: 100%;\n  min-height: var(--widget-height);\n}\n.lil-gui .controller.string input {\n  color: var(--string-color);\n}\n.lil-gui .controller.boolean {\n  cursor: pointer;\n}\n.lil-gui .controller.color .display {\n  width: 100%;\n  height: var(--widget-height);\n  border-radius: var(--widget-border-radius);\n  position: relative;\n}\n@media (hover: hover) {\n  .lil-gui .controller.color .display:hover:before {\n    content: \" \";\n    display: block;\n    position: absolute;\n    border-radius: var(--widget-border-radius);\n    border: 1px solid #fff9;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n  }\n}\n.lil-gui .controller.color input[type=color] {\n  opacity: 0;\n  width: 100%;\n  height: 100%;\n  cursor: pointer;\n}\n.lil-gui .controller.color input[type=text] {\n  margin-left: var(--spacing);\n  font-family: var(--font-family-mono);\n  min-width: var(--color-input-min-width);\n  width: var(--color-input-width);\n  flex-shrink: 0;\n}\n.lil-gui .controller.option select {\n  opacity: 0;\n  position: absolute;\n  width: 100%;\n  max-width: 100%;\n}\n.lil-gui .controller.option .display {\n  position: relative;\n  pointer-events: none;\n  border-radius: var(--widget-border-radius);\n  height: var(--widget-height);\n  line-height: var(--widget-height);\n  max-width: 100%;\n  overflow: hidden;\n  word-break: break-all;\n  padding-left: 0.55em;\n  padding-right: 1.75em;\n  background: var(--widget-color);\n}\n@media (hover: hover) {\n  .lil-gui .controller.option .display.focus {\n    background: var(--focus-color);\n  }\n}\n.lil-gui .controller.option .display.active {\n  background: var(--focus-color);\n}\n.lil-gui .controller.option .display:after {\n  font-family: \"lil-gui\";\n  content: \"↕\";\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  padding-right: 0.375em;\n}\n.lil-gui .controller.option .widget,\n.lil-gui .controller.option select {\n  cursor: pointer;\n}\n@media (hover: hover) {\n  .lil-gui .controller.option .widget:hover .display {\n    background: var(--hover-color);\n  }\n}\n.lil-gui .controller.number input {\n  color: var(--number-color);\n}\n.lil-gui .controller.number.hasSlider input {\n  margin-left: var(--spacing);\n  width: var(--slider-input-width);\n  min-width: var(--slider-input-min-width);\n  flex-shrink: 0;\n}\n.lil-gui .controller.number .slider {\n  width: 100%;\n  height: var(--widget-height);\n  background: var(--widget-color);\n  border-radius: var(--widget-border-radius);\n  padding-right: var(--slider-knob-width);\n  overflow: hidden;\n  cursor: ew-resize;\n  touch-action: pan-y;\n}\n@media (hover: hover) {\n  .lil-gui .controller.number .slider:hover {\n    background: var(--hover-color);\n  }\n}\n.lil-gui .controller.number .slider.active {\n  background: var(--focus-color);\n}\n.lil-gui .controller.number .slider.active .fill {\n  opacity: 0.95;\n}\n.lil-gui .controller.number .fill {\n  height: 100%;\n  border-right: var(--slider-knob-width) solid var(--number-color);\n  box-sizing: content-box;\n}\n\n.lil-gui-dragging .lil-gui {\n  --hover-color: var(--widget-color);\n}\n.lil-gui-dragging * {\n  cursor: ew-resize !important;\n}\n\n.lil-gui-dragging.lil-gui-vertical * {\n  cursor: ns-resize !important;\n}\n\n.lil-gui .title {\n  height: var(--title-height);\n  line-height: calc(var(--title-height) - 4px);\n  font-weight: 600;\n  padding: 0 var(--padding);\n  -webkit-tap-highlight-color: transparent;\n  cursor: pointer;\n  outline: none;\n  text-decoration-skip: objects;\n}\n.lil-gui .title:before {\n  font-family: \"lil-gui\";\n  content: \"▾\";\n  padding-right: 2px;\n  display: inline-block;\n}\n.lil-gui .title:active {\n  background: var(--title-background-color);\n  opacity: 0.75;\n}\n@media (hover: hover) {\n  body:not(.lil-gui-dragging) .lil-gui .title:hover {\n    background: var(--title-background-color);\n    opacity: 0.85;\n  }\n  .lil-gui .title:focus {\n    text-decoration: underline var(--focus-color);\n  }\n}\n.lil-gui.root > .title:focus {\n  text-decoration: none !important;\n}\n.lil-gui.closed > .title:before {\n  content: \"▸\";\n}\n.lil-gui.closed > .children {\n  transform: translateY(-7px);\n  opacity: 0;\n}\n.lil-gui.closed:not(.transition) > .children {\n  display: none;\n}\n.lil-gui.transition > .children {\n  transition-duration: 300ms;\n  transition-property: height, opacity, transform;\n  transition-timing-function: cubic-bezier(0.2, 0.6, 0.35, 1);\n  overflow: hidden;\n  pointer-events: none;\n}\n.lil-gui .children:empty:before {\n  content: \"Empty\";\n  padding: 0 var(--padding);\n  margin: var(--spacing) 0;\n  display: block;\n  height: var(--widget-height);\n  font-style: italic;\n  line-height: var(--widget-height);\n  opacity: 0.5;\n}\n.lil-gui.root > .children > .lil-gui > .title {\n  border: 0 solid var(--widget-color);\n  border-width: 1px 0;\n  transition: border-color 300ms;\n}\n.lil-gui.root > .children > .lil-gui.closed > .title {\n  border-bottom-color: transparent;\n}\n.lil-gui + .controller {\n  border-top: 1px solid var(--widget-color);\n  margin-top: 0;\n  padding-top: var(--spacing);\n}\n.lil-gui .lil-gui .lil-gui > .title {\n  border: none;\n}\n.lil-gui .lil-gui .lil-gui > .children {\n  border: none;\n  margin-left: var(--folder-indent);\n  border-left: 2px solid var(--widget-color);\n}\n.lil-gui .lil-gui .controller {\n  border: none;\n}\n\n.lil-gui label, .lil-gui input, .lil-gui button {\n  -webkit-tap-highlight-color: transparent;\n}\n.lil-gui input {\n  border: 0;\n  outline: none;\n  font-family: var(--font-family);\n  font-size: var(--input-font-size);\n  border-radius: var(--widget-border-radius);\n  height: var(--widget-height);\n  background: var(--widget-color);\n  color: var(--text-color);\n  width: 100%;\n}\n@media (hover: hover) {\n  .lil-gui input:hover {\n    background: var(--hover-color);\n  }\n  .lil-gui input:active {\n    background: var(--focus-color);\n  }\n}\n.lil-gui input:disabled {\n  opacity: 1;\n}\n.lil-gui input[type=text],\n.lil-gui input[type=number] {\n  padding: var(--widget-padding);\n  -moz-appearance: textfield;\n}\n.lil-gui input[type=text]:focus,\n.lil-gui input[type=number]:focus {\n  background: var(--focus-color);\n}\n.lil-gui input[type=checkbox] {\n  appearance: none;\n  width: var(--checkbox-size);\n  height: var(--checkbox-size);\n  border-radius: var(--widget-border-radius);\n  text-align: center;\n  cursor: pointer;\n}\n.lil-gui input[type=checkbox]:checked:before {\n  font-family: \"lil-gui\";\n  content: \"✓\";\n  font-size: var(--checkbox-size);\n  line-height: var(--checkbox-size);\n}\n@media (hover: hover) {\n  .lil-gui input[type=checkbox]:focus {\n    box-shadow: inset 0 0 0 1px var(--focus-color);\n  }\n}\n.lil-gui button {\n  outline: none;\n  cursor: pointer;\n  font-family: var(--font-family);\n  font-size: var(--font-size);\n  color: var(--text-color);\n  width: 100%;\n  height: var(--widget-height);\n  text-transform: none;\n  background: var(--widget-color);\n  border-radius: var(--widget-border-radius);\n  border: none;\n}\n@media (hover: hover) {\n  .lil-gui button:hover {\n    background: var(--hover-color);\n  }\n  .lil-gui button:focus {\n    box-shadow: inset 0 0 0 1px var(--focus-color);\n  }\n}\n.lil-gui button:active {\n  background: var(--focus-color);\n}\n\n@font-face {\n  font-family: \"lil-gui\";\n  src: url(\"data:application/font-woff;charset=utf-8;base64,d09GRgABAAAAAAUsAAsAAAAACJwAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAABHU1VCAAABCAAAAH4AAADAImwmYE9TLzIAAAGIAAAAPwAAAGBKqH5SY21hcAAAAcgAAAD0AAACrukyyJBnbHlmAAACvAAAAF8AAACEIZpWH2hlYWQAAAMcAAAAJwAAADZfcj2zaGhlYQAAA0QAAAAYAAAAJAC5AHhobXR4AAADXAAAABAAAABMAZAAAGxvY2EAAANsAAAAFAAAACgCEgIybWF4cAAAA4AAAAAeAAAAIAEfABJuYW1lAAADoAAAASIAAAIK9SUU/XBvc3QAAATEAAAAZgAAAJCTcMc2eJxVjbEOgjAURU+hFRBK1dGRL+ALnAiToyMLEzFpnPz/eAshwSa97517c/MwwJmeB9kwPl+0cf5+uGPZXsqPu4nvZabcSZldZ6kfyWnomFY/eScKqZNWupKJO6kXN3K9uCVoL7iInPr1X5baXs3tjuMqCtzEuagm/AAlzQgPAAB4nGNgYRBlnMDAysDAYM/gBiT5oLQBAwuDJAMDEwMrMwNWEJDmmsJwgCFeXZghBcjlZMgFCzOiKOIFAB71Bb8AeJy1kjFuwkAQRZ+DwRAwBtNQRUGKQ8OdKCAWUhAgKLhIuAsVSpWz5Bbkj3dEgYiUIszqWdpZe+Z7/wB1oCYmIoboiwiLT2WjKl/jscrHfGg/pKdMkyklC5Zs2LEfHYpjcRoPzme9MWWmk3dWbK9ObkWkikOetJ554fWyoEsmdSlt+uR0pCJR34b6t/TVg1SY3sYvdf8vuiKrpyaDXDISiegp17p7579Gp3p++y7HPAiY9pmTibljrr85qSidtlg4+l25GLCaS8e6rRxNBmsnERunKbaOObRz7N72ju5vdAjYpBXHgJylOAVsMseDAPEP8LYoUHicY2BiAAEfhiAGJgZWBgZ7RnFRdnVJELCQlBSRlATJMoLV2DK4glSYs6ubq5vbKrJLSbGrgEmovDuDJVhe3VzcXFwNLCOILB/C4IuQ1xTn5FPilBTj5FPmBAB4WwoqAHicY2BkYGAA4sk1sR/j+W2+MnAzpDBgAyEMQUCSg4EJxAEAwUgFHgB4nGNgZGBgSGFggJMhDIwMqEAYAByHATJ4nGNgAIIUNEwmAABl3AGReJxjYAACIQYlBiMGJ3wQAEcQBEV4nGNgZGBgEGZgY2BiAAEQyQWEDAz/wXwGAAsPATIAAHicXdBNSsNAHAXwl35iA0UQXYnMShfS9GPZA7T7LgIu03SSpkwzYTIt1BN4Ak/gKTyAeCxfw39jZkjymzcvAwmAW/wgwHUEGDb36+jQQ3GXGot79L24jxCP4gHzF/EIr4jEIe7wxhOC3g2TMYy4Q7+Lu/SHuEd/ivt4wJd4wPxbPEKMX3GI5+DJFGaSn4qNzk8mcbKSR6xdXdhSzaOZJGtdapd4vVPbi6rP+cL7TGXOHtXKll4bY1Xl7EGnPtp7Xy2n00zyKLVHfkHBa4IcJ2oD3cgggWvt/V/FbDrUlEUJhTn/0azVWbNTNr0Ens8de1tceK9xZmfB1CPjOmPH4kitmvOubcNpmVTN3oFJyjzCvnmrwhJTzqzVj9jiSX911FjeAAB4nG3HMRKCMBBA0f0giiKi4DU8k0V2GWbIZDOh4PoWWvq6J5V8If9NVNQcaDhyouXMhY4rPTcG7jwYmXhKq8Wz+p762aNaeYXom2n3m2dLTVgsrCgFJ7OTmIkYbwIbC6vIB7WmFfAAAA==\") format(\"woff\");\n}`;\nfunction _injectStyles(cssContent) {\n    const injected = document.createElement(\"style\");\n    injected.innerHTML = cssContent;\n    const before = document.querySelector(\"head link[rel=stylesheet], head style\");\n    if (before) {\n        document.head.insertBefore(injected, before);\n    } else {\n        document.head.appendChild(injected);\n    }\n}\nlet stylesInjected = false;\nclass GUI {\n    /**\n\t * Creates a panel that holds controllers.\n\t * @example\n\t * new GUI();\n\t * new GUI( { container: document.getElementById( 'custom' ) } );\n\t *\n\t * @param {object} [options]\n\t * @param {boolean} [options.autoPlace=true]\n\t * Adds the GUI to `document.body` and fixes it to the top right of the page.\n\t *\n\t * @param {HTMLElement} [options.container]\n\t * Adds the GUI to this DOM element. Overrides `autoPlace`.\n\t *\n\t * @param {number} [options.width=245]\n\t * Width of the GUI in pixels, usually set when name labels become too long. Note that you can make\n\t * name labels wider in CSS with `.lil‑gui { ‑‑name‑width: 55% }`.\n\t *\n\t * @param {string} [options.title=Controls]\n\t * Name to display in the title bar.\n\t *\n\t * @param {boolean} [options.closeFolders=false]\n\t * Pass `true` to close all folders in this GUI by default.\n\t *\n\t * @param {boolean} [options.injectStyles=true]\n\t * Injects the default stylesheet into the page if this is the first GUI.\n\t * Pass `false` to use your own stylesheet.\n\t *\n\t * @param {number} [options.touchStyles=true]\n\t * Makes controllers larger on touch devices. Pass `false` to disable touch styles.\n\t *\n\t * @param {GUI} [options.parent]\n\t * Adds this GUI as a child in another GUI. Usually this is done for you by `addFolder()`.\n\t *\n\t */ constructor({ parent, autoPlace = parent === undefined, container, width, title = \"Controls\", closeFolders = false, injectStyles = true, touchStyles = true } = {}){\n        /**\n\t\t * The GUI containing this folder, or `undefined` if this is the root GUI.\n\t\t * @type {GUI}\n\t\t */ this.parent = parent;\n        /**\n\t\t * The top level GUI containing this folder, or `this` if this is the root GUI.\n\t\t * @type {GUI}\n\t\t */ this.root = parent ? parent.root : this;\n        /**\n\t\t * The list of controllers and folders contained by this GUI.\n\t\t * @type {Array<GUI|Controller>}\n\t\t */ this.children = [];\n        /**\n\t\t * The list of controllers contained by this GUI.\n\t\t * @type {Array<Controller>}\n\t\t */ this.controllers = [];\n        /**\n\t\t * The list of folders contained by this GUI.\n\t\t * @type {Array<GUI>}\n\t\t */ this.folders = [];\n        /**\n\t\t * Used to determine if the GUI is closed. Use `gui.open()` or `gui.close()` to change this.\n\t\t * @type {boolean}\n\t\t */ this._closed = false;\n        /**\n\t\t * Used to determine if the GUI is hidden. Use `gui.show()` or `gui.hide()` to change this.\n\t\t * @type {boolean}\n\t\t */ this._hidden = false;\n        /**\n\t\t * The outermost container element.\n\t\t * @type {HTMLElement}\n\t\t */ this.domElement = document.createElement(\"div\");\n        this.domElement.classList.add(\"lil-gui\");\n        /**\n\t\t * The DOM element that contains the title.\n\t\t * @type {HTMLElement}\n\t\t */ this.$title = document.createElement(\"div\");\n        this.$title.classList.add(\"title\");\n        this.$title.setAttribute(\"role\", \"button\");\n        this.$title.setAttribute(\"aria-expanded\", true);\n        this.$title.setAttribute(\"tabindex\", 0);\n        this.$title.addEventListener(\"click\", ()=>this.openAnimated(this._closed));\n        this.$title.addEventListener(\"keydown\", (e)=>{\n            if (e.code === \"Enter\" || e.code === \"Space\") {\n                e.preventDefault();\n                this.$title.click();\n            }\n        });\n        // enables :active pseudo class on mobile\n        this.$title.addEventListener(\"touchstart\", ()=>{}, {\n            passive: true\n        });\n        /**\n\t\t * The DOM element that contains children.\n\t\t * @type {HTMLElement}\n\t\t */ this.$children = document.createElement(\"div\");\n        this.$children.classList.add(\"children\");\n        this.domElement.appendChild(this.$title);\n        this.domElement.appendChild(this.$children);\n        this.title(title);\n        if (this.parent) {\n            this.parent.children.push(this);\n            this.parent.folders.push(this);\n            this.parent.$children.appendChild(this.domElement);\n            // Stop the constructor early, everything onward only applies to root GUI's\n            return;\n        }\n        this.domElement.classList.add(\"root\");\n        if (touchStyles) {\n            this.domElement.classList.add(\"allow-touch-styles\");\n        }\n        // Inject stylesheet if we haven't done that yet\n        if (!stylesInjected && injectStyles) {\n            _injectStyles(stylesheet);\n            stylesInjected = true;\n        }\n        if (container) {\n            container.appendChild(this.domElement);\n        } else if (autoPlace) {\n            this.domElement.classList.add(\"autoPlace\");\n            document.body.appendChild(this.domElement);\n        }\n        if (width) {\n            this.domElement.style.setProperty(\"--width\", width + \"px\");\n        }\n        this._closeFolders = closeFolders;\n    }\n    /**\n\t * Adds a controller to the GUI, inferring controller type using the `typeof` operator.\n\t * @example\n\t * gui.add( object, 'property' );\n\t * gui.add( object, 'number', 0, 100, 1 );\n\t * gui.add( object, 'options', [ 1, 2, 3 ] );\n\t *\n\t * @param {object} object The object the controller will modify.\n\t * @param {string} property Name of the property to control.\n\t * @param {number|object|Array} [$1] Minimum value for number controllers, or the set of\n\t * selectable values for a dropdown.\n\t * @param {number} [max] Maximum value for number controllers.\n\t * @param {number} [step] Step value for number controllers.\n\t * @returns {Controller}\n\t */ add(object, property, $1, max, step) {\n        if (Object($1) === $1) {\n            return new OptionController(this, object, property, $1);\n        }\n        const initialValue = object[property];\n        switch(typeof initialValue){\n            case \"number\":\n                return new NumberController(this, object, property, $1, max, step);\n            case \"boolean\":\n                return new BooleanController(this, object, property);\n            case \"string\":\n                return new StringController(this, object, property);\n            case \"function\":\n                return new FunctionController(this, object, property);\n        }\n        console.error(`gui.add failed\n\tproperty:`, property, `\n\tobject:`, object, `\n\tvalue:`, initialValue);\n    }\n    /**\n\t * Adds a color controller to the GUI.\n\t * @example\n\t * params = {\n\t * \tcssColor: '#ff00ff',\n\t * \trgbColor: { r: 0, g: 0.2, b: 0.4 },\n\t * \tcustomRange: [ 0, 127, 255 ],\n\t * };\n\t *\n\t * gui.addColor( params, 'cssColor' );\n\t * gui.addColor( params, 'rgbColor' );\n\t * gui.addColor( params, 'customRange', 255 );\n\t *\n\t * @param {object} object The object the controller will modify.\n\t * @param {string} property Name of the property to control.\n\t * @param {number} rgbScale Maximum value for a color channel when using an RGB color. You may\n\t * need to set this to 255 if your colors are too bright.\n\t * @returns {Controller}\n\t */ addColor(object, property, rgbScale = 1) {\n        return new ColorController(this, object, property, rgbScale);\n    }\n    /**\n\t * Adds a folder to the GUI, which is just another GUI. This method returns\n\t * the nested GUI so you can add controllers to it.\n\t * @example\n\t * const folder = gui.addFolder( 'Position' );\n\t * folder.add( position, 'x' );\n\t * folder.add( position, 'y' );\n\t * folder.add( position, 'z' );\n\t *\n\t * @param {string} title Name to display in the folder's title bar.\n\t * @returns {GUI}\n\t */ addFolder(title) {\n        const folder = new GUI({\n            parent: this,\n            title\n        });\n        if (this.root._closeFolders) folder.close();\n        return folder;\n    }\n    /**\n\t * Recalls values that were saved with `gui.save()`.\n\t * @param {object} obj\n\t * @param {boolean} recursive Pass false to exclude folders descending from this GUI.\n\t * @returns {this}\n\t */ load(obj, recursive = true) {\n        if (obj.controllers) {\n            this.controllers.forEach((c)=>{\n                if (c instanceof FunctionController) return;\n                if (c._name in obj.controllers) {\n                    c.load(obj.controllers[c._name]);\n                }\n            });\n        }\n        if (recursive && obj.folders) {\n            this.folders.forEach((f)=>{\n                if (f._title in obj.folders) {\n                    f.load(obj.folders[f._title]);\n                }\n            });\n        }\n        return this;\n    }\n    /**\n\t * Returns an object mapping controller names to values. The object can be passed to `gui.load()` to\n\t * recall these values.\n\t * @example\n\t * {\n\t * \tcontrollers: {\n\t * \t\tprop1: 1,\n\t * \t\tprop2: 'value',\n\t * \t\t...\n\t * \t},\n\t * \tfolders: {\n\t * \t\tfolderName1: { controllers, folders },\n\t * \t\tfolderName2: { controllers, folders }\n\t * \t\t...\n\t * \t}\n\t * }\n\t *\n\t * @param {boolean} recursive Pass false to exclude folders descending from this GUI.\n\t * @returns {object}\n\t */ save(recursive = true) {\n        const obj = {\n            controllers: {},\n            folders: {}\n        };\n        this.controllers.forEach((c)=>{\n            if (c instanceof FunctionController) return;\n            if (c._name in obj.controllers) {\n                throw new Error(`Cannot save GUI with duplicate property \"${c._name}\"`);\n            }\n            obj.controllers[c._name] = c.save();\n        });\n        if (recursive) {\n            this.folders.forEach((f)=>{\n                if (f._title in obj.folders) {\n                    throw new Error(`Cannot save GUI with duplicate folder \"${f._title}\"`);\n                }\n                obj.folders[f._title] = f.save();\n            });\n        }\n        return obj;\n    }\n    /**\n\t * Opens a GUI or folder. GUI and folders are open by default.\n\t * @param {boolean} open Pass false to close.\n\t * @returns {this}\n\t * @example\n\t * gui.open(); // open\n\t * gui.open( false ); // close\n\t * gui.open( gui._closed ); // toggle\n\t */ open(open = true) {\n        this._setClosed(!open);\n        this.$title.setAttribute(\"aria-expanded\", !this._closed);\n        this.domElement.classList.toggle(\"closed\", this._closed);\n        return this;\n    }\n    /**\n\t * Closes the GUI.\n\t * @returns {this}\n\t */ close() {\n        return this.open(false);\n    }\n    _setClosed(closed) {\n        if (this._closed === closed) return;\n        this._closed = closed;\n        this._callOnOpenClose(this);\n    }\n    /**\n\t * Shows the GUI after it's been hidden.\n\t * @param {boolean} show\n\t * @returns {this}\n\t * @example\n\t * gui.show();\n\t * gui.show( false ); // hide\n\t * gui.show( gui._hidden ); // toggle\n\t */ show(show = true) {\n        this._hidden = !show;\n        this.domElement.style.display = this._hidden ? \"none\" : \"\";\n        return this;\n    }\n    /**\n\t * Hides the GUI.\n\t * @returns {this}\n\t */ hide() {\n        return this.show(false);\n    }\n    openAnimated(open = true) {\n        // set state immediately\n        this._setClosed(!open);\n        this.$title.setAttribute(\"aria-expanded\", !this._closed);\n        // wait for next frame to measure $children\n        requestAnimationFrame(()=>{\n            // explicitly set initial height for transition\n            const initialHeight = this.$children.clientHeight;\n            this.$children.style.height = initialHeight + \"px\";\n            this.domElement.classList.add(\"transition\");\n            const onTransitionEnd = (e)=>{\n                if (e.target !== this.$children) return;\n                this.$children.style.height = \"\";\n                this.domElement.classList.remove(\"transition\");\n                this.$children.removeEventListener(\"transitionend\", onTransitionEnd);\n            };\n            this.$children.addEventListener(\"transitionend\", onTransitionEnd);\n            // todo: this is wrong if children's scrollHeight makes for a gui taller than maxHeight\n            const targetHeight = !open ? 0 : this.$children.scrollHeight;\n            this.domElement.classList.toggle(\"closed\", !open);\n            requestAnimationFrame(()=>{\n                this.$children.style.height = targetHeight + \"px\";\n            });\n        });\n        return this;\n    }\n    /**\n\t * Change the title of this GUI.\n\t * @param {string} title\n\t * @returns {this}\n\t */ title(title) {\n        /**\n\t\t * Current title of the GUI. Use `gui.title( 'Title' )` to modify this value.\n\t\t * @type {string}\n\t\t */ this._title = title;\n        this.$title.textContent = title;\n        return this;\n    }\n    /**\n\t * Resets all controllers to their initial values.\n\t * @param {boolean} recursive Pass false to exclude folders descending from this GUI.\n\t * @returns {this}\n\t */ reset(recursive = true) {\n        const controllers = recursive ? this.controllersRecursive() : this.controllers;\n        controllers.forEach((c)=>c.reset());\n        return this;\n    }\n    /**\n\t * Pass a function to be called whenever a controller in this GUI changes.\n\t * @param {function({object:object, property:string, value:any, controller:Controller})} callback\n\t * @returns {this}\n\t * @example\n\t * gui.onChange( event => {\n\t * \tevent.object     // object that was modified\n\t * \tevent.property   // string, name of property\n\t * \tevent.value      // new value of controller\n\t * \tevent.controller // controller that was modified\n\t * } );\n\t */ onChange(callback) {\n        /**\n\t\t * Used to access the function bound to `onChange` events. Don't modify this value\n\t\t * directly. Use the `gui.onChange( callback )` method instead.\n\t\t * @type {Function}\n\t\t */ this._onChange = callback;\n        return this;\n    }\n    _callOnChange(controller) {\n        if (this.parent) {\n            this.parent._callOnChange(controller);\n        }\n        if (this._onChange !== undefined) {\n            this._onChange.call(this, {\n                object: controller.object,\n                property: controller.property,\n                value: controller.getValue(),\n                controller\n            });\n        }\n    }\n    /**\n\t * Pass a function to be called whenever a controller in this GUI has finished changing.\n\t * @param {function({object:object, property:string, value:any, controller:Controller})} callback\n\t * @returns {this}\n\t * @example\n\t * gui.onFinishChange( event => {\n\t * \tevent.object     // object that was modified\n\t * \tevent.property   // string, name of property\n\t * \tevent.value      // new value of controller\n\t * \tevent.controller // controller that was modified\n\t * } );\n\t */ onFinishChange(callback) {\n        /**\n\t\t * Used to access the function bound to `onFinishChange` events. Don't modify this value\n\t\t * directly. Use the `gui.onFinishChange( callback )` method instead.\n\t\t * @type {Function}\n\t\t */ this._onFinishChange = callback;\n        return this;\n    }\n    _callOnFinishChange(controller) {\n        if (this.parent) {\n            this.parent._callOnFinishChange(controller);\n        }\n        if (this._onFinishChange !== undefined) {\n            this._onFinishChange.call(this, {\n                object: controller.object,\n                property: controller.property,\n                value: controller.getValue(),\n                controller\n            });\n        }\n    }\n    /**\n\t * Pass a function to be called when this GUI or its descendants are opened or closed.\n\t * @param {function(GUI)} callback\n\t * @returns {this}\n\t * @example\n\t * gui.onOpenClose( changedGUI => {\n\t * \tconsole.log( changedGUI._closed );\n\t * } );\n\t */ onOpenClose(callback) {\n        this._onOpenClose = callback;\n        return this;\n    }\n    _callOnOpenClose(changedGUI) {\n        if (this.parent) {\n            this.parent._callOnOpenClose(changedGUI);\n        }\n        if (this._onOpenClose !== undefined) {\n            this._onOpenClose.call(this, changedGUI);\n        }\n    }\n    /**\n\t * Destroys all DOM elements and event listeners associated with this GUI.\n\t */ destroy() {\n        if (this.parent) {\n            this.parent.children.splice(this.parent.children.indexOf(this), 1);\n            this.parent.folders.splice(this.parent.folders.indexOf(this), 1);\n        }\n        if (this.domElement.parentElement) {\n            this.domElement.parentElement.removeChild(this.domElement);\n        }\n        Array.from(this.children).forEach((c)=>c.destroy());\n    }\n    /**\n\t * Returns an array of controllers contained by this GUI and its descendents.\n\t * @returns {Controller[]}\n\t */ controllersRecursive() {\n        let controllers = Array.from(this.controllers);\n        this.folders.forEach((f)=>{\n            controllers = controllers.concat(f.controllersRecursive());\n        });\n        return controllers;\n    }\n    /**\n\t * Returns an array of folders contained by this GUI and its descendents.\n\t * @returns {GUI[]}\n\t */ foldersRecursive() {\n        let folders = Array.from(this.folders);\n        this.folders.forEach((f)=>{\n            folders = folders.concat(f.foldersRecursive());\n        });\n        return folders;\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (GUI);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/lil-gui/dist/lil-gui.esm.js\n");

/***/ })

};
;